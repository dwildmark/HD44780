
HD44780_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000abc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000568  20070000  00080abc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000008c  20070568  00081024  00010568  2**2
                  ALLOC
  3 .stack        00002004  200705f4  000810b0  00010568  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005c7c  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  00016268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000004f0  00000000  00000000  0001740e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000440  00000000  00000000  000178fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00015e62  00000000  00000000  00017d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000089d7  00000000  00000000  0002dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000616ce  00000000  00000000  00036577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b18  00000000  00000000  00097c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000020f4  00000000  00000000  00098760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725f8 	.word	0x200725f8
   80004:	00080765 	.word	0x00080765
   80008:	00080761 	.word	0x00080761
   8000c:	00080761 	.word	0x00080761
   80010:	00080761 	.word	0x00080761
   80014:	00080761 	.word	0x00080761
   80018:	00080761 	.word	0x00080761
	...
   8002c:	00080761 	.word	0x00080761
   80030:	00080761 	.word	0x00080761
   80034:	00000000 	.word	0x00000000
   80038:	00080761 	.word	0x00080761
   8003c:	00080761 	.word	0x00080761
   80040:	00080761 	.word	0x00080761
   80044:	00080761 	.word	0x00080761
   80048:	00080761 	.word	0x00080761
   8004c:	00080761 	.word	0x00080761
   80050:	00080761 	.word	0x00080761
   80054:	00080761 	.word	0x00080761
   80058:	00080761 	.word	0x00080761
   8005c:	00080761 	.word	0x00080761
   80060:	00080761 	.word	0x00080761
   80064:	00080761 	.word	0x00080761
   80068:	00000000 	.word	0x00000000
   8006c:	000805d1 	.word	0x000805d1
   80070:	000805e5 	.word	0x000805e5
   80074:	000805f9 	.word	0x000805f9
   80078:	0008060d 	.word	0x0008060d
	...
   80084:	00080761 	.word	0x00080761
   80088:	00080761 	.word	0x00080761
   8008c:	00080761 	.word	0x00080761
   80090:	00080761 	.word	0x00080761
   80094:	00080761 	.word	0x00080761
   80098:	00080761 	.word	0x00080761
   8009c:	00080761 	.word	0x00080761
   800a0:	00080761 	.word	0x00080761
   800a4:	00000000 	.word	0x00000000
   800a8:	00080761 	.word	0x00080761
   800ac:	00080761 	.word	0x00080761
   800b0:	00080761 	.word	0x00080761
   800b4:	00080761 	.word	0x00080761
   800b8:	00080761 	.word	0x00080761
   800bc:	00080761 	.word	0x00080761
   800c0:	00080761 	.word	0x00080761
   800c4:	00080761 	.word	0x00080761
   800c8:	00080761 	.word	0x00080761
   800cc:	00080761 	.word	0x00080761
   800d0:	00080761 	.word	0x00080761
   800d4:	00080761 	.word	0x00080761
   800d8:	00080761 	.word	0x00080761
   800dc:	00080761 	.word	0x00080761
   800e0:	00080761 	.word	0x00080761
   800e4:	00080761 	.word	0x00080761
   800e8:	00080761 	.word	0x00080761
   800ec:	00080761 	.word	0x00080761
   800f0:	00080761 	.word	0x00080761

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070568 	.word	0x20070568
   80110:	00000000 	.word	0x00000000
   80114:	00080abc 	.word	0x00080abc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00080abc 	.word	0x00080abc
   80144:	2007056c 	.word	0x2007056c
   80148:	00080abc 	.word	0x00080abc
   8014c:	00000000 	.word	0x00000000

00080150 <LCD_WriteNibble>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80150:	2202      	movs	r2, #2
   80152:	4b13      	ldr	r3, [pc, #76]	; (801a0 <LCD_WriteNibble+0x50>)
   80154:	631a      	str	r2, [r3, #48]	; 0x30
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80156:	f010 0f01 	tst.w	r0, #1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8015a:	f04f 0201 	mov.w	r2, #1
   8015e:	bf12      	itee	ne
   80160:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80162:	4b0f      	ldreq	r3, [pc, #60]	; (801a0 <LCD_WriteNibble+0x50>)
   80164:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80166:	f010 0f02 	tst.w	r0, #2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8016a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <LCD_WriteNibble+0x54>)
   80170:	bf14      	ite	ne
   80172:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80174:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80176:	f010 0f04 	tst.w	r0, #4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8017a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8017e:	4b09      	ldr	r3, [pc, #36]	; (801a4 <LCD_WriteNibble+0x54>)
   80180:	bf14      	ite	ne
   80182:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80184:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80186:	f010 0f08 	tst.w	r0, #8
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8018a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8018e:	4b06      	ldr	r3, [pc, #24]	; (801a8 <LCD_WriteNibble+0x58>)
   80190:	bf14      	ite	ne
   80192:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80194:	635a      	streq	r2, [r3, #52]	; 0x34
   80196:	2202      	movs	r2, #2
   80198:	4b01      	ldr	r3, [pc, #4]	; (801a0 <LCD_WriteNibble+0x50>)
   8019a:	635a      	str	r2, [r3, #52]	; 0x34
   8019c:	4770      	bx	lr
   8019e:	bf00      	nop
   801a0:	400e1400 	.word	0x400e1400
   801a4:	400e0e00 	.word	0x400e0e00
   801a8:	400e1000 	.word	0x400e1000

000801ac <LCD_WriteCommand>:
}

/************************************************************************/
/* Writes a command to the screen controller.                           */
/************************************************************************/
void LCD_WriteCommand(uint8_t command) {
   801ac:	b538      	push	{r3, r4, r5, lr}
   801ae:	4605      	mov	r5, r0
   801b0:	2204      	movs	r2, #4
   801b2:	4b06      	ldr	r3, [pc, #24]	; (801cc <LCD_WriteCommand+0x20>)
   801b4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(LCD_RS, false);
	uint8_t lower_nibble = command & 0x0F;
	uint8_t upper_nibble = (command & 0xF0)>>4;
	LCD_WriteNibble(lower_nibble);
   801b6:	f000 000f 	and.w	r0, r0, #15
   801ba:	4c05      	ldr	r4, [pc, #20]	; (801d0 <LCD_WriteCommand+0x24>)
   801bc:	47a0      	blx	r4
	LCD_WriteNibble(upper_nibble);
   801be:	0928      	lsrs	r0, r5, #4
   801c0:	47a0      	blx	r4
	delay_ms(2);
   801c2:	f642 60e0 	movw	r0, #12000	; 0x2ee0
   801c6:	4b03      	ldr	r3, [pc, #12]	; (801d4 <LCD_WriteCommand+0x28>)
   801c8:	4798      	blx	r3
   801ca:	bd38      	pop	{r3, r4, r5, pc}
   801cc:	400e1400 	.word	0x400e1400
   801d0:	00080151 	.word	0x00080151
   801d4:	20070001 	.word	0x20070001

000801d8 <LCD_init>:
}

/************************************************************************/
/* Initiates the LCD-controller.                                                                     */
/************************************************************************/
void LCD_init(void) {
   801d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   801da:	200b      	movs	r0, #11
   801dc:	4c22      	ldr	r4, [pc, #136]	; (80268 <LCD_init+0x90>)
   801de:	47a0      	blx	r4
   801e0:	200c      	movs	r0, #12
   801e2:	47a0      	blx	r4
   801e4:	200d      	movs	r0, #13
   801e6:	47a0      	blx	r4
   801e8:	200e      	movs	r0, #14
   801ea:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801ec:	4b1f      	ldr	r3, [pc, #124]	; (8026c <LCD_init+0x94>)
   801ee:	2201      	movs	r2, #1
   801f0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801f6:	4a1e      	ldr	r2, [pc, #120]	; (80270 <LCD_init+0x98>)
   801f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   801fc:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801fe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80206:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80208:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8020c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80210:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80214:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80216:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8021a:	2102      	movs	r1, #2
   8021c:	6119      	str	r1, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8021e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80222:	2204      	movs	r2, #4
   80224:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80226:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8022a:	6359      	str	r1, [r3, #52]	; 0x34
   8022c:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);

	ioport_set_pin_level(LCD_EN, false);
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
   8022e:	4811      	ldr	r0, [pc, #68]	; (80274 <LCD_init+0x9c>)
   80230:	4b11      	ldr	r3, [pc, #68]	; (80278 <LCD_init+0xa0>)
   80232:	4798      	blx	r3
   80234:	2403      	movs	r4, #3
	
	for(int i = 0; i < 3; i++) {
		LCD_WriteNibble(HD44780_INIT);
   80236:	4627      	mov	r7, r4
   80238:	4e10      	ldr	r6, [pc, #64]	; (8027c <LCD_init+0xa4>)
		delay_ms(5);
   8023a:	4d0f      	ldr	r5, [pc, #60]	; (80278 <LCD_init+0xa0>)
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
	
	for(int i = 0; i < 3; i++) {
		LCD_WriteNibble(HD44780_INIT);
   8023c:	4638      	mov	r0, r7
   8023e:	47b0      	blx	r6
		delay_ms(5);
   80240:	f247 5030 	movw	r0, #30000	; 0x7530
   80244:	47a8      	blx	r5
	ioport_set_pin_level(LCD_EN, false);
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
	
	for(int i = 0; i < 3; i++) {
   80246:	3c01      	subs	r4, #1
   80248:	d1f8      	bne.n	8023c <LCD_init+0x64>
		LCD_WriteNibble(HD44780_INIT);
		delay_ms(5);
	}
	
	LCD_WriteNibble(HD44780_HOME);
   8024a:	2002      	movs	r0, #2
   8024c:	4b0b      	ldr	r3, [pc, #44]	; (8027c <LCD_init+0xa4>)
   8024e:	4798      	blx	r3
	
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
   80250:	2028      	movs	r0, #40	; 0x28
   80252:	4c0b      	ldr	r4, [pc, #44]	; (80280 <LCD_init+0xa8>)
   80254:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
   80256:	2008      	movs	r0, #8
   80258:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_CLEAR);
   8025a:	2001      	movs	r0, #1
   8025c:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_ENTRY_MODE |HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
   8025e:	2006      	movs	r0, #6
   80260:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_ON | HD44780_CURSOR_BLINK);
   80262:	200f      	movs	r0, #15
   80264:	47a0      	blx	r4
   80266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80268:	0008070d 	.word	0x0008070d
   8026c:	400e1400 	.word	0x400e1400
   80270:	400e0e00 	.word	0x400e0e00
   80274:	000927c0 	.word	0x000927c0
   80278:	20070001 	.word	0x20070001
   8027c:	00080151 	.word	0x00080151
   80280:	000801ad 	.word	0x000801ad

00080284 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80284:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80286:	480e      	ldr	r0, [pc, #56]	; (802c0 <sysclk_init+0x3c>)
   80288:	4b0e      	ldr	r3, [pc, #56]	; (802c4 <sysclk_init+0x40>)
   8028a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8028c:	2000      	movs	r0, #0
   8028e:	213e      	movs	r1, #62	; 0x3e
   80290:	4b0d      	ldr	r3, [pc, #52]	; (802c8 <sysclk_init+0x44>)
   80292:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80294:	4c0d      	ldr	r4, [pc, #52]	; (802cc <sysclk_init+0x48>)
   80296:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80298:	2800      	cmp	r0, #0
   8029a:	d0fc      	beq.n	80296 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8029c:	4b0c      	ldr	r3, [pc, #48]	; (802d0 <sysclk_init+0x4c>)
   8029e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   802a0:	4a0c      	ldr	r2, [pc, #48]	; (802d4 <sysclk_init+0x50>)
   802a2:	4b0d      	ldr	r3, [pc, #52]	; (802d8 <sysclk_init+0x54>)
   802a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   802a6:	4c0d      	ldr	r4, [pc, #52]	; (802dc <sysclk_init+0x58>)
   802a8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   802aa:	2800      	cmp	r0, #0
   802ac:	d0fc      	beq.n	802a8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   802ae:	2010      	movs	r0, #16
   802b0:	4b0b      	ldr	r3, [pc, #44]	; (802e0 <sysclk_init+0x5c>)
   802b2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   802b4:	4b0b      	ldr	r3, [pc, #44]	; (802e4 <sysclk_init+0x60>)
   802b6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   802b8:	4801      	ldr	r0, [pc, #4]	; (802c0 <sysclk_init+0x3c>)
   802ba:	4b02      	ldr	r3, [pc, #8]	; (802c4 <sysclk_init+0x40>)
   802bc:	4798      	blx	r3
   802be:	bd10      	pop	{r4, pc}
   802c0:	0501bd00 	.word	0x0501bd00
   802c4:	200700b1 	.word	0x200700b1
   802c8:	00080689 	.word	0x00080689
   802cc:	000806dd 	.word	0x000806dd
   802d0:	000806ed 	.word	0x000806ed
   802d4:	200d3f01 	.word	0x200d3f01
   802d8:	400e0600 	.word	0x400e0600
   802dc:	000806fd 	.word	0x000806fd
   802e0:	00080621 	.word	0x00080621
   802e4:	00080815 	.word	0x00080815

000802e8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   802e8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   802ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   802ee:	4b16      	ldr	r3, [pc, #88]	; (80348 <board_init+0x60>)
   802f0:	605a      	str	r2, [r3, #4]
   802f2:	200b      	movs	r0, #11
   802f4:	4c15      	ldr	r4, [pc, #84]	; (8034c <board_init+0x64>)
   802f6:	47a0      	blx	r4
   802f8:	200c      	movs	r0, #12
   802fa:	47a0      	blx	r4
   802fc:	200d      	movs	r0, #13
   802fe:	47a0      	blx	r4
   80300:	200e      	movs	r0, #14
   80302:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80304:	203b      	movs	r0, #59	; 0x3b
   80306:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8030a:	4c11      	ldr	r4, [pc, #68]	; (80350 <board_init+0x68>)
   8030c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8030e:	2055      	movs	r0, #85	; 0x55
   80310:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80314:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80316:	2056      	movs	r0, #86	; 0x56
   80318:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8031c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8031e:	2068      	movs	r0, #104	; 0x68
   80320:	490c      	ldr	r1, [pc, #48]	; (80354 <board_init+0x6c>)
   80322:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80324:	205c      	movs	r0, #92	; 0x5c
   80326:	490c      	ldr	r1, [pc, #48]	; (80358 <board_init+0x70>)
   80328:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8032a:	480c      	ldr	r0, [pc, #48]	; (8035c <board_init+0x74>)
   8032c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80330:	4a0b      	ldr	r2, [pc, #44]	; (80360 <board_init+0x78>)
   80332:	4b0c      	ldr	r3, [pc, #48]	; (80364 <board_init+0x7c>)
   80334:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80336:	202b      	movs	r0, #43	; 0x2b
   80338:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8033c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8033e:	202a      	movs	r0, #42	; 0x2a
   80340:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80344:	47a0      	blx	r4
   80346:	bd10      	pop	{r4, pc}
   80348:	400e1a50 	.word	0x400e1a50
   8034c:	0008070d 	.word	0x0008070d
   80350:	0008040d 	.word	0x0008040d
   80354:	28000079 	.word	0x28000079
   80358:	28000001 	.word	0x28000001
   8035c:	400e0e00 	.word	0x400e0e00
   80360:	08000001 	.word	0x08000001
   80364:	000804e1 	.word	0x000804e1

00080368 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80368:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8036a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8036e:	d016      	beq.n	8039e <pio_set_peripheral+0x36>
   80370:	d804      	bhi.n	8037c <pio_set_peripheral+0x14>
   80372:	b1c1      	cbz	r1, 803a6 <pio_set_peripheral+0x3e>
   80374:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80378:	d00a      	beq.n	80390 <pio_set_peripheral+0x28>
   8037a:	e013      	b.n	803a4 <pio_set_peripheral+0x3c>
   8037c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80380:	d011      	beq.n	803a6 <pio_set_peripheral+0x3e>
   80382:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80386:	d00e      	beq.n	803a6 <pio_set_peripheral+0x3e>
   80388:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8038c:	d10a      	bne.n	803a4 <pio_set_peripheral+0x3c>
   8038e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80390:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80392:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80394:	400b      	ands	r3, r1
   80396:	ea23 0302 	bic.w	r3, r3, r2
   8039a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8039c:	e002      	b.n	803a4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8039e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   803a0:	4313      	orrs	r3, r2
   803a2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803a4:	6042      	str	r2, [r0, #4]
   803a6:	4770      	bx	lr

000803a8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803a8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803aa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803ae:	bf14      	ite	ne
   803b0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803b2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803b4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803b8:	bf14      	ite	ne
   803ba:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803bc:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803be:	f012 0f02 	tst.w	r2, #2
   803c2:	d002      	beq.n	803ca <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803c4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803c8:	e004      	b.n	803d4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803ca:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803ce:	bf18      	it	ne
   803d0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803d4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803d6:	6001      	str	r1, [r0, #0]
   803d8:	4770      	bx	lr
   803da:	bf00      	nop

000803dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803dc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803de:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803e0:	9c01      	ldr	r4, [sp, #4]
   803e2:	b10c      	cbz	r4, 803e8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803e4:	6641      	str	r1, [r0, #100]	; 0x64
   803e6:	e000      	b.n	803ea <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803e8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803ea:	b10b      	cbz	r3, 803f0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803ec:	6501      	str	r1, [r0, #80]	; 0x50
   803ee:	e000      	b.n	803f2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803f0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803f2:	b10a      	cbz	r2, 803f8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803f4:	6301      	str	r1, [r0, #48]	; 0x30
   803f6:	e000      	b.n	803fa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803f8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803fc:	6001      	str	r1, [r0, #0]
}
   803fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   80402:	4770      	bx	lr

00080404 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80404:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80406:	4770      	bx	lr

00080408 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80408:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8040a:	4770      	bx	lr

0008040c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8040c:	b570      	push	{r4, r5, r6, lr}
   8040e:	b082      	sub	sp, #8
   80410:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80412:	0943      	lsrs	r3, r0, #5
   80414:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80418:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8041c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8041e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80422:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80426:	d030      	beq.n	8048a <pio_configure_pin+0x7e>
   80428:	d806      	bhi.n	80438 <pio_configure_pin+0x2c>
   8042a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8042e:	d00a      	beq.n	80446 <pio_configure_pin+0x3a>
   80430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80434:	d018      	beq.n	80468 <pio_configure_pin+0x5c>
   80436:	e049      	b.n	804cc <pio_configure_pin+0xc0>
   80438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8043c:	d030      	beq.n	804a0 <pio_configure_pin+0x94>
   8043e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80442:	d02d      	beq.n	804a0 <pio_configure_pin+0x94>
   80444:	e042      	b.n	804cc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80446:	f000 001f 	and.w	r0, r0, #31
   8044a:	2601      	movs	r6, #1
   8044c:	4086      	lsls	r6, r0
   8044e:	4620      	mov	r0, r4
   80450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80454:	4632      	mov	r2, r6
   80456:	4b1f      	ldr	r3, [pc, #124]	; (804d4 <pio_configure_pin+0xc8>)
   80458:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8045a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8045e:	bf14      	ite	ne
   80460:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80462:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80464:	2001      	movs	r0, #1
   80466:	e032      	b.n	804ce <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80468:	f000 001f 	and.w	r0, r0, #31
   8046c:	2601      	movs	r6, #1
   8046e:	4086      	lsls	r6, r0
   80470:	4620      	mov	r0, r4
   80472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80476:	4632      	mov	r2, r6
   80478:	4b16      	ldr	r3, [pc, #88]	; (804d4 <pio_configure_pin+0xc8>)
   8047a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8047c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80480:	bf14      	ite	ne
   80482:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80484:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80486:	2001      	movs	r0, #1
   80488:	e021      	b.n	804ce <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8048a:	f000 031f 	and.w	r3, r0, #31
   8048e:	2601      	movs	r6, #1
   80490:	4620      	mov	r0, r4
   80492:	fa06 f103 	lsl.w	r1, r6, r3
   80496:	462a      	mov	r2, r5
   80498:	4b0f      	ldr	r3, [pc, #60]	; (804d8 <pio_configure_pin+0xcc>)
   8049a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8049c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8049e:	e016      	b.n	804ce <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804a0:	f000 031f 	and.w	r3, r0, #31
   804a4:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804aa:	ea05 0106 	and.w	r1, r5, r6
   804ae:	9100      	str	r1, [sp, #0]
   804b0:	4620      	mov	r0, r4
   804b2:	fa06 f103 	lsl.w	r1, r6, r3
   804b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804ba:	bf14      	ite	ne
   804bc:	2200      	movne	r2, #0
   804be:	2201      	moveq	r2, #1
   804c0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804c4:	4c05      	ldr	r4, [pc, #20]	; (804dc <pio_configure_pin+0xd0>)
   804c6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804c8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804ca:	e000      	b.n	804ce <pio_configure_pin+0xc2>

	default:
		return 0;
   804cc:	2000      	movs	r0, #0
	}

	return 1;
}
   804ce:	b002      	add	sp, #8
   804d0:	bd70      	pop	{r4, r5, r6, pc}
   804d2:	bf00      	nop
   804d4:	00080369 	.word	0x00080369
   804d8:	000803a9 	.word	0x000803a9
   804dc:	000803dd 	.word	0x000803dd

000804e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   804e0:	b570      	push	{r4, r5, r6, lr}
   804e2:	b082      	sub	sp, #8
   804e4:	4606      	mov	r6, r0
   804e6:	460d      	mov	r5, r1
   804e8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804ea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   804ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804f2:	d026      	beq.n	80542 <pio_configure_pin_group+0x62>
   804f4:	d806      	bhi.n	80504 <pio_configure_pin_group+0x24>
   804f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804fa:	d00a      	beq.n	80512 <pio_configure_pin_group+0x32>
   804fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80500:	d013      	beq.n	8052a <pio_configure_pin_group+0x4a>
   80502:	e034      	b.n	8056e <pio_configure_pin_group+0x8e>
   80504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80508:	d01f      	beq.n	8054a <pio_configure_pin_group+0x6a>
   8050a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8050e:	d01c      	beq.n	8054a <pio_configure_pin_group+0x6a>
   80510:	e02d      	b.n	8056e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80512:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80516:	462a      	mov	r2, r5
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <pio_configure_pin_group+0x94>)
   8051a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8051c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80520:	bf14      	ite	ne
   80522:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80524:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80526:	2001      	movs	r0, #1
   80528:	e022      	b.n	80570 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8052a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8052e:	462a      	mov	r2, r5
   80530:	4b10      	ldr	r3, [pc, #64]	; (80574 <pio_configure_pin_group+0x94>)
   80532:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80534:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80538:	bf14      	ite	ne
   8053a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8053c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8053e:	2001      	movs	r0, #1
   80540:	e016      	b.n	80570 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80542:	4b0d      	ldr	r3, [pc, #52]	; (80578 <pio_configure_pin_group+0x98>)
   80544:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80546:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80548:	e012      	b.n	80570 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8054a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8054e:	f004 0301 	and.w	r3, r4, #1
   80552:	9300      	str	r3, [sp, #0]
   80554:	4630      	mov	r0, r6
   80556:	4629      	mov	r1, r5
   80558:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8055c:	bf14      	ite	ne
   8055e:	2200      	movne	r2, #0
   80560:	2201      	moveq	r2, #1
   80562:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80566:	4c05      	ldr	r4, [pc, #20]	; (8057c <pio_configure_pin_group+0x9c>)
   80568:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8056a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8056c:	e000      	b.n	80570 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8056e:	2000      	movs	r0, #0
	}

	return 1;
}
   80570:	b002      	add	sp, #8
   80572:	bd70      	pop	{r4, r5, r6, pc}
   80574:	00080369 	.word	0x00080369
   80578:	000803a9 	.word	0x000803a9
   8057c:	000803dd 	.word	0x000803dd

00080580 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80584:	4604      	mov	r4, r0
   80586:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80588:	4b0e      	ldr	r3, [pc, #56]	; (805c4 <pio_handler_process+0x44>)
   8058a:	4798      	blx	r3
   8058c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8058e:	4620      	mov	r0, r4
   80590:	4b0d      	ldr	r3, [pc, #52]	; (805c8 <pio_handler_process+0x48>)
   80592:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80594:	4005      	ands	r5, r0
   80596:	d013      	beq.n	805c0 <pio_handler_process+0x40>
   80598:	4c0c      	ldr	r4, [pc, #48]	; (805cc <pio_handler_process+0x4c>)
   8059a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8059e:	6823      	ldr	r3, [r4, #0]
   805a0:	4543      	cmp	r3, r8
   805a2:	d108      	bne.n	805b6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805a4:	6861      	ldr	r1, [r4, #4]
   805a6:	4229      	tst	r1, r5
   805a8:	d005      	beq.n	805b6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805aa:	68e3      	ldr	r3, [r4, #12]
   805ac:	4640      	mov	r0, r8
   805ae:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805b0:	6863      	ldr	r3, [r4, #4]
   805b2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805b6:	42b4      	cmp	r4, r6
   805b8:	d002      	beq.n	805c0 <pio_handler_process+0x40>
   805ba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805bc:	2d00      	cmp	r5, #0
   805be:	d1ee      	bne.n	8059e <pio_handler_process+0x1e>
   805c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805c4:	00080405 	.word	0x00080405
   805c8:	00080409 	.word	0x00080409
   805cc:	20070584 	.word	0x20070584

000805d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   805d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   805d2:	4802      	ldr	r0, [pc, #8]	; (805dc <PIOA_Handler+0xc>)
   805d4:	210b      	movs	r1, #11
   805d6:	4b02      	ldr	r3, [pc, #8]	; (805e0 <PIOA_Handler+0x10>)
   805d8:	4798      	blx	r3
   805da:	bd08      	pop	{r3, pc}
   805dc:	400e0e00 	.word	0x400e0e00
   805e0:	00080581 	.word	0x00080581

000805e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   805e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   805e6:	4802      	ldr	r0, [pc, #8]	; (805f0 <PIOB_Handler+0xc>)
   805e8:	210c      	movs	r1, #12
   805ea:	4b02      	ldr	r3, [pc, #8]	; (805f4 <PIOB_Handler+0x10>)
   805ec:	4798      	blx	r3
   805ee:	bd08      	pop	{r3, pc}
   805f0:	400e1000 	.word	0x400e1000
   805f4:	00080581 	.word	0x00080581

000805f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   805f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   805fa:	4802      	ldr	r0, [pc, #8]	; (80604 <PIOC_Handler+0xc>)
   805fc:	210d      	movs	r1, #13
   805fe:	4b02      	ldr	r3, [pc, #8]	; (80608 <PIOC_Handler+0x10>)
   80600:	4798      	blx	r3
   80602:	bd08      	pop	{r3, pc}
   80604:	400e1200 	.word	0x400e1200
   80608:	00080581 	.word	0x00080581

0008060c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8060c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8060e:	4802      	ldr	r0, [pc, #8]	; (80618 <PIOD_Handler+0xc>)
   80610:	210e      	movs	r1, #14
   80612:	4b02      	ldr	r3, [pc, #8]	; (8061c <PIOD_Handler+0x10>)
   80614:	4798      	blx	r3
   80616:	bd08      	pop	{r3, pc}
   80618:	400e1400 	.word	0x400e1400
   8061c:	00080581 	.word	0x00080581

00080620 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80620:	4a18      	ldr	r2, [pc, #96]	; (80684 <pmc_switch_mck_to_pllack+0x64>)
   80622:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80628:	4318      	orrs	r0, r3
   8062a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8062c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8062e:	f013 0f08 	tst.w	r3, #8
   80632:	d003      	beq.n	8063c <pmc_switch_mck_to_pllack+0x1c>
   80634:	e009      	b.n	8064a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80636:	3b01      	subs	r3, #1
   80638:	d103      	bne.n	80642 <pmc_switch_mck_to_pllack+0x22>
   8063a:	e01e      	b.n	8067a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8063c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80640:	4910      	ldr	r1, [pc, #64]	; (80684 <pmc_switch_mck_to_pllack+0x64>)
   80642:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80644:	f012 0f08 	tst.w	r2, #8
   80648:	d0f5      	beq.n	80636 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8064a:	4a0e      	ldr	r2, [pc, #56]	; (80684 <pmc_switch_mck_to_pllack+0x64>)
   8064c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8064e:	f023 0303 	bic.w	r3, r3, #3
   80652:	f043 0302 	orr.w	r3, r3, #2
   80656:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80658:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8065a:	f010 0008 	ands.w	r0, r0, #8
   8065e:	d004      	beq.n	8066a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80660:	2000      	movs	r0, #0
   80662:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80664:	3b01      	subs	r3, #1
   80666:	d103      	bne.n	80670 <pmc_switch_mck_to_pllack+0x50>
   80668:	e009      	b.n	8067e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8066a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8066e:	4905      	ldr	r1, [pc, #20]	; (80684 <pmc_switch_mck_to_pllack+0x64>)
   80670:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80672:	f012 0f08 	tst.w	r2, #8
   80676:	d0f5      	beq.n	80664 <pmc_switch_mck_to_pllack+0x44>
   80678:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8067a:	2001      	movs	r0, #1
   8067c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8067e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80680:	4770      	bx	lr
   80682:	bf00      	nop
   80684:	400e0600 	.word	0x400e0600

00080688 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80688:	b138      	cbz	r0, 8069a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8068a:	4911      	ldr	r1, [pc, #68]	; (806d0 <pmc_switch_mainck_to_xtal+0x48>)
   8068c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8068e:	4a11      	ldr	r2, [pc, #68]	; (806d4 <pmc_switch_mainck_to_xtal+0x4c>)
   80690:	401a      	ands	r2, r3
   80692:	4b11      	ldr	r3, [pc, #68]	; (806d8 <pmc_switch_mainck_to_xtal+0x50>)
   80694:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80696:	620b      	str	r3, [r1, #32]
   80698:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8069a:	4a0d      	ldr	r2, [pc, #52]	; (806d0 <pmc_switch_mainck_to_xtal+0x48>)
   8069c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8069e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   806a2:	f023 0303 	bic.w	r3, r3, #3
   806a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   806aa:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   806ae:	0209      	lsls	r1, r1, #8
   806b0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806b2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806b4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   806b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806b8:	f013 0f01 	tst.w	r3, #1
   806bc:	d0fb      	beq.n	806b6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806be:	4a04      	ldr	r2, [pc, #16]	; (806d0 <pmc_switch_mainck_to_xtal+0x48>)
   806c0:	6a13      	ldr	r3, [r2, #32]
   806c2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806ca:	6213      	str	r3, [r2, #32]
   806cc:	4770      	bx	lr
   806ce:	bf00      	nop
   806d0:	400e0600 	.word	0x400e0600
   806d4:	fec8fffc 	.word	0xfec8fffc
   806d8:	01370002 	.word	0x01370002

000806dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   806dc:	4b02      	ldr	r3, [pc, #8]	; (806e8 <pmc_osc_is_ready_mainck+0xc>)
   806de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   806e4:	4770      	bx	lr
   806e6:	bf00      	nop
   806e8:	400e0600 	.word	0x400e0600

000806ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   806ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   806f0:	4b01      	ldr	r3, [pc, #4]	; (806f8 <pmc_disable_pllack+0xc>)
   806f2:	629a      	str	r2, [r3, #40]	; 0x28
   806f4:	4770      	bx	lr
   806f6:	bf00      	nop
   806f8:	400e0600 	.word	0x400e0600

000806fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   806fc:	4b02      	ldr	r3, [pc, #8]	; (80708 <pmc_is_locked_pllack+0xc>)
   806fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80700:	f000 0002 	and.w	r0, r0, #2
   80704:	4770      	bx	lr
   80706:	bf00      	nop
   80708:	400e0600 	.word	0x400e0600

0008070c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8070c:	282c      	cmp	r0, #44	; 0x2c
   8070e:	d81e      	bhi.n	8074e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80710:	281f      	cmp	r0, #31
   80712:	d80c      	bhi.n	8072e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80714:	4b11      	ldr	r3, [pc, #68]	; (8075c <pmc_enable_periph_clk+0x50>)
   80716:	699a      	ldr	r2, [r3, #24]
   80718:	2301      	movs	r3, #1
   8071a:	4083      	lsls	r3, r0
   8071c:	401a      	ands	r2, r3
   8071e:	4293      	cmp	r3, r2
   80720:	d017      	beq.n	80752 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80722:	2301      	movs	r3, #1
   80724:	4083      	lsls	r3, r0
   80726:	4a0d      	ldr	r2, [pc, #52]	; (8075c <pmc_enable_periph_clk+0x50>)
   80728:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8072a:	2000      	movs	r0, #0
   8072c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8072e:	4b0b      	ldr	r3, [pc, #44]	; (8075c <pmc_enable_periph_clk+0x50>)
   80730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80734:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80736:	2301      	movs	r3, #1
   80738:	4083      	lsls	r3, r0
   8073a:	401a      	ands	r2, r3
   8073c:	4293      	cmp	r3, r2
   8073e:	d00a      	beq.n	80756 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80740:	2301      	movs	r3, #1
   80742:	4083      	lsls	r3, r0
   80744:	4a05      	ldr	r2, [pc, #20]	; (8075c <pmc_enable_periph_clk+0x50>)
   80746:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8074a:	2000      	movs	r0, #0
   8074c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8074e:	2001      	movs	r0, #1
   80750:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80752:	2000      	movs	r0, #0
   80754:	4770      	bx	lr
   80756:	2000      	movs	r0, #0
}
   80758:	4770      	bx	lr
   8075a:	bf00      	nop
   8075c:	400e0600 	.word	0x400e0600

00080760 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80760:	e7fe      	b.n	80760 <Dummy_Handler>
   80762:	bf00      	nop

00080764 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80764:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80766:	4b1f      	ldr	r3, [pc, #124]	; (807e4 <Reset_Handler+0x80>)
   80768:	4a1f      	ldr	r2, [pc, #124]	; (807e8 <Reset_Handler+0x84>)
   8076a:	429a      	cmp	r2, r3
   8076c:	d003      	beq.n	80776 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8076e:	4b1f      	ldr	r3, [pc, #124]	; (807ec <Reset_Handler+0x88>)
   80770:	4a1c      	ldr	r2, [pc, #112]	; (807e4 <Reset_Handler+0x80>)
   80772:	429a      	cmp	r2, r3
   80774:	d304      	bcc.n	80780 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80776:	4b1e      	ldr	r3, [pc, #120]	; (807f0 <Reset_Handler+0x8c>)
   80778:	4a1e      	ldr	r2, [pc, #120]	; (807f4 <Reset_Handler+0x90>)
   8077a:	429a      	cmp	r2, r3
   8077c:	d310      	bcc.n	807a0 <Reset_Handler+0x3c>
   8077e:	e01b      	b.n	807b8 <Reset_Handler+0x54>
   80780:	4918      	ldr	r1, [pc, #96]	; (807e4 <Reset_Handler+0x80>)
   80782:	1d0a      	adds	r2, r1, #4
   80784:	4b1c      	ldr	r3, [pc, #112]	; (807f8 <Reset_Handler+0x94>)
   80786:	1a9b      	subs	r3, r3, r2
   80788:	f023 0303 	bic.w	r3, r3, #3
   8078c:	3304      	adds	r3, #4
   8078e:	4a16      	ldr	r2, [pc, #88]	; (807e8 <Reset_Handler+0x84>)
   80790:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80792:	f852 0b04 	ldr.w	r0, [r2], #4
   80796:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8079a:	429a      	cmp	r2, r3
   8079c:	d1f9      	bne.n	80792 <Reset_Handler+0x2e>
   8079e:	e7ea      	b.n	80776 <Reset_Handler+0x12>
   807a0:	4b16      	ldr	r3, [pc, #88]	; (807fc <Reset_Handler+0x98>)
   807a2:	4a17      	ldr	r2, [pc, #92]	; (80800 <Reset_Handler+0x9c>)
   807a4:	1ad2      	subs	r2, r2, r3
   807a6:	f022 0203 	bic.w	r2, r2, #3
   807aa:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807ac:	3b04      	subs	r3, #4
		*pDest++ = 0;
   807ae:	2100      	movs	r1, #0
   807b0:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807b4:	4293      	cmp	r3, r2
   807b6:	d1fb      	bne.n	807b0 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   807b8:	4b12      	ldr	r3, [pc, #72]	; (80804 <Reset_Handler+0xa0>)
   807ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   807be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   807c2:	4911      	ldr	r1, [pc, #68]	; (80808 <Reset_Handler+0xa4>)
   807c4:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   807c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   807ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807ce:	d203      	bcs.n	807d8 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   807d0:	688b      	ldr	r3, [r1, #8]
   807d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   807d6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   807d8:	4b0c      	ldr	r3, [pc, #48]	; (8080c <Reset_Handler+0xa8>)
   807da:	4798      	blx	r3

	/* Branch to main function */
	main();
   807dc:	4b0c      	ldr	r3, [pc, #48]	; (80810 <Reset_Handler+0xac>)
   807de:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   807e0:	e7fe      	b.n	807e0 <Reset_Handler+0x7c>
   807e2:	bf00      	nop
   807e4:	20070000 	.word	0x20070000
   807e8:	00080abc 	.word	0x00080abc
   807ec:	20070568 	.word	0x20070568
   807f0:	200705f4 	.word	0x200705f4
   807f4:	20070568 	.word	0x20070568
   807f8:	2007056b 	.word	0x2007056b
   807fc:	2007056c 	.word	0x2007056c
   80800:	200705f7 	.word	0x200705f7
   80804:	00080000 	.word	0x00080000
   80808:	e000ed00 	.word	0xe000ed00
   8080c:	00080951 	.word	0x00080951
   80810:	00080931 	.word	0x00080931

00080814 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80814:	4b3e      	ldr	r3, [pc, #248]	; (80910 <SystemCoreClockUpdate+0xfc>)
   80816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80818:	f003 0303 	and.w	r3, r3, #3
   8081c:	2b03      	cmp	r3, #3
   8081e:	d85f      	bhi.n	808e0 <SystemCoreClockUpdate+0xcc>
   80820:	e8df f003 	tbb	[pc, r3]
   80824:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80828:	4b3a      	ldr	r3, [pc, #232]	; (80914 <SystemCoreClockUpdate+0x100>)
   8082a:	695b      	ldr	r3, [r3, #20]
   8082c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80830:	bf14      	ite	ne
   80832:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80836:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8083a:	4b37      	ldr	r3, [pc, #220]	; (80918 <SystemCoreClockUpdate+0x104>)
   8083c:	601a      	str	r2, [r3, #0]
   8083e:	e04f      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80840:	4b33      	ldr	r3, [pc, #204]	; (80910 <SystemCoreClockUpdate+0xfc>)
   80842:	6a1b      	ldr	r3, [r3, #32]
   80844:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80848:	d003      	beq.n	80852 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8084a:	4a34      	ldr	r2, [pc, #208]	; (8091c <SystemCoreClockUpdate+0x108>)
   8084c:	4b32      	ldr	r3, [pc, #200]	; (80918 <SystemCoreClockUpdate+0x104>)
   8084e:	601a      	str	r2, [r3, #0]
   80850:	e046      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80852:	4a33      	ldr	r2, [pc, #204]	; (80920 <SystemCoreClockUpdate+0x10c>)
   80854:	4b30      	ldr	r3, [pc, #192]	; (80918 <SystemCoreClockUpdate+0x104>)
   80856:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80858:	4b2d      	ldr	r3, [pc, #180]	; (80910 <SystemCoreClockUpdate+0xfc>)
   8085a:	6a1b      	ldr	r3, [r3, #32]
   8085c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80860:	2b10      	cmp	r3, #16
   80862:	d002      	beq.n	8086a <SystemCoreClockUpdate+0x56>
   80864:	2b20      	cmp	r3, #32
   80866:	d004      	beq.n	80872 <SystemCoreClockUpdate+0x5e>
   80868:	e03a      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8086a:	4a2e      	ldr	r2, [pc, #184]	; (80924 <SystemCoreClockUpdate+0x110>)
   8086c:	4b2a      	ldr	r3, [pc, #168]	; (80918 <SystemCoreClockUpdate+0x104>)
   8086e:	601a      	str	r2, [r3, #0]
				break;
   80870:	e036      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80872:	4a2a      	ldr	r2, [pc, #168]	; (8091c <SystemCoreClockUpdate+0x108>)
   80874:	4b28      	ldr	r3, [pc, #160]	; (80918 <SystemCoreClockUpdate+0x104>)
   80876:	601a      	str	r2, [r3, #0]
				break;
   80878:	e032      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8087a:	4b25      	ldr	r3, [pc, #148]	; (80910 <SystemCoreClockUpdate+0xfc>)
   8087c:	6a1b      	ldr	r3, [r3, #32]
   8087e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80882:	d003      	beq.n	8088c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80884:	4a25      	ldr	r2, [pc, #148]	; (8091c <SystemCoreClockUpdate+0x108>)
   80886:	4b24      	ldr	r3, [pc, #144]	; (80918 <SystemCoreClockUpdate+0x104>)
   80888:	601a      	str	r2, [r3, #0]
   8088a:	e012      	b.n	808b2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8088c:	4a24      	ldr	r2, [pc, #144]	; (80920 <SystemCoreClockUpdate+0x10c>)
   8088e:	4b22      	ldr	r3, [pc, #136]	; (80918 <SystemCoreClockUpdate+0x104>)
   80890:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80892:	4b1f      	ldr	r3, [pc, #124]	; (80910 <SystemCoreClockUpdate+0xfc>)
   80894:	6a1b      	ldr	r3, [r3, #32]
   80896:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8089a:	2b10      	cmp	r3, #16
   8089c:	d002      	beq.n	808a4 <SystemCoreClockUpdate+0x90>
   8089e:	2b20      	cmp	r3, #32
   808a0:	d004      	beq.n	808ac <SystemCoreClockUpdate+0x98>
   808a2:	e006      	b.n	808b2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808a4:	4a1f      	ldr	r2, [pc, #124]	; (80924 <SystemCoreClockUpdate+0x110>)
   808a6:	4b1c      	ldr	r3, [pc, #112]	; (80918 <SystemCoreClockUpdate+0x104>)
   808a8:	601a      	str	r2, [r3, #0]
				break;
   808aa:	e002      	b.n	808b2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808ac:	4a1b      	ldr	r2, [pc, #108]	; (8091c <SystemCoreClockUpdate+0x108>)
   808ae:	4b1a      	ldr	r3, [pc, #104]	; (80918 <SystemCoreClockUpdate+0x104>)
   808b0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   808b2:	4b17      	ldr	r3, [pc, #92]	; (80910 <SystemCoreClockUpdate+0xfc>)
   808b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808b6:	f003 0303 	and.w	r3, r3, #3
   808ba:	2b02      	cmp	r3, #2
   808bc:	d10d      	bne.n	808da <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   808be:	4a14      	ldr	r2, [pc, #80]	; (80910 <SystemCoreClockUpdate+0xfc>)
   808c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   808c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   808c4:	4814      	ldr	r0, [pc, #80]	; (80918 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   808c6:	f3c3 410a 	ubfx	r1, r3, #16, #11
   808ca:	6803      	ldr	r3, [r0, #0]
   808cc:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   808d0:	b2d2      	uxtb	r2, r2
   808d2:	fbb3 f3f2 	udiv	r3, r3, r2
   808d6:	6003      	str	r3, [r0, #0]
   808d8:	e002      	b.n	808e0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   808da:	4a13      	ldr	r2, [pc, #76]	; (80928 <SystemCoreClockUpdate+0x114>)
   808dc:	4b0e      	ldr	r3, [pc, #56]	; (80918 <SystemCoreClockUpdate+0x104>)
   808de:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808e0:	4b0b      	ldr	r3, [pc, #44]	; (80910 <SystemCoreClockUpdate+0xfc>)
   808e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808e8:	2b70      	cmp	r3, #112	; 0x70
   808ea:	d107      	bne.n	808fc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   808ec:	4a0a      	ldr	r2, [pc, #40]	; (80918 <SystemCoreClockUpdate+0x104>)
   808ee:	6813      	ldr	r3, [r2, #0]
   808f0:	490e      	ldr	r1, [pc, #56]	; (8092c <SystemCoreClockUpdate+0x118>)
   808f2:	fba1 1303 	umull	r1, r3, r1, r3
   808f6:	085b      	lsrs	r3, r3, #1
   808f8:	6013      	str	r3, [r2, #0]
   808fa:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   808fc:	4b04      	ldr	r3, [pc, #16]	; (80910 <SystemCoreClockUpdate+0xfc>)
   808fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80900:	4905      	ldr	r1, [pc, #20]	; (80918 <SystemCoreClockUpdate+0x104>)
   80902:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80906:	680b      	ldr	r3, [r1, #0]
   80908:	40d3      	lsrs	r3, r2
   8090a:	600b      	str	r3, [r1, #0]
   8090c:	4770      	bx	lr
   8090e:	bf00      	nop
   80910:	400e0600 	.word	0x400e0600
   80914:	400e1a10 	.word	0x400e1a10
   80918:	20070138 	.word	0x20070138
   8091c:	00b71b00 	.word	0x00b71b00
   80920:	003d0900 	.word	0x003d0900
   80924:	007a1200 	.word	0x007a1200
   80928:	0e4e1c00 	.word	0x0e4e1c00
   8092c:	aaaaaaab 	.word	0xaaaaaaab

00080930 <main>:

#include <asf.h>
#include "lcd_driver/lcd_driver.h"

int main (void)
{
   80930:	b508      	push	{r3, lr}
	sysclk_init();
   80932:	4b04      	ldr	r3, [pc, #16]	; (80944 <main+0x14>)
   80934:	4798      	blx	r3
	board_init();
   80936:	4b04      	ldr	r3, [pc, #16]	; (80948 <main+0x18>)
   80938:	4798      	blx	r3
	LCD_init();
   8093a:	4b04      	ldr	r3, [pc, #16]	; (8094c <main+0x1c>)
   8093c:	4798      	blx	r3
}
   8093e:	2000      	movs	r0, #0
   80940:	bd08      	pop	{r3, pc}
   80942:	bf00      	nop
   80944:	00080285 	.word	0x00080285
   80948:	000802e9 	.word	0x000802e9
   8094c:	000801d9 	.word	0x000801d9

00080950 <__libc_init_array>:
   80950:	b570      	push	{r4, r5, r6, lr}
   80952:	4e0f      	ldr	r6, [pc, #60]	; (80990 <__libc_init_array+0x40>)
   80954:	4d0f      	ldr	r5, [pc, #60]	; (80994 <__libc_init_array+0x44>)
   80956:	1b76      	subs	r6, r6, r5
   80958:	10b6      	asrs	r6, r6, #2
   8095a:	bf18      	it	ne
   8095c:	2400      	movne	r4, #0
   8095e:	d005      	beq.n	8096c <__libc_init_array+0x1c>
   80960:	3401      	adds	r4, #1
   80962:	f855 3b04 	ldr.w	r3, [r5], #4
   80966:	4798      	blx	r3
   80968:	42a6      	cmp	r6, r4
   8096a:	d1f9      	bne.n	80960 <__libc_init_array+0x10>
   8096c:	4e0a      	ldr	r6, [pc, #40]	; (80998 <__libc_init_array+0x48>)
   8096e:	4d0b      	ldr	r5, [pc, #44]	; (8099c <__libc_init_array+0x4c>)
   80970:	f000 f892 	bl	80a98 <_init>
   80974:	1b76      	subs	r6, r6, r5
   80976:	10b6      	asrs	r6, r6, #2
   80978:	bf18      	it	ne
   8097a:	2400      	movne	r4, #0
   8097c:	d006      	beq.n	8098c <__libc_init_array+0x3c>
   8097e:	3401      	adds	r4, #1
   80980:	f855 3b04 	ldr.w	r3, [r5], #4
   80984:	4798      	blx	r3
   80986:	42a6      	cmp	r6, r4
   80988:	d1f9      	bne.n	8097e <__libc_init_array+0x2e>
   8098a:	bd70      	pop	{r4, r5, r6, pc}
   8098c:	bd70      	pop	{r4, r5, r6, pc}
   8098e:	bf00      	nop
   80990:	00080aa4 	.word	0x00080aa4
   80994:	00080aa4 	.word	0x00080aa4
   80998:	00080aac 	.word	0x00080aac
   8099c:	00080aa4 	.word	0x00080aa4

000809a0 <register_fini>:
   809a0:	4b02      	ldr	r3, [pc, #8]	; (809ac <register_fini+0xc>)
   809a2:	b113      	cbz	r3, 809aa <register_fini+0xa>
   809a4:	4802      	ldr	r0, [pc, #8]	; (809b0 <register_fini+0x10>)
   809a6:	f000 b805 	b.w	809b4 <atexit>
   809aa:	4770      	bx	lr
   809ac:	00000000 	.word	0x00000000
   809b0:	000809c1 	.word	0x000809c1

000809b4 <atexit>:
   809b4:	4601      	mov	r1, r0
   809b6:	2000      	movs	r0, #0
   809b8:	4602      	mov	r2, r0
   809ba:	4603      	mov	r3, r0
   809bc:	f000 b816 	b.w	809ec <__register_exitproc>

000809c0 <__libc_fini_array>:
   809c0:	b538      	push	{r3, r4, r5, lr}
   809c2:	4b08      	ldr	r3, [pc, #32]	; (809e4 <__libc_fini_array+0x24>)
   809c4:	4d08      	ldr	r5, [pc, #32]	; (809e8 <__libc_fini_array+0x28>)
   809c6:	1aed      	subs	r5, r5, r3
   809c8:	10ac      	asrs	r4, r5, #2
   809ca:	bf18      	it	ne
   809cc:	18ed      	addne	r5, r5, r3
   809ce:	d005      	beq.n	809dc <__libc_fini_array+0x1c>
   809d0:	3c01      	subs	r4, #1
   809d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   809d6:	4798      	blx	r3
   809d8:	2c00      	cmp	r4, #0
   809da:	d1f9      	bne.n	809d0 <__libc_fini_array+0x10>
   809dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   809e0:	f000 b864 	b.w	80aac <_fini>
   809e4:	00080ab8 	.word	0x00080ab8
   809e8:	00080abc 	.word	0x00080abc

000809ec <__register_exitproc>:
   809ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809f0:	4c25      	ldr	r4, [pc, #148]	; (80a88 <__register_exitproc+0x9c>)
   809f2:	4606      	mov	r6, r0
   809f4:	6825      	ldr	r5, [r4, #0]
   809f6:	4688      	mov	r8, r1
   809f8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   809fc:	4692      	mov	sl, r2
   809fe:	4699      	mov	r9, r3
   80a00:	b3c4      	cbz	r4, 80a74 <__register_exitproc+0x88>
   80a02:	6860      	ldr	r0, [r4, #4]
   80a04:	281f      	cmp	r0, #31
   80a06:	dc17      	bgt.n	80a38 <__register_exitproc+0x4c>
   80a08:	1c41      	adds	r1, r0, #1
   80a0a:	b176      	cbz	r6, 80a2a <__register_exitproc+0x3e>
   80a0c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80a10:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80a14:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   80a18:	2201      	movs	r2, #1
   80a1a:	4082      	lsls	r2, r0
   80a1c:	4315      	orrs	r5, r2
   80a1e:	2e02      	cmp	r6, #2
   80a20:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   80a24:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   80a28:	d01e      	beq.n	80a68 <__register_exitproc+0x7c>
   80a2a:	1c83      	adds	r3, r0, #2
   80a2c:	6061      	str	r1, [r4, #4]
   80a2e:	2000      	movs	r0, #0
   80a30:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   80a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a38:	4b14      	ldr	r3, [pc, #80]	; (80a8c <__register_exitproc+0xa0>)
   80a3a:	b303      	cbz	r3, 80a7e <__register_exitproc+0x92>
   80a3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a40:	f3af 8000 	nop.w
   80a44:	4604      	mov	r4, r0
   80a46:	b1d0      	cbz	r0, 80a7e <__register_exitproc+0x92>
   80a48:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   80a4c:	2700      	movs	r7, #0
   80a4e:	e884 0088 	stmia.w	r4, {r3, r7}
   80a52:	4638      	mov	r0, r7
   80a54:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80a58:	2101      	movs	r1, #1
   80a5a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   80a5e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   80a62:	2e00      	cmp	r6, #0
   80a64:	d0e1      	beq.n	80a2a <__register_exitproc+0x3e>
   80a66:	e7d1      	b.n	80a0c <__register_exitproc+0x20>
   80a68:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80a6c:	431a      	orrs	r2, r3
   80a6e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   80a72:	e7da      	b.n	80a2a <__register_exitproc+0x3e>
   80a74:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   80a78:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80a7c:	e7c1      	b.n	80a02 <__register_exitproc+0x16>
   80a7e:	f04f 30ff 	mov.w	r0, #4294967295
   80a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a86:	bf00      	nop
   80a88:	00080a94 	.word	0x00080a94
   80a8c:	00000000 	.word	0x00000000
   80a90:	00000043 	.word	0x00000043

00080a94 <_global_impure_ptr>:
   80a94:	20070140                                @.. 

00080a98 <_init>:
   80a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a9a:	bf00      	nop
   80a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80a9e:	bc08      	pop	{r3}
   80aa0:	469e      	mov	lr, r3
   80aa2:	4770      	bx	lr

00080aa4 <__init_array_start>:
   80aa4:	000809a1 	.word	0x000809a1

00080aa8 <__frame_dummy_init_array_entry>:
   80aa8:	00080119                                ....

00080aac <_fini>:
   80aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aae:	bf00      	nop
   80ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ab2:	bc08      	pop	{r3}
   80ab4:	469e      	mov	lr, r3
   80ab6:	4770      	bx	lr

00080ab8 <__fini_array_start>:
   80ab8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00080a90 00000000 00000000 00000000     ................
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...
