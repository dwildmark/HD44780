
HD44780_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004284  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084284  00084284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  0008428c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  200709a4  00084c30  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b18  00084da4  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000d284  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025e7  00000000  00000000  0001dcac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000045c7  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a20  00000000  00000000  0002485a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008f8  00000000  00000000  0002527a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018f6e  00000000  00000000  00025b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fb07  00000000  00000000  0003eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063980  00000000  00000000  0004e5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023b4  00000000  00000000  000b1f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b18 	.word	0x20072b18
   80004:	00080d21 	.word	0x00080d21
   80008:	00080d1d 	.word	0x00080d1d
   8000c:	00080d1d 	.word	0x00080d1d
   80010:	00080d1d 	.word	0x00080d1d
   80014:	00080d1d 	.word	0x00080d1d
   80018:	00080d1d 	.word	0x00080d1d
	...
   8002c:	00080d1d 	.word	0x00080d1d
   80030:	00080d1d 	.word	0x00080d1d
   80034:	00000000 	.word	0x00000000
   80038:	00080d1d 	.word	0x00080d1d
   8003c:	00080d1d 	.word	0x00080d1d
   80040:	00080d1d 	.word	0x00080d1d
   80044:	00080d1d 	.word	0x00080d1d
   80048:	00080d1d 	.word	0x00080d1d
   8004c:	00080d1d 	.word	0x00080d1d
   80050:	00080d1d 	.word	0x00080d1d
   80054:	00080d1d 	.word	0x00080d1d
   80058:	00080d1d 	.word	0x00080d1d
   8005c:	00080d1d 	.word	0x00080d1d
   80060:	00080d1d 	.word	0x00080d1d
   80064:	00080d1d 	.word	0x00080d1d
   80068:	00000000 	.word	0x00000000
   8006c:	00080b8d 	.word	0x00080b8d
   80070:	00080ba1 	.word	0x00080ba1
   80074:	00080bb5 	.word	0x00080bb5
   80078:	00080bc9 	.word	0x00080bc9
	...
   80084:	00080329 	.word	0x00080329
   80088:	00080d1d 	.word	0x00080d1d
   8008c:	00080d1d 	.word	0x00080d1d
   80090:	00080d1d 	.word	0x00080d1d
   80094:	00080d1d 	.word	0x00080d1d
   80098:	00080d1d 	.word	0x00080d1d
   8009c:	00080d1d 	.word	0x00080d1d
   800a0:	00080d1d 	.word	0x00080d1d
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d1d 	.word	0x00080d1d
   800ac:	00080d1d 	.word	0x00080d1d
   800b0:	00080d1d 	.word	0x00080d1d
   800b4:	00080d1d 	.word	0x00080d1d
   800b8:	00080d1d 	.word	0x00080d1d
   800bc:	00080d1d 	.word	0x00080d1d
   800c0:	00080d1d 	.word	0x00080d1d
   800c4:	00080d1d 	.word	0x00080d1d
   800c8:	00080d1d 	.word	0x00080d1d
   800cc:	00080d1d 	.word	0x00080d1d
   800d0:	00080d1d 	.word	0x00080d1d
   800d4:	00080d1d 	.word	0x00080d1d
   800d8:	00080d1d 	.word	0x00080d1d
   800dc:	00080d1d 	.word	0x00080d1d
   800e0:	00080d1d 	.word	0x00080d1d
   800e4:	00080d1d 	.word	0x00080d1d
   800e8:	00080d1d 	.word	0x00080d1d
   800ec:	00080d1d 	.word	0x00080d1d
   800f0:	00080d1d 	.word	0x00080d1d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	0008428c 	.word	0x0008428c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008428c 	.word	0x0008428c
   80144:	200709a8 	.word	0x200709a8
   80148:	0008428c 	.word	0x0008428c
   8014c:	00000000 	.word	0x00000000

00080150 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80150:	2a00      	cmp	r2, #0
   80152:	d04e      	beq.n	801f2 <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80158:	b085      	sub	sp, #20
   8015a:	4606      	mov	r6, r0
   8015c:	460d      	mov	r5, r1
   8015e:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80160:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80208 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   80164:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8020c <usart_serial_read_packet+0xbc>
   80168:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8016c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80210 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   80170:	4c21      	ldr	r4, [pc, #132]	; (801f8 <usart_serial_read_packet+0xa8>)
   80172:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80176:	2300      	movs	r3, #0
   80178:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8017a:	4556      	cmp	r6, sl
   8017c:	d105      	bne.n	8018a <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   8017e:	9800      	ldr	r0, [sp, #0]
   80180:	4629      	mov	r1, r5
   80182:	47c8      	blx	r9
   80184:	2800      	cmp	r0, #0
   80186:	d1fa      	bne.n	8017e <usart_serial_read_packet+0x2e>
   80188:	e015      	b.n	801b6 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8018a:	455e      	cmp	r6, fp
   8018c:	d107      	bne.n	8019e <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   8018e:	9801      	ldr	r0, [sp, #4]
   80190:	a903      	add	r1, sp, #12
   80192:	47a0      	blx	r4
   80194:	2800      	cmp	r0, #0
   80196:	d1fa      	bne.n	8018e <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   80198:	9b03      	ldr	r3, [sp, #12]
   8019a:	702b      	strb	r3, [r5, #0]
   8019c:	e017      	b.n	801ce <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8019e:	4b17      	ldr	r3, [pc, #92]	; (801fc <usart_serial_read_packet+0xac>)
   801a0:	429e      	cmp	r6, r3
   801a2:	d108      	bne.n	801b6 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   801a4:	4698      	mov	r8, r3
   801a6:	4640      	mov	r0, r8
   801a8:	a903      	add	r1, sp, #12
   801aa:	47a0      	blx	r4
   801ac:	2800      	cmp	r0, #0
   801ae:	d1fa      	bne.n	801a6 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   801b0:	9b03      	ldr	r3, [sp, #12]
   801b2:	702b      	strb	r3, [r5, #0]
   801b4:	e016      	b.n	801e4 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b6:	4b12      	ldr	r3, [pc, #72]	; (80200 <usart_serial_read_packet+0xb0>)
   801b8:	429e      	cmp	r6, r3
   801ba:	d108      	bne.n	801ce <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   801bc:	4698      	mov	r8, r3
   801be:	4640      	mov	r0, r8
   801c0:	a903      	add	r1, sp, #12
   801c2:	47a0      	blx	r4
   801c4:	2800      	cmp	r0, #0
   801c6:	d1fa      	bne.n	801be <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   801c8:	9b03      	ldr	r3, [sp, #12]
   801ca:	702b      	strb	r3, [r5, #0]
   801cc:	e00a      	b.n	801e4 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801ce:	4b0d      	ldr	r3, [pc, #52]	; (80204 <usart_serial_read_packet+0xb4>)
   801d0:	429e      	cmp	r6, r3
   801d2:	d107      	bne.n	801e4 <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   801d4:	4698      	mov	r8, r3
   801d6:	4640      	mov	r0, r8
   801d8:	a903      	add	r1, sp, #12
   801da:	47a0      	blx	r4
   801dc:	2800      	cmp	r0, #0
   801de:	d1fa      	bne.n	801d6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801e0:	9b03      	ldr	r3, [sp, #12]
   801e2:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   801e4:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   801e6:	3f01      	subs	r7, #1
   801e8:	d1c5      	bne.n	80176 <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801ea:	2000      	movs	r0, #0
   801ec:	b005      	add	sp, #20
   801ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   801f2:	2000      	movs	r0, #0
   801f4:	4770      	bx	lr
   801f6:	bf00      	nop
   801f8:	00080311 	.word	0x00080311
   801fc:	4009c000 	.word	0x4009c000
   80200:	400a0000 	.word	0x400a0000
   80204:	400a4000 	.word	0x400a4000
   80208:	400e0800 	.word	0x400e0800
   8020c:	000802e9 	.word	0x000802e9
   80210:	40098000 	.word	0x40098000

00080214 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80214:	b9a8      	cbnz	r0, 80242 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8021a:	460c      	mov	r4, r1
   8021c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8021e:	2a00      	cmp	r2, #0
   80220:	dd0a      	ble.n	80238 <_read+0x24>
   80222:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80224:	4e08      	ldr	r6, [pc, #32]	; (80248 <_read+0x34>)
   80226:	4d09      	ldr	r5, [pc, #36]	; (8024c <_read+0x38>)
   80228:	6830      	ldr	r0, [r6, #0]
   8022a:	4621      	mov	r1, r4
   8022c:	682b      	ldr	r3, [r5, #0]
   8022e:	4798      	blx	r3
		ptr++;
   80230:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80232:	42bc      	cmp	r4, r7
   80234:	d1f8      	bne.n	80228 <_read+0x14>
   80236:	e001      	b.n	8023c <_read+0x28>
   80238:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8023c:	4640      	mov	r0, r8
   8023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80242:	f04f 30ff 	mov.w	r0, #4294967295
   80246:	4770      	bx	lr
   80248:	20070b10 	.word	0x20070b10
   8024c:	20070b08 	.word	0x20070b08

00080250 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80250:	3801      	subs	r0, #1
   80252:	2802      	cmp	r0, #2
   80254:	d818      	bhi.n	80288 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8025a:	460e      	mov	r6, r1
   8025c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8025e:	b182      	cbz	r2, 80282 <_write+0x32>
   80260:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80262:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8029c <_write+0x4c>
   80266:	4f0c      	ldr	r7, [pc, #48]	; (80298 <_write+0x48>)
   80268:	f8d8 0000 	ldr.w	r0, [r8]
   8026c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80270:	683b      	ldr	r3, [r7, #0]
   80272:	4798      	blx	r3
   80274:	2800      	cmp	r0, #0
   80276:	db0a      	blt.n	8028e <_write+0x3e>
   80278:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8027a:	3c01      	subs	r4, #1
   8027c:	d1f4      	bne.n	80268 <_write+0x18>
   8027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80282:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8028c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8028e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80296:	bf00      	nop
   80298:	20070b0c 	.word	0x20070b0c
   8029c:	20070b10 	.word	0x20070b10

000802a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802a2:	23ac      	movs	r3, #172	; 0xac
   802a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802a6:	680b      	ldr	r3, [r1, #0]
   802a8:	684a      	ldr	r2, [r1, #4]
   802aa:	fbb3 f3f2 	udiv	r3, r3, r2
   802ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802b0:	1e5c      	subs	r4, r3, #1
   802b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802b6:	4294      	cmp	r4, r2
   802b8:	d80a      	bhi.n	802d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   802ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802bc:	688b      	ldr	r3, [r1, #8]
   802be:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802c0:	f240 2302 	movw	r3, #514	; 0x202
   802c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802c8:	2350      	movs	r3, #80	; 0x50
   802ca:	6003      	str	r3, [r0, #0]

	return 0;
   802cc:	2000      	movs	r0, #0
   802ce:	e000      	b.n	802d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   802d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   802d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802d6:	4770      	bx	lr

000802d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   802d8:	6943      	ldr	r3, [r0, #20]
   802da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   802de:	bf1a      	itte	ne
   802e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   802e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   802e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   802e6:	4770      	bx	lr

000802e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   802e8:	6943      	ldr	r3, [r0, #20]
   802ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   802ee:	bf1d      	ittte	ne
   802f0:	6983      	ldrne	r3, [r0, #24]
   802f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   802f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   802f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop

000802fc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   802fc:	6943      	ldr	r3, [r0, #20]
   802fe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80302:	bf1d      	ittte	ne
   80304:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80308:	61c1      	strne	r1, [r0, #28]
	return 0;
   8030a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8030c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8030e:	4770      	bx	lr

00080310 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80310:	6943      	ldr	r3, [r0, #20]
   80312:	f013 0f01 	tst.w	r3, #1
   80316:	d005      	beq.n	80324 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80318:	6983      	ldr	r3, [r0, #24]
   8031a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8031e:	600b      	str	r3, [r1, #0]

	return 0;
   80320:	2000      	movs	r0, #0
   80322:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80324:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80326:	4770      	bx	lr

00080328 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80328:	b500      	push	{lr}
   8032a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8032c:	4811      	ldr	r0, [pc, #68]	; (80374 <USART0_Handler+0x4c>)
   8032e:	f10d 0107 	add.w	r1, sp, #7
   80332:	2201      	movs	r2, #1
   80334:	4b10      	ldr	r3, [pc, #64]	; (80378 <USART0_Handler+0x50>)
   80336:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80338:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8033a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8033e:	2200      	movs	r2, #0
   80340:	4b0e      	ldr	r3, [pc, #56]	; (8037c <USART0_Handler+0x54>)
   80342:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80344:	4b0e      	ldr	r3, [pc, #56]	; (80380 <USART0_Handler+0x58>)
   80346:	781b      	ldrb	r3, [r3, #0]
   80348:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8034c:	4a0d      	ldr	r2, [pc, #52]	; (80384 <USART0_Handler+0x5c>)
   8034e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80350:	2b9b      	cmp	r3, #155	; 0x9b
   80352:	d103      	bne.n	8035c <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80354:	2200      	movs	r2, #0
   80356:	4b0a      	ldr	r3, [pc, #40]	; (80380 <USART0_Handler+0x58>)
   80358:	701a      	strb	r2, [r3, #0]
   8035a:	e002      	b.n	80362 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   8035c:	3301      	adds	r3, #1
   8035e:	4a08      	ldr	r2, [pc, #32]	; (80380 <USART0_Handler+0x58>)
   80360:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80362:	2201      	movs	r2, #1
   80364:	4b05      	ldr	r3, [pc, #20]	; (8037c <USART0_Handler+0x54>)
   80366:	701a      	strb	r2, [r3, #0]
   80368:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8036c:	b662      	cpsie	i
}
   8036e:	b003      	add	sp, #12
   80370:	f85d fb04 	ldr.w	pc, [sp], #4
   80374:	40098000 	.word	0x40098000
   80378:	00080151 	.word	0x00080151
   8037c:	20070138 	.word	0x20070138
   80380:	20070a5c 	.word	0x20070a5c
   80384:	200709c0 	.word	0x200709c0

00080388 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80388:	b5f0      	push	{r4, r5, r6, r7, lr}
   8038a:	b083      	sub	sp, #12
   8038c:	4604      	mov	r4, r0
   8038e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80390:	2300      	movs	r3, #0
   80392:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80394:	4b1f      	ldr	r3, [pc, #124]	; (80414 <usart_serial_getchar+0x8c>)
   80396:	4298      	cmp	r0, r3
   80398:	d107      	bne.n	803aa <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8039a:	461f      	mov	r7, r3
   8039c:	4e1e      	ldr	r6, [pc, #120]	; (80418 <usart_serial_getchar+0x90>)
   8039e:	4638      	mov	r0, r7
   803a0:	4629      	mov	r1, r5
   803a2:	47b0      	blx	r6
   803a4:	2800      	cmp	r0, #0
   803a6:	d1fa      	bne.n	8039e <usart_serial_getchar+0x16>
   803a8:	e019      	b.n	803de <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803aa:	4b1c      	ldr	r3, [pc, #112]	; (8041c <usart_serial_getchar+0x94>)
   803ac:	4298      	cmp	r0, r3
   803ae:	d109      	bne.n	803c4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   803b0:	461f      	mov	r7, r3
   803b2:	4e1b      	ldr	r6, [pc, #108]	; (80420 <usart_serial_getchar+0x98>)
   803b4:	4638      	mov	r0, r7
   803b6:	a901      	add	r1, sp, #4
   803b8:	47b0      	blx	r6
   803ba:	2800      	cmp	r0, #0
   803bc:	d1fa      	bne.n	803b4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   803be:	9b01      	ldr	r3, [sp, #4]
   803c0:	702b      	strb	r3, [r5, #0]
   803c2:	e019      	b.n	803f8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803c4:	4b17      	ldr	r3, [pc, #92]	; (80424 <usart_serial_getchar+0x9c>)
   803c6:	4298      	cmp	r0, r3
   803c8:	d109      	bne.n	803de <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   803ca:	461e      	mov	r6, r3
   803cc:	4c14      	ldr	r4, [pc, #80]	; (80420 <usart_serial_getchar+0x98>)
   803ce:	4630      	mov	r0, r6
   803d0:	a901      	add	r1, sp, #4
   803d2:	47a0      	blx	r4
   803d4:	2800      	cmp	r0, #0
   803d6:	d1fa      	bne.n	803ce <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   803d8:	9b01      	ldr	r3, [sp, #4]
   803da:	702b      	strb	r3, [r5, #0]
   803dc:	e018      	b.n	80410 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803de:	4b12      	ldr	r3, [pc, #72]	; (80428 <usart_serial_getchar+0xa0>)
   803e0:	429c      	cmp	r4, r3
   803e2:	d109      	bne.n	803f8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   803e4:	461e      	mov	r6, r3
   803e6:	4c0e      	ldr	r4, [pc, #56]	; (80420 <usart_serial_getchar+0x98>)
   803e8:	4630      	mov	r0, r6
   803ea:	a901      	add	r1, sp, #4
   803ec:	47a0      	blx	r4
   803ee:	2800      	cmp	r0, #0
   803f0:	d1fa      	bne.n	803e8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   803f2:	9b01      	ldr	r3, [sp, #4]
   803f4:	702b      	strb	r3, [r5, #0]
   803f6:	e00b      	b.n	80410 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803f8:	4b0c      	ldr	r3, [pc, #48]	; (8042c <usart_serial_getchar+0xa4>)
   803fa:	429c      	cmp	r4, r3
   803fc:	d108      	bne.n	80410 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   803fe:	461e      	mov	r6, r3
   80400:	4c07      	ldr	r4, [pc, #28]	; (80420 <usart_serial_getchar+0x98>)
   80402:	4630      	mov	r0, r6
   80404:	a901      	add	r1, sp, #4
   80406:	47a0      	blx	r4
   80408:	2800      	cmp	r0, #0
   8040a:	d1fa      	bne.n	80402 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8040c:	9b01      	ldr	r3, [sp, #4]
   8040e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80410:	b003      	add	sp, #12
   80412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80414:	400e0800 	.word	0x400e0800
   80418:	000802e9 	.word	0x000802e9
   8041c:	40098000 	.word	0x40098000
   80420:	00080311 	.word	0x00080311
   80424:	4009c000 	.word	0x4009c000
   80428:	400a0000 	.word	0x400a0000
   8042c:	400a4000 	.word	0x400a4000

00080430 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80430:	b570      	push	{r4, r5, r6, lr}
   80432:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80434:	4b1e      	ldr	r3, [pc, #120]	; (804b0 <usart_serial_putchar+0x80>)
   80436:	4298      	cmp	r0, r3
   80438:	d108      	bne.n	8044c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   8043a:	461e      	mov	r6, r3
   8043c:	4d1d      	ldr	r5, [pc, #116]	; (804b4 <usart_serial_putchar+0x84>)
   8043e:	4630      	mov	r0, r6
   80440:	4621      	mov	r1, r4
   80442:	47a8      	blx	r5
   80444:	2800      	cmp	r0, #0
   80446:	d1fa      	bne.n	8043e <usart_serial_putchar+0xe>
		return 1;
   80448:	2001      	movs	r0, #1
   8044a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8044c:	4b1a      	ldr	r3, [pc, #104]	; (804b8 <usart_serial_putchar+0x88>)
   8044e:	4298      	cmp	r0, r3
   80450:	d108      	bne.n	80464 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80452:	461e      	mov	r6, r3
   80454:	4d19      	ldr	r5, [pc, #100]	; (804bc <usart_serial_putchar+0x8c>)
   80456:	4630      	mov	r0, r6
   80458:	4621      	mov	r1, r4
   8045a:	47a8      	blx	r5
   8045c:	2800      	cmp	r0, #0
   8045e:	d1fa      	bne.n	80456 <usart_serial_putchar+0x26>
		return 1;
   80460:	2001      	movs	r0, #1
   80462:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80464:	4b16      	ldr	r3, [pc, #88]	; (804c0 <usart_serial_putchar+0x90>)
   80466:	4298      	cmp	r0, r3
   80468:	d108      	bne.n	8047c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   8046a:	461e      	mov	r6, r3
   8046c:	4d13      	ldr	r5, [pc, #76]	; (804bc <usart_serial_putchar+0x8c>)
   8046e:	4630      	mov	r0, r6
   80470:	4621      	mov	r1, r4
   80472:	47a8      	blx	r5
   80474:	2800      	cmp	r0, #0
   80476:	d1fa      	bne.n	8046e <usart_serial_putchar+0x3e>
		return 1;
   80478:	2001      	movs	r0, #1
   8047a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8047c:	4b11      	ldr	r3, [pc, #68]	; (804c4 <usart_serial_putchar+0x94>)
   8047e:	4298      	cmp	r0, r3
   80480:	d108      	bne.n	80494 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80482:	461e      	mov	r6, r3
   80484:	4d0d      	ldr	r5, [pc, #52]	; (804bc <usart_serial_putchar+0x8c>)
   80486:	4630      	mov	r0, r6
   80488:	4621      	mov	r1, r4
   8048a:	47a8      	blx	r5
   8048c:	2800      	cmp	r0, #0
   8048e:	d1fa      	bne.n	80486 <usart_serial_putchar+0x56>
		return 1;
   80490:	2001      	movs	r0, #1
   80492:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80494:	4b0c      	ldr	r3, [pc, #48]	; (804c8 <usart_serial_putchar+0x98>)
   80496:	4298      	cmp	r0, r3
   80498:	d108      	bne.n	804ac <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   8049a:	461e      	mov	r6, r3
   8049c:	4d07      	ldr	r5, [pc, #28]	; (804bc <usart_serial_putchar+0x8c>)
   8049e:	4630      	mov	r0, r6
   804a0:	4621      	mov	r1, r4
   804a2:	47a8      	blx	r5
   804a4:	2800      	cmp	r0, #0
   804a6:	d1fa      	bne.n	8049e <usart_serial_putchar+0x6e>
		return 1;
   804a8:	2001      	movs	r0, #1
   804aa:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   804ac:	2000      	movs	r0, #0
}
   804ae:	bd70      	pop	{r4, r5, r6, pc}
   804b0:	400e0800 	.word	0x400e0800
   804b4:	000802d9 	.word	0x000802d9
   804b8:	40098000 	.word	0x40098000
   804bc:	000802fd 	.word	0x000802fd
   804c0:	4009c000 	.word	0x4009c000
   804c4:	400a0000 	.word	0x400a0000
   804c8:	400a4000 	.word	0x400a4000

000804cc <configure_console>:
 */ 
#include <asf.h>

void configure_console(void)
/* Enables serial communication via the USB interface. */
{
   804cc:	b530      	push	{r4, r5, lr}
   804ce:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804d0:	2008      	movs	r0, #8
   804d2:	4d12      	ldr	r5, [pc, #72]	; (8051c <configure_console+0x50>)
   804d4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   804d6:	4c12      	ldr	r4, [pc, #72]	; (80520 <configure_console+0x54>)
   804d8:	4b12      	ldr	r3, [pc, #72]	; (80524 <configure_console+0x58>)
   804da:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804dc:	4a12      	ldr	r2, [pc, #72]	; (80528 <configure_console+0x5c>)
   804de:	4b13      	ldr	r3, [pc, #76]	; (8052c <configure_console+0x60>)
   804e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   804e2:	4a13      	ldr	r2, [pc, #76]	; (80530 <configure_console+0x64>)
   804e4:	4b13      	ldr	r3, [pc, #76]	; (80534 <configure_console+0x68>)
   804e6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   804e8:	4b13      	ldr	r3, [pc, #76]	; (80538 <configure_console+0x6c>)
   804ea:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   804ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   804f0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   804f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804f6:	9303      	str	r3, [sp, #12]
   804f8:	2008      	movs	r0, #8
   804fa:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   804fc:	4620      	mov	r0, r4
   804fe:	a901      	add	r1, sp, #4
   80500:	4b0e      	ldr	r3, [pc, #56]	; (8053c <configure_console+0x70>)
   80502:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80504:	4d0e      	ldr	r5, [pc, #56]	; (80540 <configure_console+0x74>)
   80506:	682b      	ldr	r3, [r5, #0]
   80508:	6898      	ldr	r0, [r3, #8]
   8050a:	2100      	movs	r1, #0
   8050c:	4c0d      	ldr	r4, [pc, #52]	; (80544 <configure_console+0x78>)
   8050e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80510:	682b      	ldr	r3, [r5, #0]
   80512:	6858      	ldr	r0, [r3, #4]
   80514:	2100      	movs	r1, #0
   80516:	47a0      	blx	r4
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   80518:	b005      	add	sp, #20
   8051a:	bd30      	pop	{r4, r5, pc}
   8051c:	00080cc9 	.word	0x00080cc9
   80520:	400e0800 	.word	0x400e0800
   80524:	20070b10 	.word	0x20070b10
   80528:	00080431 	.word	0x00080431
   8052c:	20070b0c 	.word	0x20070b0c
   80530:	00080389 	.word	0x00080389
   80534:	20070b08 	.word	0x20070b08
   80538:	0501bd00 	.word	0x0501bd00
   8053c:	000802a1 	.word	0x000802a1
   80540:	20070568 	.word	0x20070568
   80544:	00081185 	.word	0x00081185

00080548 <LCD_PulseEnable>:
#include "hd44780.h"

/************************************************************************/
/* Pulses EN-pin to enable transmit                                     */
/************************************************************************/
void LCD_PulseEnable(void) {
   80548:	b570      	push	{r4, r5, r6, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8054a:	4d07      	ldr	r5, [pc, #28]	; (80568 <LCD_PulseEnable+0x20>)
   8054c:	2602      	movs	r6, #2
   8054e:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_EN, false);
	delay_us(1);
   80550:	2006      	movs	r0, #6
   80552:	4c06      	ldr	r4, [pc, #24]	; (8056c <LCD_PulseEnable+0x24>)
   80554:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80556:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_EN, true);
	delay_us(1);
   80558:	2006      	movs	r0, #6
   8055a:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8055c:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_EN, false);
	delay_us(100);
   8055e:	f44f 7016 	mov.w	r0, #600	; 0x258
   80562:	47a0      	blx	r4
   80564:	bd70      	pop	{r4, r5, r6, pc}
   80566:	bf00      	nop
   80568:	400e1400 	.word	0x400e1400
   8056c:	20070001 	.word	0x20070001

00080570 <LCD_WriteNibble>:
}

/************************************************************************/
/* Writes a nibble of data to the screen controller.                    */
/************************************************************************/
void LCD_WriteNibble(uint8_t nibble) {
   80570:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80572:	f010 0f01 	tst.w	r0, #1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80576:	f04f 0201 	mov.w	r2, #1
   8057a:	4b0f      	ldr	r3, [pc, #60]	; (805b8 <LCD_WriteNibble+0x48>)
   8057c:	bf14      	ite	ne
   8057e:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80580:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80582:	f010 0f02 	tst.w	r0, #2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80586:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8058a:	4b0c      	ldr	r3, [pc, #48]	; (805bc <LCD_WriteNibble+0x4c>)
   8058c:	bf14      	ite	ne
   8058e:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80590:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80592:	f010 0f04 	tst.w	r0, #4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8059a:	4b08      	ldr	r3, [pc, #32]	; (805bc <LCD_WriteNibble+0x4c>)
   8059c:	bf14      	ite	ne
   8059e:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   805a0:	635a      	streq	r2, [r3, #52]	; 0x34
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   805a2:	f010 0f08 	tst.w	r0, #8
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   805a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   805aa:	4b05      	ldr	r3, [pc, #20]	; (805c0 <LCD_WriteNibble+0x50>)
   805ac:	bf14      	ite	ne
   805ae:	631a      	strne	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   805b0:	635a      	streq	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(LCD_D4, (nibble & (0x01<<0)));
	ioport_set_pin_level(LCD_D5, (nibble & (0x01<<1)));
	ioport_set_pin_level(LCD_D6, (nibble & (0x01<<2)));
	ioport_set_pin_level(LCD_D7, (nibble & (0x01<<3)));
	LCD_PulseEnable();
   805b2:	4b04      	ldr	r3, [pc, #16]	; (805c4 <LCD_WriteNibble+0x54>)
   805b4:	4798      	blx	r3
   805b6:	bd08      	pop	{r3, pc}
   805b8:	400e1400 	.word	0x400e1400
   805bc:	400e0e00 	.word	0x400e0e00
   805c0:	400e1000 	.word	0x400e1000
   805c4:	00080549 	.word	0x00080549

000805c8 <LCD_WriteData>:
}

/************************************************************************/
/* Writes data (ASCII-character) to the screen controller.              */
/************************************************************************/
void LCD_WriteData(uint8_t data) {
   805c8:	b538      	push	{r3, r4, r5, lr}
   805ca:	4605      	mov	r5, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   805cc:	2204      	movs	r2, #4
   805ce:	4b06      	ldr	r3, [pc, #24]	; (805e8 <LCD_WriteData+0x20>)
   805d0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(LCD_RS, true);
	uint8_t lower_nibble = data & 0x0F;
	uint8_t upper_nibble = (data & 0xF0)>>4;
	LCD_WriteNibble(upper_nibble);
   805d2:	40d0      	lsrs	r0, r2
   805d4:	4c05      	ldr	r4, [pc, #20]	; (805ec <LCD_WriteData+0x24>)
   805d6:	47a0      	blx	r4
	LCD_WriteNibble(lower_nibble);
   805d8:	f005 000f 	and.w	r0, r5, #15
   805dc:	47a0      	blx	r4
	delay_us(250);
   805de:	f240 50dc 	movw	r0, #1500	; 0x5dc
   805e2:	4b03      	ldr	r3, [pc, #12]	; (805f0 <LCD_WriteData+0x28>)
   805e4:	4798      	blx	r3
   805e6:	bd38      	pop	{r3, r4, r5, pc}
   805e8:	400e1400 	.word	0x400e1400
   805ec:	00080571 	.word	0x00080571
   805f0:	20070001 	.word	0x20070001

000805f4 <LCD_WriteCommand>:
}

/************************************************************************/
/* Writes a command to the screen controller.                           */
/************************************************************************/
void LCD_WriteCommand(uint8_t command) {
   805f4:	b538      	push	{r3, r4, r5, lr}
   805f6:	4605      	mov	r5, r0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   805f8:	2204      	movs	r2, #4
   805fa:	4b06      	ldr	r3, [pc, #24]	; (80614 <LCD_WriteCommand+0x20>)
   805fc:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(LCD_RS, false);
	uint8_t lower_nibble = command & 0x0F;
	uint8_t upper_nibble = (command & 0xF0)>>4;
	LCD_WriteNibble(upper_nibble);
   805fe:	40d0      	lsrs	r0, r2
   80600:	4c05      	ldr	r4, [pc, #20]	; (80618 <LCD_WriteCommand+0x24>)
   80602:	47a0      	blx	r4
	LCD_WriteNibble(lower_nibble);
   80604:	f005 000f 	and.w	r0, r5, #15
   80608:	47a0      	blx	r4
	delay_ms(2);
   8060a:	f642 60e0 	movw	r0, #12000	; 0x2ee0
   8060e:	4b03      	ldr	r3, [pc, #12]	; (8061c <LCD_WriteCommand+0x28>)
   80610:	4798      	blx	r3
   80612:	bd38      	pop	{r3, r4, r5, pc}
   80614:	400e1400 	.word	0x400e1400
   80618:	00080571 	.word	0x00080571
   8061c:	20070001 	.word	0x20070001

00080620 <LCD_init>:
}

/************************************************************************/
/* Initiates the LCD-controller.                                                                     */
/************************************************************************/
void LCD_init(void) {
   80620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	delay_ms(50);
   80622:	4820      	ldr	r0, [pc, #128]	; (806a4 <LCD_init+0x84>)
   80624:	4c20      	ldr	r4, [pc, #128]	; (806a8 <LCD_init+0x88>)
   80626:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80628:	4b20      	ldr	r3, [pc, #128]	; (806ac <LCD_init+0x8c>)
   8062a:	2201      	movs	r2, #1
   8062c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8062e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80632:	4a1f      	ldr	r2, [pc, #124]	; (806b0 <LCD_init+0x90>)
   80634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80638:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8063a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80642:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80644:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80648:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8064c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80650:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80652:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80656:	2102      	movs	r1, #2
   80658:	6119      	str	r1, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8065a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8065e:	2204      	movs	r2, #4
   80660:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80662:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80666:	6359      	str	r1, [r3, #52]	; 0x34
   80668:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);

	ioport_set_pin_level(LCD_EN, false);
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
   8066a:	4812      	ldr	r0, [pc, #72]	; (806b4 <LCD_init+0x94>)
   8066c:	47a0      	blx	r4
   8066e:	2403      	movs	r4, #3
	
	for(int i = 0; i < 3; i++) {
		LCD_WriteNibble(HD44780_INIT);
   80670:	4627      	mov	r7, r4
   80672:	4e11      	ldr	r6, [pc, #68]	; (806b8 <LCD_init+0x98>)
		delay_ms(5);
   80674:	4d0c      	ldr	r5, [pc, #48]	; (806a8 <LCD_init+0x88>)
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
	
	for(int i = 0; i < 3; i++) {
		LCD_WriteNibble(HD44780_INIT);
   80676:	4638      	mov	r0, r7
   80678:	47b0      	blx	r6
		delay_ms(5);
   8067a:	f247 5030 	movw	r0, #30000	; 0x7530
   8067e:	47a8      	blx	r5
	ioport_set_pin_level(LCD_EN, false);
	ioport_set_pin_level(LCD_RS, false);
	
	delay_ms(100);
	
	for(int i = 0; i < 3; i++) {
   80680:	3c01      	subs	r4, #1
   80682:	d1f8      	bne.n	80676 <LCD_init+0x56>
		LCD_WriteNibble(HD44780_INIT);
		delay_ms(5);
	}
	
	LCD_WriteNibble(HD44780_HOME);
   80684:	2002      	movs	r0, #2
   80686:	4b0c      	ldr	r3, [pc, #48]	; (806b8 <LCD_init+0x98>)
   80688:	4798      	blx	r3
	
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
   8068a:	2028      	movs	r0, #40	; 0x28
   8068c:	4c0b      	ldr	r4, [pc, #44]	; (806bc <LCD_init+0x9c>)
   8068e:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
   80690:	2008      	movs	r0, #8
   80692:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_CLEAR);
   80694:	2001      	movs	r0, #1
   80696:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_ENTRY_MODE |HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
   80698:	2006      	movs	r0, #6
   8069a:	47a0      	blx	r4
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_ON | HD44780_CURSOR_BLINK);
   8069c:	200f      	movs	r0, #15
   8069e:	47a0      	blx	r4
   806a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806a2:	bf00      	nop
   806a4:	000493e0 	.word	0x000493e0
   806a8:	20070001 	.word	0x20070001
   806ac:	400e1400 	.word	0x400e1400
   806b0:	400e0e00 	.word	0x400e0e00
   806b4:	000927c0 	.word	0x000927c0
   806b8:	00080571 	.word	0x00080571
   806bc:	000805f5 	.word	0x000805f5

000806c0 <LCD_AddCharacter>:

/************************************************************************/
/* Adds a special character to the register.                            */
/************************************************************************/

void LCD_AddCharacter(uint8_t location, uint8_t charmap[]) {
   806c0:	b570      	push	{r4, r5, r6, lr}
   806c2:	460d      	mov	r5, r1
	location &= 0x7;
	LCD_WriteCommand(HD44780_CGRAM_SET | (location << 3));
   806c4:	f000 0007 	and.w	r0, r0, #7
   806c8:	00c0      	lsls	r0, r0, #3
   806ca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   806ce:	4b07      	ldr	r3, [pc, #28]	; (806ec <LCD_AddCharacter+0x2c>)
   806d0:	4798      	blx	r3
   806d2:	1e6c      	subs	r4, r5, #1
   806d4:	3507      	adds	r5, #7
	for(int i = 0; i < 8; i++) {
			LCD_WriteData(charmap[i]);
   806d6:	4e06      	ldr	r6, [pc, #24]	; (806f0 <LCD_AddCharacter+0x30>)
   806d8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   806dc:	47b0      	blx	r6
/************************************************************************/

void LCD_AddCharacter(uint8_t location, uint8_t charmap[]) {
	location &= 0x7;
	LCD_WriteCommand(HD44780_CGRAM_SET | (location << 3));
	for(int i = 0; i < 8; i++) {
   806de:	42ac      	cmp	r4, r5
   806e0:	d1fa      	bne.n	806d8 <LCD_AddCharacter+0x18>
			LCD_WriteData(charmap[i]);
	}
	LCD_WriteCommand(HD44780_HOME);
   806e2:	2002      	movs	r0, #2
   806e4:	4b01      	ldr	r3, [pc, #4]	; (806ec <LCD_AddCharacter+0x2c>)
   806e6:	4798      	blx	r3
   806e8:	bd70      	pop	{r4, r5, r6, pc}
   806ea:	bf00      	nop
   806ec:	000805f5 	.word	0x000805f5
   806f0:	000805c9 	.word	0x000805c9

000806f4 <char_convert_sv>:
}

uint8_t char_convert_sv(uint8_t character) {
	switch(character) {
   806f4:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   806f8:	2b32      	cmp	r3, #50	; 0x32
   806fa:	d826      	bhi.n	8074a <char_convert_sv+0x56>
   806fc:	e8df f003 	tbb	[pc, r3]
   80700:	25251e20 	.word	0x25251e20
   80704:	25252525 	.word	0x25252525
   80708:	25252525 	.word	0x25252525
   8070c:	25252525 	.word	0x25252525
   80710:	25222525 	.word	0x25222525
   80714:	25252525 	.word	0x25252525
   80718:	25252525 	.word	0x25252525
   8071c:	25252525 	.word	0x25252525
   80720:	25251c1a 	.word	0x25251c1a
   80724:	25252525 	.word	0x25252525
   80728:	25252525 	.word	0x25252525
   8072c:	25252525 	.word	0x25252525
   80730:	2525      	.short	0x2525
   80732:	24          	.byte	0x24
   80733:	00          	.byte	0x00
		case 0xF6:
			return 0xEF;
		case 0xE4:
			return 0xE1;
   80734:	20e1      	movs	r0, #225	; 0xe1
   80736:	4770      	bx	lr
		case 0xE5:
			return 0x00;
   80738:	2000      	movs	r0, #0
   8073a:	4770      	bx	lr
		case 0xC5:
			return 0x01;
   8073c:	2001      	movs	r0, #1
   8073e:	4770      	bx	lr
		case 0xC4:
			return 0x02;
   80740:	2002      	movs	r0, #2
   80742:	4770      	bx	lr
		case 0xD6:
			return 0x03;
   80744:	2003      	movs	r0, #3
   80746:	4770      	bx	lr
}

uint8_t char_convert_sv(uint8_t character) {
	switch(character) {
		case 0xF6:
			return 0xEF;
   80748:	20ef      	movs	r0, #239	; 0xef
		case 0xD6:
			return 0x03;
		default:
			return character;
	}
}
   8074a:	4770      	bx	lr

0008074c <LCD_WriteString>:
}

/************************************************************************/
/* Writes a string to the display.                                      */
/************************************************************************/
void LCD_WriteString(char *input) {
   8074c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8074e:	b087      	sub	sp, #28
   80750:	4604      	mov	r4, r0
	char str[20] = {0};
   80752:	2300      	movs	r3, #0
   80754:	9301      	str	r3, [sp, #4]
   80756:	9302      	str	r3, [sp, #8]
   80758:	9303      	str	r3, [sp, #12]
   8075a:	9304      	str	r3, [sp, #16]
   8075c:	9305      	str	r3, [sp, #20]
	while(*input != '\0') {
   8075e:	7800      	ldrb	r0, [r0, #0]
   80760:	b178      	cbz	r0, 80782 <LCD_WriteString+0x36>
		LCD_WriteData(char_convert_sv(*input));
   80762:	4f09      	ldr	r7, [pc, #36]	; (80788 <LCD_WriteString+0x3c>)
   80764:	4e09      	ldr	r6, [pc, #36]	; (8078c <LCD_WriteString+0x40>)
		itoa(*input, str, 10);
   80766:	4d0a      	ldr	r5, [pc, #40]	; (80790 <LCD_WriteString+0x44>)
/* Writes a string to the display.                                      */
/************************************************************************/
void LCD_WriteString(char *input) {
	char str[20] = {0};
	while(*input != '\0') {
		LCD_WriteData(char_convert_sv(*input));
   80768:	47b8      	blx	r7
   8076a:	47b0      	blx	r6
		itoa(*input, str, 10);
   8076c:	7820      	ldrb	r0, [r4, #0]
   8076e:	a901      	add	r1, sp, #4
   80770:	220a      	movs	r2, #10
   80772:	47a8      	blx	r5
		printf(str);
   80774:	a801      	add	r0, sp, #4
   80776:	4b07      	ldr	r3, [pc, #28]	; (80794 <LCD_WriteString+0x48>)
   80778:	4798      	blx	r3
/************************************************************************/
/* Writes a string to the display.                                      */
/************************************************************************/
void LCD_WriteString(char *input) {
	char str[20] = {0};
	while(*input != '\0') {
   8077a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   8077e:	2800      	cmp	r0, #0
   80780:	d1f2      	bne.n	80768 <LCD_WriteString+0x1c>
		LCD_WriteData(char_convert_sv(*input));
		itoa(*input, str, 10);
		printf(str);
		input++;
	}
}
   80782:	b007      	add	sp, #28
   80784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80786:	bf00      	nop
   80788:	000806f5 	.word	0x000806f5
   8078c:	000805c9 	.word	0x000805c9
   80790:	000810b1 	.word	0x000810b1
   80794:	00081059 	.word	0x00081059

00080798 <LCD_sv_mode>:
		default:
			return character;
	}
}

void LCD_sv_mode(void) {
   80798:	b530      	push	{r4, r5, lr}
   8079a:	b089      	sub	sp, #36	; 0x24
	uint8_t char_aa[8] = {0x4, 0x0, 0xe, 0x1, 0xf, 0x11, 0xf};
   8079c:	2000      	movs	r0, #0
   8079e:	9006      	str	r0, [sp, #24]
   807a0:	9007      	str	r0, [sp, #28]
   807a2:	2104      	movs	r1, #4
   807a4:	f88d 1018 	strb.w	r1, [sp, #24]
   807a8:	220e      	movs	r2, #14
   807aa:	f88d 201a 	strb.w	r2, [sp, #26]
   807ae:	2501      	movs	r5, #1
   807b0:	f88d 501b 	strb.w	r5, [sp, #27]
   807b4:	240f      	movs	r4, #15
   807b6:	f88d 401c 	strb.w	r4, [sp, #28]
   807ba:	2311      	movs	r3, #17
   807bc:	f88d 301d 	strb.w	r3, [sp, #29]
   807c0:	f88d 401e 	strb.w	r4, [sp, #30]
	uint8_t char_AA[8] = {0x4, 0x0, 0xe, 0x11, 0x1f, 0x11, 0x11};
   807c4:	9004      	str	r0, [sp, #16]
   807c6:	9005      	str	r0, [sp, #20]
   807c8:	f88d 1010 	strb.w	r1, [sp, #16]
   807cc:	f88d 2012 	strb.w	r2, [sp, #18]
   807d0:	f88d 3013 	strb.w	r3, [sp, #19]
   807d4:	241f      	movs	r4, #31
   807d6:	f88d 4014 	strb.w	r4, [sp, #20]
   807da:	f88d 3015 	strb.w	r3, [sp, #21]
   807de:	f88d 3016 	strb.w	r3, [sp, #22]
	uint8_t char_AE[8] = {0xa, 0x0, 0xe, 0x11, 0x1f, 0x11, 0x11};
   807e2:	9002      	str	r0, [sp, #8]
   807e4:	9003      	str	r0, [sp, #12]
   807e6:	210a      	movs	r1, #10
   807e8:	f88d 1008 	strb.w	r1, [sp, #8]
   807ec:	f88d 200a 	strb.w	r2, [sp, #10]
   807f0:	f88d 300b 	strb.w	r3, [sp, #11]
   807f4:	f88d 400c 	strb.w	r4, [sp, #12]
   807f8:	f88d 300d 	strb.w	r3, [sp, #13]
   807fc:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t char_OE[8] = {0xa, 0xe, 0x11, 0x11, 0x11, 0x11, 0xe};
   80800:	9001      	str	r0, [sp, #4]
   80802:	f88d 1000 	strb.w	r1, [sp]
   80806:	f88d 2001 	strb.w	r2, [sp, #1]
   8080a:	f88d 3002 	strb.w	r3, [sp, #2]
   8080e:	f88d 3003 	strb.w	r3, [sp, #3]
   80812:	f88d 3004 	strb.w	r3, [sp, #4]
   80816:	f88d 3005 	strb.w	r3, [sp, #5]
   8081a:	f88d 2006 	strb.w	r2, [sp, #6]
	LCD_AddCharacter(0, char_aa);
   8081e:	a906      	add	r1, sp, #24
   80820:	4c06      	ldr	r4, [pc, #24]	; (8083c <LCD_sv_mode+0xa4>)
   80822:	47a0      	blx	r4
	LCD_AddCharacter(1, char_AA);
   80824:	4628      	mov	r0, r5
   80826:	a904      	add	r1, sp, #16
   80828:	47a0      	blx	r4
	LCD_AddCharacter(2, char_AE);
   8082a:	2002      	movs	r0, #2
   8082c:	a902      	add	r1, sp, #8
   8082e:	47a0      	blx	r4
	LCD_AddCharacter(3, char_OE);
   80830:	2003      	movs	r0, #3
   80832:	4669      	mov	r1, sp
   80834:	47a0      	blx	r4
   80836:	b009      	add	sp, #36	; 0x24
   80838:	bd30      	pop	{r4, r5, pc}
   8083a:	bf00      	nop
   8083c:	000806c1 	.word	0x000806c1

00080840 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80840:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80842:	480e      	ldr	r0, [pc, #56]	; (8087c <sysclk_init+0x3c>)
   80844:	4b0e      	ldr	r3, [pc, #56]	; (80880 <sysclk_init+0x40>)
   80846:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80848:	2000      	movs	r0, #0
   8084a:	213e      	movs	r1, #62	; 0x3e
   8084c:	4b0d      	ldr	r3, [pc, #52]	; (80884 <sysclk_init+0x44>)
   8084e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80850:	4c0d      	ldr	r4, [pc, #52]	; (80888 <sysclk_init+0x48>)
   80852:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80854:	2800      	cmp	r0, #0
   80856:	d0fc      	beq.n	80852 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80858:	4b0c      	ldr	r3, [pc, #48]	; (8088c <sysclk_init+0x4c>)
   8085a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8085c:	4a0c      	ldr	r2, [pc, #48]	; (80890 <sysclk_init+0x50>)
   8085e:	4b0d      	ldr	r3, [pc, #52]	; (80894 <sysclk_init+0x54>)
   80860:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80862:	4c0d      	ldr	r4, [pc, #52]	; (80898 <sysclk_init+0x58>)
   80864:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80866:	2800      	cmp	r0, #0
   80868:	d0fc      	beq.n	80864 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8086a:	2010      	movs	r0, #16
   8086c:	4b0b      	ldr	r3, [pc, #44]	; (8089c <sysclk_init+0x5c>)
   8086e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80870:	4b0b      	ldr	r3, [pc, #44]	; (808a0 <sysclk_init+0x60>)
   80872:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80874:	4801      	ldr	r0, [pc, #4]	; (8087c <sysclk_init+0x3c>)
   80876:	4b02      	ldr	r3, [pc, #8]	; (80880 <sysclk_init+0x40>)
   80878:	4798      	blx	r3
   8087a:	bd10      	pop	{r4, pc}
   8087c:	0501bd00 	.word	0x0501bd00
   80880:	200700b1 	.word	0x200700b1
   80884:	00080c45 	.word	0x00080c45
   80888:	00080c99 	.word	0x00080c99
   8088c:	00080ca9 	.word	0x00080ca9
   80890:	200d3f01 	.word	0x200d3f01
   80894:	400e0600 	.word	0x400e0600
   80898:	00080cb9 	.word	0x00080cb9
   8089c:	00080bdd 	.word	0x00080bdd
   808a0:	00080dd1 	.word	0x00080dd1

000808a4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808a4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808aa:	4b16      	ldr	r3, [pc, #88]	; (80904 <board_init+0x60>)
   808ac:	605a      	str	r2, [r3, #4]
   808ae:	200b      	movs	r0, #11
   808b0:	4c15      	ldr	r4, [pc, #84]	; (80908 <board_init+0x64>)
   808b2:	47a0      	blx	r4
   808b4:	200c      	movs	r0, #12
   808b6:	47a0      	blx	r4
   808b8:	200d      	movs	r0, #13
   808ba:	47a0      	blx	r4
   808bc:	200e      	movs	r0, #14
   808be:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808c0:	203b      	movs	r0, #59	; 0x3b
   808c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808c6:	4c11      	ldr	r4, [pc, #68]	; (8090c <board_init+0x68>)
   808c8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808ca:	2055      	movs	r0, #85	; 0x55
   808cc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808d2:	2056      	movs	r0, #86	; 0x56
   808d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808da:	2068      	movs	r0, #104	; 0x68
   808dc:	490c      	ldr	r1, [pc, #48]	; (80910 <board_init+0x6c>)
   808de:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   808e0:	205c      	movs	r0, #92	; 0x5c
   808e2:	490c      	ldr	r1, [pc, #48]	; (80914 <board_init+0x70>)
   808e4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   808e6:	480c      	ldr	r0, [pc, #48]	; (80918 <board_init+0x74>)
   808e8:	f44f 7140 	mov.w	r1, #768	; 0x300
   808ec:	4a0b      	ldr	r2, [pc, #44]	; (8091c <board_init+0x78>)
   808ee:	4b0c      	ldr	r3, [pc, #48]	; (80920 <board_init+0x7c>)
   808f0:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   808f2:	202b      	movs	r0, #43	; 0x2b
   808f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808f8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   808fa:	202a      	movs	r0, #42	; 0x2a
   808fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80900:	47a0      	blx	r4
   80902:	bd10      	pop	{r4, pc}
   80904:	400e1a50 	.word	0x400e1a50
   80908:	00080cc9 	.word	0x00080cc9
   8090c:	000809c9 	.word	0x000809c9
   80910:	28000079 	.word	0x28000079
   80914:	28000001 	.word	0x28000001
   80918:	400e0e00 	.word	0x400e0e00
   8091c:	08000001 	.word	0x08000001
   80920:	00080a9d 	.word	0x00080a9d

00080924 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80924:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80926:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8092a:	d016      	beq.n	8095a <pio_set_peripheral+0x36>
   8092c:	d804      	bhi.n	80938 <pio_set_peripheral+0x14>
   8092e:	b1c1      	cbz	r1, 80962 <pio_set_peripheral+0x3e>
   80930:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80934:	d00a      	beq.n	8094c <pio_set_peripheral+0x28>
   80936:	e013      	b.n	80960 <pio_set_peripheral+0x3c>
   80938:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8093c:	d011      	beq.n	80962 <pio_set_peripheral+0x3e>
   8093e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80942:	d00e      	beq.n	80962 <pio_set_peripheral+0x3e>
   80944:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80948:	d10a      	bne.n	80960 <pio_set_peripheral+0x3c>
   8094a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8094c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8094e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80950:	400b      	ands	r3, r1
   80952:	ea23 0302 	bic.w	r3, r3, r2
   80956:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80958:	e002      	b.n	80960 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8095a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8095c:	4313      	orrs	r3, r2
   8095e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80960:	6042      	str	r2, [r0, #4]
   80962:	4770      	bx	lr

00080964 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80964:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80966:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8096a:	bf14      	ite	ne
   8096c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8096e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80970:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80974:	bf14      	ite	ne
   80976:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80978:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8097a:	f012 0f02 	tst.w	r2, #2
   8097e:	d002      	beq.n	80986 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80980:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80984:	e004      	b.n	80990 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80986:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8098a:	bf18      	it	ne
   8098c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80990:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80992:	6001      	str	r1, [r0, #0]
   80994:	4770      	bx	lr
   80996:	bf00      	nop

00080998 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80998:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8099a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8099c:	9c01      	ldr	r4, [sp, #4]
   8099e:	b10c      	cbz	r4, 809a4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   809a0:	6641      	str	r1, [r0, #100]	; 0x64
   809a2:	e000      	b.n	809a6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809a4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809a6:	b10b      	cbz	r3, 809ac <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   809a8:	6501      	str	r1, [r0, #80]	; 0x50
   809aa:	e000      	b.n	809ae <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809ac:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809ae:	b10a      	cbz	r2, 809b4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   809b0:	6301      	str	r1, [r0, #48]	; 0x30
   809b2:	e000      	b.n	809b6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809b4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809b6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809b8:	6001      	str	r1, [r0, #0]
}
   809ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   809be:	4770      	bx	lr

000809c0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   809c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   809c2:	4770      	bx	lr

000809c4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   809c4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   809c6:	4770      	bx	lr

000809c8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   809c8:	b570      	push	{r4, r5, r6, lr}
   809ca:	b082      	sub	sp, #8
   809cc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   809ce:	0943      	lsrs	r3, r0, #5
   809d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   809d4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   809d8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809da:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   809de:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   809e2:	d030      	beq.n	80a46 <pio_configure_pin+0x7e>
   809e4:	d806      	bhi.n	809f4 <pio_configure_pin+0x2c>
   809e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   809ea:	d00a      	beq.n	80a02 <pio_configure_pin+0x3a>
   809ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   809f0:	d018      	beq.n	80a24 <pio_configure_pin+0x5c>
   809f2:	e049      	b.n	80a88 <pio_configure_pin+0xc0>
   809f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   809f8:	d030      	beq.n	80a5c <pio_configure_pin+0x94>
   809fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   809fe:	d02d      	beq.n	80a5c <pio_configure_pin+0x94>
   80a00:	e042      	b.n	80a88 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a02:	f000 001f 	and.w	r0, r0, #31
   80a06:	2601      	movs	r6, #1
   80a08:	4086      	lsls	r6, r0
   80a0a:	4620      	mov	r0, r4
   80a0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a10:	4632      	mov	r2, r6
   80a12:	4b1f      	ldr	r3, [pc, #124]	; (80a90 <pio_configure_pin+0xc8>)
   80a14:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a16:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a1a:	bf14      	ite	ne
   80a1c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a1e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a20:	2001      	movs	r0, #1
   80a22:	e032      	b.n	80a8a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a24:	f000 001f 	and.w	r0, r0, #31
   80a28:	2601      	movs	r6, #1
   80a2a:	4086      	lsls	r6, r0
   80a2c:	4620      	mov	r0, r4
   80a2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a32:	4632      	mov	r2, r6
   80a34:	4b16      	ldr	r3, [pc, #88]	; (80a90 <pio_configure_pin+0xc8>)
   80a36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a38:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a3c:	bf14      	ite	ne
   80a3e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a40:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a42:	2001      	movs	r0, #1
   80a44:	e021      	b.n	80a8a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a46:	f000 031f 	and.w	r3, r0, #31
   80a4a:	2601      	movs	r6, #1
   80a4c:	4620      	mov	r0, r4
   80a4e:	fa06 f103 	lsl.w	r1, r6, r3
   80a52:	462a      	mov	r2, r5
   80a54:	4b0f      	ldr	r3, [pc, #60]	; (80a94 <pio_configure_pin+0xcc>)
   80a56:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a58:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80a5a:	e016      	b.n	80a8a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a5c:	f000 031f 	and.w	r3, r0, #31
   80a60:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a62:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a66:	ea05 0106 	and.w	r1, r5, r6
   80a6a:	9100      	str	r1, [sp, #0]
   80a6c:	4620      	mov	r0, r4
   80a6e:	fa06 f103 	lsl.w	r1, r6, r3
   80a72:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a76:	bf14      	ite	ne
   80a78:	2200      	movne	r2, #0
   80a7a:	2201      	moveq	r2, #1
   80a7c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a80:	4c05      	ldr	r4, [pc, #20]	; (80a98 <pio_configure_pin+0xd0>)
   80a82:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a84:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a86:	e000      	b.n	80a8a <pio_configure_pin+0xc2>

	default:
		return 0;
   80a88:	2000      	movs	r0, #0
	}

	return 1;
}
   80a8a:	b002      	add	sp, #8
   80a8c:	bd70      	pop	{r4, r5, r6, pc}
   80a8e:	bf00      	nop
   80a90:	00080925 	.word	0x00080925
   80a94:	00080965 	.word	0x00080965
   80a98:	00080999 	.word	0x00080999

00080a9c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80a9c:	b570      	push	{r4, r5, r6, lr}
   80a9e:	b082      	sub	sp, #8
   80aa0:	4606      	mov	r6, r0
   80aa2:	460d      	mov	r5, r1
   80aa4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80aa6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80aaa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80aae:	d026      	beq.n	80afe <pio_configure_pin_group+0x62>
   80ab0:	d806      	bhi.n	80ac0 <pio_configure_pin_group+0x24>
   80ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ab6:	d00a      	beq.n	80ace <pio_configure_pin_group+0x32>
   80ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80abc:	d013      	beq.n	80ae6 <pio_configure_pin_group+0x4a>
   80abe:	e034      	b.n	80b2a <pio_configure_pin_group+0x8e>
   80ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ac4:	d01f      	beq.n	80b06 <pio_configure_pin_group+0x6a>
   80ac6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80aca:	d01c      	beq.n	80b06 <pio_configure_pin_group+0x6a>
   80acc:	e02d      	b.n	80b2a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80ace:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ad2:	462a      	mov	r2, r5
   80ad4:	4b16      	ldr	r3, [pc, #88]	; (80b30 <pio_configure_pin_group+0x94>)
   80ad6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ad8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80adc:	bf14      	ite	ne
   80ade:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ae0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80ae2:	2001      	movs	r0, #1
   80ae4:	e022      	b.n	80b2c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80ae6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80aea:	462a      	mov	r2, r5
   80aec:	4b10      	ldr	r3, [pc, #64]	; (80b30 <pio_configure_pin_group+0x94>)
   80aee:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80af0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80af4:	bf14      	ite	ne
   80af6:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80af8:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80afa:	2001      	movs	r0, #1
   80afc:	e016      	b.n	80b2c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80afe:	4b0d      	ldr	r3, [pc, #52]	; (80b34 <pio_configure_pin_group+0x98>)
   80b00:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b02:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b04:	e012      	b.n	80b2c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b06:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b0a:	f004 0301 	and.w	r3, r4, #1
   80b0e:	9300      	str	r3, [sp, #0]
   80b10:	4630      	mov	r0, r6
   80b12:	4629      	mov	r1, r5
   80b14:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b18:	bf14      	ite	ne
   80b1a:	2200      	movne	r2, #0
   80b1c:	2201      	moveq	r2, #1
   80b1e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80b22:	4c05      	ldr	r4, [pc, #20]	; (80b38 <pio_configure_pin_group+0x9c>)
   80b24:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b26:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b28:	e000      	b.n	80b2c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b2a:	2000      	movs	r0, #0
	}

	return 1;
}
   80b2c:	b002      	add	sp, #8
   80b2e:	bd70      	pop	{r4, r5, r6, pc}
   80b30:	00080925 	.word	0x00080925
   80b34:	00080965 	.word	0x00080965
   80b38:	00080999 	.word	0x00080999

00080b3c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b40:	4604      	mov	r4, r0
   80b42:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b44:	4b0e      	ldr	r3, [pc, #56]	; (80b80 <pio_handler_process+0x44>)
   80b46:	4798      	blx	r3
   80b48:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b4a:	4620      	mov	r0, r4
   80b4c:	4b0d      	ldr	r3, [pc, #52]	; (80b84 <pio_handler_process+0x48>)
   80b4e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b50:	4005      	ands	r5, r0
   80b52:	d013      	beq.n	80b7c <pio_handler_process+0x40>
   80b54:	4c0c      	ldr	r4, [pc, #48]	; (80b88 <pio_handler_process+0x4c>)
   80b56:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80b5a:	6823      	ldr	r3, [r4, #0]
   80b5c:	4543      	cmp	r3, r8
   80b5e:	d108      	bne.n	80b72 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b60:	6861      	ldr	r1, [r4, #4]
   80b62:	4229      	tst	r1, r5
   80b64:	d005      	beq.n	80b72 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b66:	68e3      	ldr	r3, [r4, #12]
   80b68:	4640      	mov	r0, r8
   80b6a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80b6c:	6863      	ldr	r3, [r4, #4]
   80b6e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b72:	42b4      	cmp	r4, r6
   80b74:	d002      	beq.n	80b7c <pio_handler_process+0x40>
   80b76:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80b78:	2d00      	cmp	r5, #0
   80b7a:	d1ee      	bne.n	80b5a <pio_handler_process+0x1e>
   80b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b80:	000809c1 	.word	0x000809c1
   80b84:	000809c5 	.word	0x000809c5
   80b88:	20070a60 	.word	0x20070a60

00080b8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b8e:	4802      	ldr	r0, [pc, #8]	; (80b98 <PIOA_Handler+0xc>)
   80b90:	210b      	movs	r1, #11
   80b92:	4b02      	ldr	r3, [pc, #8]	; (80b9c <PIOA_Handler+0x10>)
   80b94:	4798      	blx	r3
   80b96:	bd08      	pop	{r3, pc}
   80b98:	400e0e00 	.word	0x400e0e00
   80b9c:	00080b3d 	.word	0x00080b3d

00080ba0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ba0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ba2:	4802      	ldr	r0, [pc, #8]	; (80bac <PIOB_Handler+0xc>)
   80ba4:	210c      	movs	r1, #12
   80ba6:	4b02      	ldr	r3, [pc, #8]	; (80bb0 <PIOB_Handler+0x10>)
   80ba8:	4798      	blx	r3
   80baa:	bd08      	pop	{r3, pc}
   80bac:	400e1000 	.word	0x400e1000
   80bb0:	00080b3d 	.word	0x00080b3d

00080bb4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80bb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80bb6:	4802      	ldr	r0, [pc, #8]	; (80bc0 <PIOC_Handler+0xc>)
   80bb8:	210d      	movs	r1, #13
   80bba:	4b02      	ldr	r3, [pc, #8]	; (80bc4 <PIOC_Handler+0x10>)
   80bbc:	4798      	blx	r3
   80bbe:	bd08      	pop	{r3, pc}
   80bc0:	400e1200 	.word	0x400e1200
   80bc4:	00080b3d 	.word	0x00080b3d

00080bc8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80bc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80bca:	4802      	ldr	r0, [pc, #8]	; (80bd4 <PIOD_Handler+0xc>)
   80bcc:	210e      	movs	r1, #14
   80bce:	4b02      	ldr	r3, [pc, #8]	; (80bd8 <PIOD_Handler+0x10>)
   80bd0:	4798      	blx	r3
   80bd2:	bd08      	pop	{r3, pc}
   80bd4:	400e1400 	.word	0x400e1400
   80bd8:	00080b3d 	.word	0x00080b3d

00080bdc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80bdc:	4a18      	ldr	r2, [pc, #96]	; (80c40 <pmc_switch_mck_to_pllack+0x64>)
   80bde:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80be4:	4318      	orrs	r0, r3
   80be6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80be8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bea:	f013 0f08 	tst.w	r3, #8
   80bee:	d003      	beq.n	80bf8 <pmc_switch_mck_to_pllack+0x1c>
   80bf0:	e009      	b.n	80c06 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bf2:	3b01      	subs	r3, #1
   80bf4:	d103      	bne.n	80bfe <pmc_switch_mck_to_pllack+0x22>
   80bf6:	e01e      	b.n	80c36 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80bfc:	4910      	ldr	r1, [pc, #64]	; (80c40 <pmc_switch_mck_to_pllack+0x64>)
   80bfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c00:	f012 0f08 	tst.w	r2, #8
   80c04:	d0f5      	beq.n	80bf2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80c06:	4a0e      	ldr	r2, [pc, #56]	; (80c40 <pmc_switch_mck_to_pllack+0x64>)
   80c08:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c0a:	f023 0303 	bic.w	r3, r3, #3
   80c0e:	f043 0302 	orr.w	r3, r3, #2
   80c12:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c14:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80c16:	f010 0008 	ands.w	r0, r0, #8
   80c1a:	d004      	beq.n	80c26 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80c1c:	2000      	movs	r0, #0
   80c1e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c20:	3b01      	subs	r3, #1
   80c22:	d103      	bne.n	80c2c <pmc_switch_mck_to_pllack+0x50>
   80c24:	e009      	b.n	80c3a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c2a:	4905      	ldr	r1, [pc, #20]	; (80c40 <pmc_switch_mck_to_pllack+0x64>)
   80c2c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c2e:	f012 0f08 	tst.w	r2, #8
   80c32:	d0f5      	beq.n	80c20 <pmc_switch_mck_to_pllack+0x44>
   80c34:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80c36:	2001      	movs	r0, #1
   80c38:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80c3a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80c3c:	4770      	bx	lr
   80c3e:	bf00      	nop
   80c40:	400e0600 	.word	0x400e0600

00080c44 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80c44:	b138      	cbz	r0, 80c56 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c46:	4911      	ldr	r1, [pc, #68]	; (80c8c <pmc_switch_mainck_to_xtal+0x48>)
   80c48:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80c4a:	4a11      	ldr	r2, [pc, #68]	; (80c90 <pmc_switch_mainck_to_xtal+0x4c>)
   80c4c:	401a      	ands	r2, r3
   80c4e:	4b11      	ldr	r3, [pc, #68]	; (80c94 <pmc_switch_mainck_to_xtal+0x50>)
   80c50:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c52:	620b      	str	r3, [r1, #32]
   80c54:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c56:	4a0d      	ldr	r2, [pc, #52]	; (80c8c <pmc_switch_mainck_to_xtal+0x48>)
   80c58:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80c5a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80c5e:	f023 0303 	bic.w	r3, r3, #3
   80c62:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80c66:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c6a:	0209      	lsls	r1, r1, #8
   80c6c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80c6e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c70:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c72:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c74:	f013 0f01 	tst.w	r3, #1
   80c78:	d0fb      	beq.n	80c72 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80c7a:	4a04      	ldr	r2, [pc, #16]	; (80c8c <pmc_switch_mainck_to_xtal+0x48>)
   80c7c:	6a13      	ldr	r3, [r2, #32]
   80c7e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c86:	6213      	str	r3, [r2, #32]
   80c88:	4770      	bx	lr
   80c8a:	bf00      	nop
   80c8c:	400e0600 	.word	0x400e0600
   80c90:	fec8fffc 	.word	0xfec8fffc
   80c94:	01370002 	.word	0x01370002

00080c98 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c98:	4b02      	ldr	r3, [pc, #8]	; (80ca4 <pmc_osc_is_ready_mainck+0xc>)
   80c9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c9c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80ca0:	4770      	bx	lr
   80ca2:	bf00      	nop
   80ca4:	400e0600 	.word	0x400e0600

00080ca8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80ca8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80cac:	4b01      	ldr	r3, [pc, #4]	; (80cb4 <pmc_disable_pllack+0xc>)
   80cae:	629a      	str	r2, [r3, #40]	; 0x28
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop
   80cb4:	400e0600 	.word	0x400e0600

00080cb8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80cb8:	4b02      	ldr	r3, [pc, #8]	; (80cc4 <pmc_is_locked_pllack+0xc>)
   80cba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80cbc:	f000 0002 	and.w	r0, r0, #2
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	400e0600 	.word	0x400e0600

00080cc8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80cc8:	282c      	cmp	r0, #44	; 0x2c
   80cca:	d81e      	bhi.n	80d0a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80ccc:	281f      	cmp	r0, #31
   80cce:	d80c      	bhi.n	80cea <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80cd0:	4b11      	ldr	r3, [pc, #68]	; (80d18 <pmc_enable_periph_clk+0x50>)
   80cd2:	699a      	ldr	r2, [r3, #24]
   80cd4:	2301      	movs	r3, #1
   80cd6:	4083      	lsls	r3, r0
   80cd8:	401a      	ands	r2, r3
   80cda:	4293      	cmp	r3, r2
   80cdc:	d017      	beq.n	80d0e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80cde:	2301      	movs	r3, #1
   80ce0:	4083      	lsls	r3, r0
   80ce2:	4a0d      	ldr	r2, [pc, #52]	; (80d18 <pmc_enable_periph_clk+0x50>)
   80ce4:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ce6:	2000      	movs	r0, #0
   80ce8:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cea:	4b0b      	ldr	r3, [pc, #44]	; (80d18 <pmc_enable_periph_clk+0x50>)
   80cec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80cf0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cf2:	2301      	movs	r3, #1
   80cf4:	4083      	lsls	r3, r0
   80cf6:	401a      	ands	r2, r3
   80cf8:	4293      	cmp	r3, r2
   80cfa:	d00a      	beq.n	80d12 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80cfc:	2301      	movs	r3, #1
   80cfe:	4083      	lsls	r3, r0
   80d00:	4a05      	ldr	r2, [pc, #20]	; (80d18 <pmc_enable_periph_clk+0x50>)
   80d02:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80d06:	2000      	movs	r0, #0
   80d08:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80d0a:	2001      	movs	r0, #1
   80d0c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d0e:	2000      	movs	r0, #0
   80d10:	4770      	bx	lr
   80d12:	2000      	movs	r0, #0
}
   80d14:	4770      	bx	lr
   80d16:	bf00      	nop
   80d18:	400e0600 	.word	0x400e0600

00080d1c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80d1c:	e7fe      	b.n	80d1c <Dummy_Handler>
   80d1e:	bf00      	nop

00080d20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d20:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d22:	4b1f      	ldr	r3, [pc, #124]	; (80da0 <Reset_Handler+0x80>)
   80d24:	4a1f      	ldr	r2, [pc, #124]	; (80da4 <Reset_Handler+0x84>)
   80d26:	429a      	cmp	r2, r3
   80d28:	d003      	beq.n	80d32 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80d2a:	4b1f      	ldr	r3, [pc, #124]	; (80da8 <Reset_Handler+0x88>)
   80d2c:	4a1c      	ldr	r2, [pc, #112]	; (80da0 <Reset_Handler+0x80>)
   80d2e:	429a      	cmp	r2, r3
   80d30:	d304      	bcc.n	80d3c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d32:	4b1e      	ldr	r3, [pc, #120]	; (80dac <Reset_Handler+0x8c>)
   80d34:	4a1e      	ldr	r2, [pc, #120]	; (80db0 <Reset_Handler+0x90>)
   80d36:	429a      	cmp	r2, r3
   80d38:	d310      	bcc.n	80d5c <Reset_Handler+0x3c>
   80d3a:	e01b      	b.n	80d74 <Reset_Handler+0x54>
   80d3c:	4918      	ldr	r1, [pc, #96]	; (80da0 <Reset_Handler+0x80>)
   80d3e:	1d0a      	adds	r2, r1, #4
   80d40:	4b1c      	ldr	r3, [pc, #112]	; (80db4 <Reset_Handler+0x94>)
   80d42:	1a9b      	subs	r3, r3, r2
   80d44:	f023 0303 	bic.w	r3, r3, #3
   80d48:	3304      	adds	r3, #4
   80d4a:	4a16      	ldr	r2, [pc, #88]	; (80da4 <Reset_Handler+0x84>)
   80d4c:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80d4e:	f852 0b04 	ldr.w	r0, [r2], #4
   80d52:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d56:	429a      	cmp	r2, r3
   80d58:	d1f9      	bne.n	80d4e <Reset_Handler+0x2e>
   80d5a:	e7ea      	b.n	80d32 <Reset_Handler+0x12>
   80d5c:	4b16      	ldr	r3, [pc, #88]	; (80db8 <Reset_Handler+0x98>)
   80d5e:	4a17      	ldr	r2, [pc, #92]	; (80dbc <Reset_Handler+0x9c>)
   80d60:	1ad2      	subs	r2, r2, r3
   80d62:	f022 0203 	bic.w	r2, r2, #3
   80d66:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d68:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80d6a:	2100      	movs	r1, #0
   80d6c:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d70:	4293      	cmp	r3, r2
   80d72:	d1fb      	bne.n	80d6c <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d74:	4b12      	ldr	r3, [pc, #72]	; (80dc0 <Reset_Handler+0xa0>)
   80d76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80d7a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80d7e:	4911      	ldr	r1, [pc, #68]	; (80dc4 <Reset_Handler+0xa4>)
   80d80:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80d82:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80d8a:	d203      	bcs.n	80d94 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80d8c:	688b      	ldr	r3, [r1, #8]
   80d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80d92:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d94:	4b0c      	ldr	r3, [pc, #48]	; (80dc8 <Reset_Handler+0xa8>)
   80d96:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d98:	4b0c      	ldr	r3, [pc, #48]	; (80dcc <Reset_Handler+0xac>)
   80d9a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80d9c:	e7fe      	b.n	80d9c <Reset_Handler+0x7c>
   80d9e:	bf00      	nop
   80da0:	20070000 	.word	0x20070000
   80da4:	0008428c 	.word	0x0008428c
   80da8:	200709a4 	.word	0x200709a4
   80dac:	20070b18 	.word	0x20070b18
   80db0:	200709a4 	.word	0x200709a4
   80db4:	200709a7 	.word	0x200709a7
   80db8:	200709a8 	.word	0x200709a8
   80dbc:	20070b1b 	.word	0x20070b1b
   80dc0:	00080000 	.word	0x00080000
   80dc4:	e000ed00 	.word	0xe000ed00
   80dc8:	00081009 	.word	0x00081009
   80dcc:	00080f3d 	.word	0x00080f3d

00080dd0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80dd0:	4b3e      	ldr	r3, [pc, #248]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dd4:	f003 0303 	and.w	r3, r3, #3
   80dd8:	2b03      	cmp	r3, #3
   80dda:	d85f      	bhi.n	80e9c <SystemCoreClockUpdate+0xcc>
   80ddc:	e8df f003 	tbb	[pc, r3]
   80de0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80de4:	4b3a      	ldr	r3, [pc, #232]	; (80ed0 <SystemCoreClockUpdate+0x100>)
   80de6:	695b      	ldr	r3, [r3, #20]
   80de8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80dec:	bf14      	ite	ne
   80dee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80df2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80df6:	4b37      	ldr	r3, [pc, #220]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80df8:	601a      	str	r2, [r3, #0]
   80dfa:	e04f      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80dfc:	4b33      	ldr	r3, [pc, #204]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80dfe:	6a1b      	ldr	r3, [r3, #32]
   80e00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e04:	d003      	beq.n	80e0e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e06:	4a34      	ldr	r2, [pc, #208]	; (80ed8 <SystemCoreClockUpdate+0x108>)
   80e08:	4b32      	ldr	r3, [pc, #200]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e0a:	601a      	str	r2, [r3, #0]
   80e0c:	e046      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e0e:	4a33      	ldr	r2, [pc, #204]	; (80edc <SystemCoreClockUpdate+0x10c>)
   80e10:	4b30      	ldr	r3, [pc, #192]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e12:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e14:	4b2d      	ldr	r3, [pc, #180]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e16:	6a1b      	ldr	r3, [r3, #32]
   80e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e1c:	2b10      	cmp	r3, #16
   80e1e:	d002      	beq.n	80e26 <SystemCoreClockUpdate+0x56>
   80e20:	2b20      	cmp	r3, #32
   80e22:	d004      	beq.n	80e2e <SystemCoreClockUpdate+0x5e>
   80e24:	e03a      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e26:	4a2e      	ldr	r2, [pc, #184]	; (80ee0 <SystemCoreClockUpdate+0x110>)
   80e28:	4b2a      	ldr	r3, [pc, #168]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e2a:	601a      	str	r2, [r3, #0]
				break;
   80e2c:	e036      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e2e:	4a2a      	ldr	r2, [pc, #168]	; (80ed8 <SystemCoreClockUpdate+0x108>)
   80e30:	4b28      	ldr	r3, [pc, #160]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e32:	601a      	str	r2, [r3, #0]
				break;
   80e34:	e032      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e36:	4b25      	ldr	r3, [pc, #148]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e38:	6a1b      	ldr	r3, [r3, #32]
   80e3a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e3e:	d003      	beq.n	80e48 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e40:	4a25      	ldr	r2, [pc, #148]	; (80ed8 <SystemCoreClockUpdate+0x108>)
   80e42:	4b24      	ldr	r3, [pc, #144]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e44:	601a      	str	r2, [r3, #0]
   80e46:	e012      	b.n	80e6e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e48:	4a24      	ldr	r2, [pc, #144]	; (80edc <SystemCoreClockUpdate+0x10c>)
   80e4a:	4b22      	ldr	r3, [pc, #136]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e4c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e4e:	4b1f      	ldr	r3, [pc, #124]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e50:	6a1b      	ldr	r3, [r3, #32]
   80e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e56:	2b10      	cmp	r3, #16
   80e58:	d002      	beq.n	80e60 <SystemCoreClockUpdate+0x90>
   80e5a:	2b20      	cmp	r3, #32
   80e5c:	d004      	beq.n	80e68 <SystemCoreClockUpdate+0x98>
   80e5e:	e006      	b.n	80e6e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e60:	4a1f      	ldr	r2, [pc, #124]	; (80ee0 <SystemCoreClockUpdate+0x110>)
   80e62:	4b1c      	ldr	r3, [pc, #112]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e64:	601a      	str	r2, [r3, #0]
				break;
   80e66:	e002      	b.n	80e6e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e68:	4a1b      	ldr	r2, [pc, #108]	; (80ed8 <SystemCoreClockUpdate+0x108>)
   80e6a:	4b1a      	ldr	r3, [pc, #104]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e6c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e6e:	4b17      	ldr	r3, [pc, #92]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e72:	f003 0303 	and.w	r3, r3, #3
   80e76:	2b02      	cmp	r3, #2
   80e78:	d10d      	bne.n	80e96 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e7a:	4a14      	ldr	r2, [pc, #80]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80e80:	4814      	ldr	r0, [pc, #80]	; (80ed4 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e82:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80e86:	6803      	ldr	r3, [r0, #0]
   80e88:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e8c:	b2d2      	uxtb	r2, r2
   80e8e:	fbb3 f3f2 	udiv	r3, r3, r2
   80e92:	6003      	str	r3, [r0, #0]
   80e94:	e002      	b.n	80e9c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e96:	4a13      	ldr	r2, [pc, #76]	; (80ee4 <SystemCoreClockUpdate+0x114>)
   80e98:	4b0e      	ldr	r3, [pc, #56]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80e9a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e9c:	4b0b      	ldr	r3, [pc, #44]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ea4:	2b70      	cmp	r3, #112	; 0x70
   80ea6:	d107      	bne.n	80eb8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80ea8:	4a0a      	ldr	r2, [pc, #40]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80eaa:	6813      	ldr	r3, [r2, #0]
   80eac:	490e      	ldr	r1, [pc, #56]	; (80ee8 <SystemCoreClockUpdate+0x118>)
   80eae:	fba1 1303 	umull	r1, r3, r1, r3
   80eb2:	085b      	lsrs	r3, r3, #1
   80eb4:	6013      	str	r3, [r2, #0]
   80eb6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80eb8:	4b04      	ldr	r3, [pc, #16]	; (80ecc <SystemCoreClockUpdate+0xfc>)
   80eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ebc:	4905      	ldr	r1, [pc, #20]	; (80ed4 <SystemCoreClockUpdate+0x104>)
   80ebe:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80ec2:	680b      	ldr	r3, [r1, #0]
   80ec4:	40d3      	lsrs	r3, r2
   80ec6:	600b      	str	r3, [r1, #0]
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop
   80ecc:	400e0600 	.word	0x400e0600
   80ed0:	400e1a10 	.word	0x400e1a10
   80ed4:	2007013c 	.word	0x2007013c
   80ed8:	00b71b00 	.word	0x00b71b00
   80edc:	003d0900 	.word	0x003d0900
   80ee0:	007a1200 	.word	0x007a1200
   80ee4:	0e4e1c00 	.word	0x0e4e1c00
   80ee8:	aaaaaaab 	.word	0xaaaaaaab

00080eec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80eec:	4b09      	ldr	r3, [pc, #36]	; (80f14 <_sbrk+0x28>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	b913      	cbnz	r3, 80ef8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ef2:	4a09      	ldr	r2, [pc, #36]	; (80f18 <_sbrk+0x2c>)
   80ef4:	4b07      	ldr	r3, [pc, #28]	; (80f14 <_sbrk+0x28>)
   80ef6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ef8:	4b06      	ldr	r3, [pc, #24]	; (80f14 <_sbrk+0x28>)
   80efa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80efc:	181a      	adds	r2, r3, r0
   80efe:	4907      	ldr	r1, [pc, #28]	; (80f1c <_sbrk+0x30>)
   80f00:	4291      	cmp	r1, r2
   80f02:	db04      	blt.n	80f0e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f04:	4610      	mov	r0, r2
   80f06:	4a03      	ldr	r2, [pc, #12]	; (80f14 <_sbrk+0x28>)
   80f08:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f0a:	4618      	mov	r0, r3
   80f0c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f0e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f12:	4770      	bx	lr
   80f14:	20070ad0 	.word	0x20070ad0
   80f18:	20072b18 	.word	0x20072b18
   80f1c:	20087ffc 	.word	0x20087ffc

00080f20 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f20:	f04f 30ff 	mov.w	r0, #4294967295
   80f24:	4770      	bx	lr
   80f26:	bf00      	nop

00080f28 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f2c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f2e:	2000      	movs	r0, #0
   80f30:	4770      	bx	lr
   80f32:	bf00      	nop

00080f34 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f34:	2001      	movs	r0, #1
   80f36:	4770      	bx	lr

00080f38 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f38:	2000      	movs	r0, #0
   80f3a:	4770      	bx	lr

00080f3c <main>:
#include "lcd_driver/lcd_driver.h"
#include "com_driver/com_driver.h"
#include "lcd_driver/hd44780.h"

int main (void)
{
   80f3c:	b570      	push	{r4, r5, r6, lr}
   80f3e:	b086      	sub	sp, #24
	sysclk_init();
   80f40:	4b11      	ldr	r3, [pc, #68]	; (80f88 <main+0x4c>)
   80f42:	4798      	blx	r3
	board_init();
   80f44:	4b11      	ldr	r3, [pc, #68]	; (80f8c <main+0x50>)
   80f46:	4798      	blx	r3
   80f48:	200b      	movs	r0, #11
   80f4a:	4c11      	ldr	r4, [pc, #68]	; (80f90 <main+0x54>)
   80f4c:	47a0      	blx	r4
   80f4e:	200c      	movs	r0, #12
   80f50:	47a0      	blx	r4
   80f52:	200d      	movs	r0, #13
   80f54:	47a0      	blx	r4
   80f56:	200e      	movs	r0, #14
   80f58:	47a0      	blx	r4
	ioport_init();
	delay_init(sysclk_get_cpu_hz());
	configure_console();
   80f5a:	4b0e      	ldr	r3, [pc, #56]	; (80f94 <main+0x58>)
   80f5c:	4798      	blx	r3
	LCD_init();
   80f5e:	4b0e      	ldr	r3, [pc, #56]	; (80f98 <main+0x5c>)
   80f60:	4798      	blx	r3
	LCD_sv_mode();
   80f62:	4b0e      	ldr	r3, [pc, #56]	; (80f9c <main+0x60>)
   80f64:	4798      	blx	r3
	char str[20] = {0};
   80f66:	2300      	movs	r3, #0
   80f68:	9301      	str	r3, [sp, #4]
   80f6a:	9302      	str	r3, [sp, #8]
   80f6c:	9303      	str	r3, [sp, #12]
   80f6e:	9304      	str	r3, [sp, #16]
   80f70:	9305      	str	r3, [sp, #20]
	while(1) {
		gets(str);
   80f72:	4e0b      	ldr	r6, [pc, #44]	; (80fa0 <main+0x64>)
		LCD_WriteCommand(HD44780_CLEAR);
   80f74:	4d0b      	ldr	r5, [pc, #44]	; (80fa4 <main+0x68>)
		LCD_WriteString(str);
   80f76:	4c0c      	ldr	r4, [pc, #48]	; (80fa8 <main+0x6c>)
	configure_console();
	LCD_init();
	LCD_sv_mode();
	char str[20] = {0};
	while(1) {
		gets(str);
   80f78:	a801      	add	r0, sp, #4
   80f7a:	47b0      	blx	r6
		LCD_WriteCommand(HD44780_CLEAR);
   80f7c:	2001      	movs	r0, #1
   80f7e:	47a8      	blx	r5
		LCD_WriteString(str);
   80f80:	a801      	add	r0, sp, #4
   80f82:	47a0      	blx	r4
	}
   80f84:	e7f8      	b.n	80f78 <main+0x3c>
   80f86:	bf00      	nop
   80f88:	00080841 	.word	0x00080841
   80f8c:	000808a5 	.word	0x000808a5
   80f90:	00080cc9 	.word	0x00080cc9
   80f94:	000804cd 	.word	0x000804cd
   80f98:	00080621 	.word	0x00080621
   80f9c:	00080799 	.word	0x00080799
   80fa0:	00080ff9 	.word	0x00080ff9
   80fa4:	000805f5 	.word	0x000805f5
   80fa8:	0008074d 	.word	0x0008074d

00080fac <_gets_r>:
   80fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fae:	460f      	mov	r7, r1
   80fb0:	4605      	mov	r5, r0
   80fb2:	460c      	mov	r4, r1
   80fb4:	4e0f      	ldr	r6, [pc, #60]	; (80ff4 <_gets_r+0x48>)
   80fb6:	e007      	b.n	80fc8 <_gets_r+0x1c>
   80fb8:	680b      	ldr	r3, [r1, #0]
   80fba:	1c5a      	adds	r2, r3, #1
   80fbc:	600a      	str	r2, [r1, #0]
   80fbe:	7818      	ldrb	r0, [r3, #0]
   80fc0:	280a      	cmp	r0, #10
   80fc2:	d011      	beq.n	80fe8 <_gets_r+0x3c>
   80fc4:	f804 0b01 	strb.w	r0, [r4], #1
   80fc8:	6833      	ldr	r3, [r6, #0]
   80fca:	6859      	ldr	r1, [r3, #4]
   80fcc:	684b      	ldr	r3, [r1, #4]
   80fce:	3b01      	subs	r3, #1
   80fd0:	2b00      	cmp	r3, #0
   80fd2:	604b      	str	r3, [r1, #4]
   80fd4:	daf0      	bge.n	80fb8 <_gets_r+0xc>
   80fd6:	4628      	mov	r0, r5
   80fd8:	f000 f8ba 	bl	81150 <__srget_r>
   80fdc:	280a      	cmp	r0, #10
   80fde:	d003      	beq.n	80fe8 <_gets_r+0x3c>
   80fe0:	1c43      	adds	r3, r0, #1
   80fe2:	d1ef      	bne.n	80fc4 <_gets_r+0x18>
   80fe4:	42a7      	cmp	r7, r4
   80fe6:	d003      	beq.n	80ff0 <_gets_r+0x44>
   80fe8:	2300      	movs	r3, #0
   80fea:	7023      	strb	r3, [r4, #0]
   80fec:	4638      	mov	r0, r7
   80fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ff0:	2000      	movs	r0, #0
   80ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ff4:	20070568 	.word	0x20070568

00080ff8 <gets>:
   80ff8:	4b02      	ldr	r3, [pc, #8]	; (81004 <gets+0xc>)
   80ffa:	4601      	mov	r1, r0
   80ffc:	6818      	ldr	r0, [r3, #0]
   80ffe:	f7ff bfd5 	b.w	80fac <_gets_r>
   81002:	bf00      	nop
   81004:	20070568 	.word	0x20070568

00081008 <__libc_init_array>:
   81008:	b570      	push	{r4, r5, r6, lr}
   8100a:	4e0f      	ldr	r6, [pc, #60]	; (81048 <__libc_init_array+0x40>)
   8100c:	4d0f      	ldr	r5, [pc, #60]	; (8104c <__libc_init_array+0x44>)
   8100e:	1b76      	subs	r6, r6, r5
   81010:	10b6      	asrs	r6, r6, #2
   81012:	bf18      	it	ne
   81014:	2400      	movne	r4, #0
   81016:	d005      	beq.n	81024 <__libc_init_array+0x1c>
   81018:	3401      	adds	r4, #1
   8101a:	f855 3b04 	ldr.w	r3, [r5], #4
   8101e:	4798      	blx	r3
   81020:	42a6      	cmp	r6, r4
   81022:	d1f9      	bne.n	81018 <__libc_init_array+0x10>
   81024:	4e0a      	ldr	r6, [pc, #40]	; (81050 <__libc_init_array+0x48>)
   81026:	4d0b      	ldr	r5, [pc, #44]	; (81054 <__libc_init_array+0x4c>)
   81028:	f003 f91a 	bl	84260 <_init>
   8102c:	1b76      	subs	r6, r6, r5
   8102e:	10b6      	asrs	r6, r6, #2
   81030:	bf18      	it	ne
   81032:	2400      	movne	r4, #0
   81034:	d006      	beq.n	81044 <__libc_init_array+0x3c>
   81036:	3401      	adds	r4, #1
   81038:	f855 3b04 	ldr.w	r3, [r5], #4
   8103c:	4798      	blx	r3
   8103e:	42a6      	cmp	r6, r4
   81040:	d1f9      	bne.n	81036 <__libc_init_array+0x2e>
   81042:	bd70      	pop	{r4, r5, r6, pc}
   81044:	bd70      	pop	{r4, r5, r6, pc}
   81046:	bf00      	nop
   81048:	0008426c 	.word	0x0008426c
   8104c:	0008426c 	.word	0x0008426c
   81050:	00084274 	.word	0x00084274
   81054:	0008426c 	.word	0x0008426c

00081058 <iprintf>:
   81058:	b40f      	push	{r0, r1, r2, r3}
   8105a:	b510      	push	{r4, lr}
   8105c:	4b07      	ldr	r3, [pc, #28]	; (8107c <iprintf+0x24>)
   8105e:	b082      	sub	sp, #8
   81060:	ac04      	add	r4, sp, #16
   81062:	f854 2b04 	ldr.w	r2, [r4], #4
   81066:	6818      	ldr	r0, [r3, #0]
   81068:	4623      	mov	r3, r4
   8106a:	6881      	ldr	r1, [r0, #8]
   8106c:	9401      	str	r4, [sp, #4]
   8106e:	f000 f989 	bl	81384 <_vfiprintf_r>
   81072:	b002      	add	sp, #8
   81074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81078:	b004      	add	sp, #16
   8107a:	4770      	bx	lr
   8107c:	20070568 	.word	0x20070568

00081080 <__itoa>:
   81080:	1e93      	subs	r3, r2, #2
   81082:	2b22      	cmp	r3, #34	; 0x22
   81084:	d810      	bhi.n	810a8 <__itoa+0x28>
   81086:	2a0a      	cmp	r2, #10
   81088:	b510      	push	{r4, lr}
   8108a:	d006      	beq.n	8109a <__itoa+0x1a>
   8108c:	2300      	movs	r3, #0
   8108e:	460c      	mov	r4, r1
   81090:	4419      	add	r1, r3
   81092:	f000 f8fb 	bl	8128c <__utoa>
   81096:	4620      	mov	r0, r4
   81098:	bd10      	pop	{r4, pc}
   8109a:	2800      	cmp	r0, #0
   8109c:	daf6      	bge.n	8108c <__itoa+0xc>
   8109e:	232d      	movs	r3, #45	; 0x2d
   810a0:	700b      	strb	r3, [r1, #0]
   810a2:	4240      	negs	r0, r0
   810a4:	2301      	movs	r3, #1
   810a6:	e7f2      	b.n	8108e <__itoa+0xe>
   810a8:	2000      	movs	r0, #0
   810aa:	7008      	strb	r0, [r1, #0]
   810ac:	4770      	bx	lr
   810ae:	bf00      	nop

000810b0 <itoa>:
   810b0:	f7ff bfe6 	b.w	81080 <__itoa>

000810b4 <memset>:
   810b4:	b470      	push	{r4, r5, r6}
   810b6:	0784      	lsls	r4, r0, #30
   810b8:	d046      	beq.n	81148 <memset+0x94>
   810ba:	1e54      	subs	r4, r2, #1
   810bc:	2a00      	cmp	r2, #0
   810be:	d041      	beq.n	81144 <memset+0x90>
   810c0:	b2cd      	uxtb	r5, r1
   810c2:	4603      	mov	r3, r0
   810c4:	e002      	b.n	810cc <memset+0x18>
   810c6:	1e62      	subs	r2, r4, #1
   810c8:	b3e4      	cbz	r4, 81144 <memset+0x90>
   810ca:	4614      	mov	r4, r2
   810cc:	f803 5b01 	strb.w	r5, [r3], #1
   810d0:	079a      	lsls	r2, r3, #30
   810d2:	d1f8      	bne.n	810c6 <memset+0x12>
   810d4:	2c03      	cmp	r4, #3
   810d6:	d92e      	bls.n	81136 <memset+0x82>
   810d8:	b2cd      	uxtb	r5, r1
   810da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   810de:	2c0f      	cmp	r4, #15
   810e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   810e4:	d919      	bls.n	8111a <memset+0x66>
   810e6:	4626      	mov	r6, r4
   810e8:	f103 0210 	add.w	r2, r3, #16
   810ec:	3e10      	subs	r6, #16
   810ee:	2e0f      	cmp	r6, #15
   810f0:	f842 5c10 	str.w	r5, [r2, #-16]
   810f4:	f842 5c0c 	str.w	r5, [r2, #-12]
   810f8:	f842 5c08 	str.w	r5, [r2, #-8]
   810fc:	f842 5c04 	str.w	r5, [r2, #-4]
   81100:	f102 0210 	add.w	r2, r2, #16
   81104:	d8f2      	bhi.n	810ec <memset+0x38>
   81106:	f1a4 0210 	sub.w	r2, r4, #16
   8110a:	f022 020f 	bic.w	r2, r2, #15
   8110e:	f004 040f 	and.w	r4, r4, #15
   81112:	3210      	adds	r2, #16
   81114:	2c03      	cmp	r4, #3
   81116:	4413      	add	r3, r2
   81118:	d90d      	bls.n	81136 <memset+0x82>
   8111a:	461e      	mov	r6, r3
   8111c:	4622      	mov	r2, r4
   8111e:	3a04      	subs	r2, #4
   81120:	2a03      	cmp	r2, #3
   81122:	f846 5b04 	str.w	r5, [r6], #4
   81126:	d8fa      	bhi.n	8111e <memset+0x6a>
   81128:	1f22      	subs	r2, r4, #4
   8112a:	f022 0203 	bic.w	r2, r2, #3
   8112e:	3204      	adds	r2, #4
   81130:	4413      	add	r3, r2
   81132:	f004 0403 	and.w	r4, r4, #3
   81136:	b12c      	cbz	r4, 81144 <memset+0x90>
   81138:	b2c9      	uxtb	r1, r1
   8113a:	441c      	add	r4, r3
   8113c:	f803 1b01 	strb.w	r1, [r3], #1
   81140:	42a3      	cmp	r3, r4
   81142:	d1fb      	bne.n	8113c <memset+0x88>
   81144:	bc70      	pop	{r4, r5, r6}
   81146:	4770      	bx	lr
   81148:	4614      	mov	r4, r2
   8114a:	4603      	mov	r3, r0
   8114c:	e7c2      	b.n	810d4 <memset+0x20>
   8114e:	bf00      	nop

00081150 <__srget_r>:
   81150:	b538      	push	{r3, r4, r5, lr}
   81152:	460c      	mov	r4, r1
   81154:	4605      	mov	r5, r0
   81156:	b108      	cbz	r0, 8115c <__srget_r+0xc>
   81158:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8115a:	b163      	cbz	r3, 81176 <__srget_r+0x26>
   8115c:	4628      	mov	r0, r5
   8115e:	4621      	mov	r1, r4
   81160:	f002 fac8 	bl	836f4 <__srefill_r>
   81164:	b950      	cbnz	r0, 8117c <__srget_r+0x2c>
   81166:	e894 000c 	ldmia.w	r4, {r2, r3}
   8116a:	3b01      	subs	r3, #1
   8116c:	1c51      	adds	r1, r2, #1
   8116e:	e884 000a 	stmia.w	r4, {r1, r3}
   81172:	7810      	ldrb	r0, [r2, #0]
   81174:	bd38      	pop	{r3, r4, r5, pc}
   81176:	f001 f907 	bl	82388 <__sinit>
   8117a:	e7ef      	b.n	8115c <__srget_r+0xc>
   8117c:	f04f 30ff 	mov.w	r0, #4294967295
   81180:	bd38      	pop	{r3, r4, r5, pc}
   81182:	bf00      	nop

00081184 <setbuf>:
   81184:	2900      	cmp	r1, #0
   81186:	bf0c      	ite	eq
   81188:	2202      	moveq	r2, #2
   8118a:	2200      	movne	r2, #0
   8118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81190:	f000 b800 	b.w	81194 <setvbuf>

00081194 <setvbuf>:
   81194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81198:	4d3a      	ldr	r5, [pc, #232]	; (81284 <setvbuf+0xf0>)
   8119a:	4604      	mov	r4, r0
   8119c:	682e      	ldr	r6, [r5, #0]
   8119e:	4690      	mov	r8, r2
   811a0:	460d      	mov	r5, r1
   811a2:	461f      	mov	r7, r3
   811a4:	b116      	cbz	r6, 811ac <setvbuf+0x18>
   811a6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   811a8:	2b00      	cmp	r3, #0
   811aa:	d03c      	beq.n	81226 <setvbuf+0x92>
   811ac:	f1b8 0f02 	cmp.w	r8, #2
   811b0:	d82f      	bhi.n	81212 <setvbuf+0x7e>
   811b2:	2f00      	cmp	r7, #0
   811b4:	db2d      	blt.n	81212 <setvbuf+0x7e>
   811b6:	4621      	mov	r1, r4
   811b8:	4630      	mov	r0, r6
   811ba:	f001 f83f 	bl	8223c <_fflush_r>
   811be:	89a1      	ldrh	r1, [r4, #12]
   811c0:	2300      	movs	r3, #0
   811c2:	6063      	str	r3, [r4, #4]
   811c4:	61a3      	str	r3, [r4, #24]
   811c6:	060b      	lsls	r3, r1, #24
   811c8:	d427      	bmi.n	8121a <setvbuf+0x86>
   811ca:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   811ce:	b289      	uxth	r1, r1
   811d0:	f1b8 0f02 	cmp.w	r8, #2
   811d4:	81a1      	strh	r1, [r4, #12]
   811d6:	d02a      	beq.n	8122e <setvbuf+0x9a>
   811d8:	2d00      	cmp	r5, #0
   811da:	d036      	beq.n	8124a <setvbuf+0xb6>
   811dc:	f1b8 0f01 	cmp.w	r8, #1
   811e0:	d011      	beq.n	81206 <setvbuf+0x72>
   811e2:	b289      	uxth	r1, r1
   811e4:	f001 0008 	and.w	r0, r1, #8
   811e8:	4b27      	ldr	r3, [pc, #156]	; (81288 <setvbuf+0xf4>)
   811ea:	b280      	uxth	r0, r0
   811ec:	63f3      	str	r3, [r6, #60]	; 0x3c
   811ee:	6025      	str	r5, [r4, #0]
   811f0:	6125      	str	r5, [r4, #16]
   811f2:	6167      	str	r7, [r4, #20]
   811f4:	b178      	cbz	r0, 81216 <setvbuf+0x82>
   811f6:	f011 0f03 	tst.w	r1, #3
   811fa:	bf18      	it	ne
   811fc:	2700      	movne	r7, #0
   811fe:	2000      	movs	r0, #0
   81200:	60a7      	str	r7, [r4, #8]
   81202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81206:	f041 0101 	orr.w	r1, r1, #1
   8120a:	427b      	negs	r3, r7
   8120c:	81a1      	strh	r1, [r4, #12]
   8120e:	61a3      	str	r3, [r4, #24]
   81210:	e7e7      	b.n	811e2 <setvbuf+0x4e>
   81212:	f04f 30ff 	mov.w	r0, #4294967295
   81216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8121a:	6921      	ldr	r1, [r4, #16]
   8121c:	4630      	mov	r0, r6
   8121e:	f001 f98b 	bl	82538 <_free_r>
   81222:	89a1      	ldrh	r1, [r4, #12]
   81224:	e7d1      	b.n	811ca <setvbuf+0x36>
   81226:	4630      	mov	r0, r6
   81228:	f001 f8ae 	bl	82388 <__sinit>
   8122c:	e7be      	b.n	811ac <setvbuf+0x18>
   8122e:	2000      	movs	r0, #0
   81230:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81234:	f041 0102 	orr.w	r1, r1, #2
   81238:	2500      	movs	r5, #0
   8123a:	2201      	movs	r2, #1
   8123c:	81a1      	strh	r1, [r4, #12]
   8123e:	60a5      	str	r5, [r4, #8]
   81240:	6023      	str	r3, [r4, #0]
   81242:	6123      	str	r3, [r4, #16]
   81244:	6162      	str	r2, [r4, #20]
   81246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8124a:	2f00      	cmp	r7, #0
   8124c:	bf08      	it	eq
   8124e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81252:	4638      	mov	r0, r7
   81254:	f001 fc9e 	bl	82b94 <malloc>
   81258:	4605      	mov	r5, r0
   8125a:	b128      	cbz	r0, 81268 <setvbuf+0xd4>
   8125c:	89a1      	ldrh	r1, [r4, #12]
   8125e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   81262:	b289      	uxth	r1, r1
   81264:	81a1      	strh	r1, [r4, #12]
   81266:	e7b9      	b.n	811dc <setvbuf+0x48>
   81268:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8126c:	f001 fc92 	bl	82b94 <malloc>
   81270:	4605      	mov	r5, r0
   81272:	b918      	cbnz	r0, 8127c <setvbuf+0xe8>
   81274:	89a1      	ldrh	r1, [r4, #12]
   81276:	f04f 30ff 	mov.w	r0, #4294967295
   8127a:	e7d9      	b.n	81230 <setvbuf+0x9c>
   8127c:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81280:	e7ec      	b.n	8125c <setvbuf+0xc8>
   81282:	bf00      	nop
   81284:	20070568 	.word	0x20070568
   81288:	0008228d 	.word	0x0008228d

0008128c <__utoa>:
   8128c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8128e:	b08b      	sub	sp, #44	; 0x2c
   81290:	466f      	mov	r7, sp
   81292:	4615      	mov	r5, r2
   81294:	f8df e070 	ldr.w	lr, [pc, #112]	; 81308 <__utoa+0x7c>
   81298:	4604      	mov	r4, r0
   8129a:	460e      	mov	r6, r1
   8129c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   812a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   812a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   812a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   812a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   812ac:	1eab      	subs	r3, r5, #2
   812ae:	f847 0b04 	str.w	r0, [r7], #4
   812b2:	2b22      	cmp	r3, #34	; 0x22
   812b4:	7039      	strb	r1, [r7, #0]
   812b6:	d822      	bhi.n	812fe <__utoa+0x72>
   812b8:	1e71      	subs	r1, r6, #1
   812ba:	4608      	mov	r0, r1
   812bc:	2300      	movs	r3, #0
   812be:	e000      	b.n	812c2 <__utoa+0x36>
   812c0:	4613      	mov	r3, r2
   812c2:	fbb4 f2f5 	udiv	r2, r4, r5
   812c6:	fb05 4412 	mls	r4, r5, r2, r4
   812ca:	af0a      	add	r7, sp, #40	; 0x28
   812cc:	443c      	add	r4, r7
   812ce:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   812d2:	4614      	mov	r4, r2
   812d4:	f800 7f01 	strb.w	r7, [r0, #1]!
   812d8:	1c5a      	adds	r2, r3, #1
   812da:	2c00      	cmp	r4, #0
   812dc:	d1f0      	bne.n	812c0 <__utoa+0x34>
   812de:	54b4      	strb	r4, [r6, r2]
   812e0:	18f2      	adds	r2, r6, r3
   812e2:	b14b      	cbz	r3, 812f8 <__utoa+0x6c>
   812e4:	3401      	adds	r4, #1
   812e6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   812ea:	7817      	ldrb	r7, [r2, #0]
   812ec:	1b18      	subs	r0, r3, r4
   812ee:	4284      	cmp	r4, r0
   812f0:	700f      	strb	r7, [r1, #0]
   812f2:	f802 5901 	strb.w	r5, [r2], #-1
   812f6:	dbf5      	blt.n	812e4 <__utoa+0x58>
   812f8:	4630      	mov	r0, r6
   812fa:	b00b      	add	sp, #44	; 0x2c
   812fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   812fe:	2000      	movs	r0, #0
   81300:	7030      	strb	r0, [r6, #0]
   81302:	b00b      	add	sp, #44	; 0x2c
   81304:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81306:	bf00      	nop
   81308:	000841e8 	.word	0x000841e8

0008130c <__sprint_r.part.0>:
   8130c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8130e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81312:	049c      	lsls	r4, r3, #18
   81314:	460f      	mov	r7, r1
   81316:	4692      	mov	sl, r2
   81318:	d52b      	bpl.n	81372 <__sprint_r.part.0+0x66>
   8131a:	6893      	ldr	r3, [r2, #8]
   8131c:	6812      	ldr	r2, [r2, #0]
   8131e:	b333      	cbz	r3, 8136e <__sprint_r.part.0+0x62>
   81320:	4680      	mov	r8, r0
   81322:	f102 0908 	add.w	r9, r2, #8
   81326:	e919 0060 	ldmdb	r9, {r5, r6}
   8132a:	08b6      	lsrs	r6, r6, #2
   8132c:	d017      	beq.n	8135e <__sprint_r.part.0+0x52>
   8132e:	3d04      	subs	r5, #4
   81330:	2400      	movs	r4, #0
   81332:	e001      	b.n	81338 <__sprint_r.part.0+0x2c>
   81334:	42a6      	cmp	r6, r4
   81336:	d010      	beq.n	8135a <__sprint_r.part.0+0x4e>
   81338:	4640      	mov	r0, r8
   8133a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8133e:	463a      	mov	r2, r7
   81340:	f001 f89a 	bl	82478 <_fputwc_r>
   81344:	1c43      	adds	r3, r0, #1
   81346:	f104 0401 	add.w	r4, r4, #1
   8134a:	d1f3      	bne.n	81334 <__sprint_r.part.0+0x28>
   8134c:	2300      	movs	r3, #0
   8134e:	f8ca 3008 	str.w	r3, [sl, #8]
   81352:	f8ca 3004 	str.w	r3, [sl, #4]
   81356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8135a:	f8da 3008 	ldr.w	r3, [sl, #8]
   8135e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   81362:	f8ca 3008 	str.w	r3, [sl, #8]
   81366:	f109 0908 	add.w	r9, r9, #8
   8136a:	2b00      	cmp	r3, #0
   8136c:	d1db      	bne.n	81326 <__sprint_r.part.0+0x1a>
   8136e:	2000      	movs	r0, #0
   81370:	e7ec      	b.n	8134c <__sprint_r.part.0+0x40>
   81372:	f001 f9b9 	bl	826e8 <__sfvwrite_r>
   81376:	2300      	movs	r3, #0
   81378:	f8ca 3008 	str.w	r3, [sl, #8]
   8137c:	f8ca 3004 	str.w	r3, [sl, #4]
   81380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081384 <_vfiprintf_r>:
   81384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81388:	b0ab      	sub	sp, #172	; 0xac
   8138a:	461c      	mov	r4, r3
   8138c:	9100      	str	r1, [sp, #0]
   8138e:	4693      	mov	fp, r2
   81390:	9304      	str	r3, [sp, #16]
   81392:	9001      	str	r0, [sp, #4]
   81394:	b118      	cbz	r0, 8139e <_vfiprintf_r+0x1a>
   81396:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81398:	2b00      	cmp	r3, #0
   8139a:	f000 80e3 	beq.w	81564 <_vfiprintf_r+0x1e0>
   8139e:	9b00      	ldr	r3, [sp, #0]
   813a0:	8999      	ldrh	r1, [r3, #12]
   813a2:	b28a      	uxth	r2, r1
   813a4:	0490      	lsls	r0, r2, #18
   813a6:	d408      	bmi.n	813ba <_vfiprintf_r+0x36>
   813a8:	4618      	mov	r0, r3
   813aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   813ac:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   813b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   813b4:	8182      	strh	r2, [r0, #12]
   813b6:	6643      	str	r3, [r0, #100]	; 0x64
   813b8:	b292      	uxth	r2, r2
   813ba:	0711      	lsls	r1, r2, #28
   813bc:	f140 80b2 	bpl.w	81524 <_vfiprintf_r+0x1a0>
   813c0:	9b00      	ldr	r3, [sp, #0]
   813c2:	691b      	ldr	r3, [r3, #16]
   813c4:	2b00      	cmp	r3, #0
   813c6:	f000 80ad 	beq.w	81524 <_vfiprintf_r+0x1a0>
   813ca:	f002 021a 	and.w	r2, r2, #26
   813ce:	2a0a      	cmp	r2, #10
   813d0:	f000 80b4 	beq.w	8153c <_vfiprintf_r+0x1b8>
   813d4:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   813d8:	4654      	mov	r4, sl
   813da:	2300      	movs	r3, #0
   813dc:	9309      	str	r3, [sp, #36]	; 0x24
   813de:	9302      	str	r3, [sp, #8]
   813e0:	930f      	str	r3, [sp, #60]	; 0x3c
   813e2:	930e      	str	r3, [sp, #56]	; 0x38
   813e4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   813e8:	f89b 3000 	ldrb.w	r3, [fp]
   813ec:	2b00      	cmp	r3, #0
   813ee:	f000 84a3 	beq.w	81d38 <_vfiprintf_r+0x9b4>
   813f2:	2b25      	cmp	r3, #37	; 0x25
   813f4:	f000 84a0 	beq.w	81d38 <_vfiprintf_r+0x9b4>
   813f8:	465a      	mov	r2, fp
   813fa:	e001      	b.n	81400 <_vfiprintf_r+0x7c>
   813fc:	2b25      	cmp	r3, #37	; 0x25
   813fe:	d003      	beq.n	81408 <_vfiprintf_r+0x84>
   81400:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   81404:	2b00      	cmp	r3, #0
   81406:	d1f9      	bne.n	813fc <_vfiprintf_r+0x78>
   81408:	ebcb 0602 	rsb	r6, fp, r2
   8140c:	4615      	mov	r5, r2
   8140e:	b196      	cbz	r6, 81436 <_vfiprintf_r+0xb2>
   81410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81412:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81414:	3301      	adds	r3, #1
   81416:	4432      	add	r2, r6
   81418:	2b07      	cmp	r3, #7
   8141a:	f8c4 b000 	str.w	fp, [r4]
   8141e:	6066      	str	r6, [r4, #4]
   81420:	920f      	str	r2, [sp, #60]	; 0x3c
   81422:	930e      	str	r3, [sp, #56]	; 0x38
   81424:	dd79      	ble.n	8151a <_vfiprintf_r+0x196>
   81426:	2a00      	cmp	r2, #0
   81428:	f040 84ad 	bne.w	81d86 <_vfiprintf_r+0xa02>
   8142c:	4654      	mov	r4, sl
   8142e:	9b02      	ldr	r3, [sp, #8]
   81430:	920e      	str	r2, [sp, #56]	; 0x38
   81432:	4433      	add	r3, r6
   81434:	9302      	str	r3, [sp, #8]
   81436:	782b      	ldrb	r3, [r5, #0]
   81438:	2b00      	cmp	r3, #0
   8143a:	f000 835f 	beq.w	81afc <_vfiprintf_r+0x778>
   8143e:	f04f 0300 	mov.w	r3, #0
   81442:	2100      	movs	r1, #0
   81444:	f04f 3cff 	mov.w	ip, #4294967295
   81448:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8144c:	1c68      	adds	r0, r5, #1
   8144e:	786b      	ldrb	r3, [r5, #1]
   81450:	4688      	mov	r8, r1
   81452:	460d      	mov	r5, r1
   81454:	4666      	mov	r6, ip
   81456:	f100 0b01 	add.w	fp, r0, #1
   8145a:	f1a3 0220 	sub.w	r2, r3, #32
   8145e:	2a58      	cmp	r2, #88	; 0x58
   81460:	f200 82aa 	bhi.w	819b8 <_vfiprintf_r+0x634>
   81464:	e8df f012 	tbh	[pc, r2, lsl #1]
   81468:	02a8029a 	.word	0x02a8029a
   8146c:	02a202a8 	.word	0x02a202a8
   81470:	02a802a8 	.word	0x02a802a8
   81474:	02a802a8 	.word	0x02a802a8
   81478:	02a802a8 	.word	0x02a802a8
   8147c:	02600254 	.word	0x02600254
   81480:	010d02a8 	.word	0x010d02a8
   81484:	02a8026c 	.word	0x02a8026c
   81488:	012f0129 	.word	0x012f0129
   8148c:	012f012f 	.word	0x012f012f
   81490:	012f012f 	.word	0x012f012f
   81494:	012f012f 	.word	0x012f012f
   81498:	012f012f 	.word	0x012f012f
   8149c:	02a802a8 	.word	0x02a802a8
   814a0:	02a802a8 	.word	0x02a802a8
   814a4:	02a802a8 	.word	0x02a802a8
   814a8:	02a802a8 	.word	0x02a802a8
   814ac:	02a802a8 	.word	0x02a802a8
   814b0:	02a8013d 	.word	0x02a8013d
   814b4:	02a802a8 	.word	0x02a802a8
   814b8:	02a802a8 	.word	0x02a802a8
   814bc:	02a802a8 	.word	0x02a802a8
   814c0:	02a802a8 	.word	0x02a802a8
   814c4:	017402a8 	.word	0x017402a8
   814c8:	02a802a8 	.word	0x02a802a8
   814cc:	02a802a8 	.word	0x02a802a8
   814d0:	018b02a8 	.word	0x018b02a8
   814d4:	02a802a8 	.word	0x02a802a8
   814d8:	02a801a3 	.word	0x02a801a3
   814dc:	02a802a8 	.word	0x02a802a8
   814e0:	02a802a8 	.word	0x02a802a8
   814e4:	02a802a8 	.word	0x02a802a8
   814e8:	02a802a8 	.word	0x02a802a8
   814ec:	01c702a8 	.word	0x01c702a8
   814f0:	02a801da 	.word	0x02a801da
   814f4:	02a802a8 	.word	0x02a802a8
   814f8:	01da0123 	.word	0x01da0123
   814fc:	02a802a8 	.word	0x02a802a8
   81500:	02a8024b 	.word	0x02a8024b
   81504:	01130288 	.word	0x01130288
   81508:	020701f4 	.word	0x020701f4
   8150c:	020d02a8 	.word	0x020d02a8
   81510:	008102a8 	.word	0x008102a8
   81514:	02a802a8 	.word	0x02a802a8
   81518:	0232      	.short	0x0232
   8151a:	3408      	adds	r4, #8
   8151c:	9b02      	ldr	r3, [sp, #8]
   8151e:	4433      	add	r3, r6
   81520:	9302      	str	r3, [sp, #8]
   81522:	e788      	b.n	81436 <_vfiprintf_r+0xb2>
   81524:	9801      	ldr	r0, [sp, #4]
   81526:	9900      	ldr	r1, [sp, #0]
   81528:	f000 fd72 	bl	82010 <__swsetup_r>
   8152c:	b9a8      	cbnz	r0, 8155a <_vfiprintf_r+0x1d6>
   8152e:	9b00      	ldr	r3, [sp, #0]
   81530:	899a      	ldrh	r2, [r3, #12]
   81532:	f002 021a 	and.w	r2, r2, #26
   81536:	2a0a      	cmp	r2, #10
   81538:	f47f af4c 	bne.w	813d4 <_vfiprintf_r+0x50>
   8153c:	9b00      	ldr	r3, [sp, #0]
   8153e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   81542:	2b00      	cmp	r3, #0
   81544:	f6ff af46 	blt.w	813d4 <_vfiprintf_r+0x50>
   81548:	9801      	ldr	r0, [sp, #4]
   8154a:	9900      	ldr	r1, [sp, #0]
   8154c:	465a      	mov	r2, fp
   8154e:	4623      	mov	r3, r4
   81550:	f000 fd20 	bl	81f94 <__sbprintf>
   81554:	b02b      	add	sp, #172	; 0xac
   81556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8155a:	f04f 30ff 	mov.w	r0, #4294967295
   8155e:	b02b      	add	sp, #172	; 0xac
   81560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81564:	f000 ff10 	bl	82388 <__sinit>
   81568:	e719      	b.n	8139e <_vfiprintf_r+0x1a>
   8156a:	f018 0f20 	tst.w	r8, #32
   8156e:	9503      	str	r5, [sp, #12]
   81570:	46b4      	mov	ip, r6
   81572:	f000 810c 	beq.w	8178e <_vfiprintf_r+0x40a>
   81576:	9b04      	ldr	r3, [sp, #16]
   81578:	3307      	adds	r3, #7
   8157a:	f023 0307 	bic.w	r3, r3, #7
   8157e:	f103 0208 	add.w	r2, r3, #8
   81582:	e9d3 6700 	ldrd	r6, r7, [r3]
   81586:	9204      	str	r2, [sp, #16]
   81588:	2301      	movs	r3, #1
   8158a:	f04f 0200 	mov.w	r2, #0
   8158e:	46e1      	mov	r9, ip
   81590:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   81594:	2500      	movs	r5, #0
   81596:	f1bc 0f00 	cmp.w	ip, #0
   8159a:	bfa8      	it	ge
   8159c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   815a0:	ea56 0207 	orrs.w	r2, r6, r7
   815a4:	f040 80c4 	bne.w	81730 <_vfiprintf_r+0x3ac>
   815a8:	f1bc 0f00 	cmp.w	ip, #0
   815ac:	f000 8380 	beq.w	81cb0 <_vfiprintf_r+0x92c>
   815b0:	2b01      	cmp	r3, #1
   815b2:	f000 80c5 	beq.w	81740 <_vfiprintf_r+0x3bc>
   815b6:	2b02      	cmp	r3, #2
   815b8:	f000 8386 	beq.w	81cc8 <_vfiprintf_r+0x944>
   815bc:	4651      	mov	r1, sl
   815be:	08f2      	lsrs	r2, r6, #3
   815c0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   815c4:	08f8      	lsrs	r0, r7, #3
   815c6:	f006 0307 	and.w	r3, r6, #7
   815ca:	4607      	mov	r7, r0
   815cc:	4616      	mov	r6, r2
   815ce:	3330      	adds	r3, #48	; 0x30
   815d0:	ea56 0207 	orrs.w	r2, r6, r7
   815d4:	f801 3d01 	strb.w	r3, [r1, #-1]!
   815d8:	d1f1      	bne.n	815be <_vfiprintf_r+0x23a>
   815da:	f018 0f01 	tst.w	r8, #1
   815de:	9107      	str	r1, [sp, #28]
   815e0:	f040 83fa 	bne.w	81dd8 <_vfiprintf_r+0xa54>
   815e4:	ebc1 090a 	rsb	r9, r1, sl
   815e8:	45e1      	cmp	r9, ip
   815ea:	464e      	mov	r6, r9
   815ec:	bfb8      	it	lt
   815ee:	4666      	movlt	r6, ip
   815f0:	b105      	cbz	r5, 815f4 <_vfiprintf_r+0x270>
   815f2:	3601      	adds	r6, #1
   815f4:	f018 0302 	ands.w	r3, r8, #2
   815f8:	9305      	str	r3, [sp, #20]
   815fa:	bf18      	it	ne
   815fc:	3602      	addne	r6, #2
   815fe:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   81602:	9306      	str	r3, [sp, #24]
   81604:	f040 81f9 	bne.w	819fa <_vfiprintf_r+0x676>
   81608:	9b03      	ldr	r3, [sp, #12]
   8160a:	1b9d      	subs	r5, r3, r6
   8160c:	2d00      	cmp	r5, #0
   8160e:	f340 81f4 	ble.w	819fa <_vfiprintf_r+0x676>
   81612:	2d10      	cmp	r5, #16
   81614:	f340 848a 	ble.w	81f2c <_vfiprintf_r+0xba8>
   81618:	4620      	mov	r0, r4
   8161a:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   8161e:	4664      	mov	r4, ip
   81620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81622:	4fc4      	ldr	r7, [pc, #784]	; (81934 <_vfiprintf_r+0x5b0>)
   81624:	2310      	movs	r3, #16
   81626:	4671      	mov	r1, lr
   81628:	4684      	mov	ip, r0
   8162a:	e007      	b.n	8163c <_vfiprintf_r+0x2b8>
   8162c:	f101 0e02 	add.w	lr, r1, #2
   81630:	4601      	mov	r1, r0
   81632:	f10c 0c08 	add.w	ip, ip, #8
   81636:	3d10      	subs	r5, #16
   81638:	2d10      	cmp	r5, #16
   8163a:	dd13      	ble.n	81664 <_vfiprintf_r+0x2e0>
   8163c:	1c48      	adds	r0, r1, #1
   8163e:	3210      	adds	r2, #16
   81640:	2807      	cmp	r0, #7
   81642:	920f      	str	r2, [sp, #60]	; 0x3c
   81644:	f8cc 7000 	str.w	r7, [ip]
   81648:	f8cc 3004 	str.w	r3, [ip, #4]
   8164c:	900e      	str	r0, [sp, #56]	; 0x38
   8164e:	dded      	ble.n	8162c <_vfiprintf_r+0x2a8>
   81650:	2a00      	cmp	r2, #0
   81652:	f040 81c2 	bne.w	819da <_vfiprintf_r+0x656>
   81656:	3d10      	subs	r5, #16
   81658:	2d10      	cmp	r5, #16
   8165a:	4611      	mov	r1, r2
   8165c:	f04f 0e01 	mov.w	lr, #1
   81660:	46d4      	mov	ip, sl
   81662:	dceb      	bgt.n	8163c <_vfiprintf_r+0x2b8>
   81664:	4663      	mov	r3, ip
   81666:	4671      	mov	r1, lr
   81668:	46a4      	mov	ip, r4
   8166a:	461c      	mov	r4, r3
   8166c:	442a      	add	r2, r5
   8166e:	2907      	cmp	r1, #7
   81670:	920f      	str	r2, [sp, #60]	; 0x3c
   81672:	6027      	str	r7, [r4, #0]
   81674:	6065      	str	r5, [r4, #4]
   81676:	910e      	str	r1, [sp, #56]	; 0x38
   81678:	f300 8346 	bgt.w	81d08 <_vfiprintf_r+0x984>
   8167c:	3408      	adds	r4, #8
   8167e:	1c48      	adds	r0, r1, #1
   81680:	e1be      	b.n	81a00 <_vfiprintf_r+0x67c>
   81682:	4658      	mov	r0, fp
   81684:	f048 0804 	orr.w	r8, r8, #4
   81688:	f89b 3000 	ldrb.w	r3, [fp]
   8168c:	e6e3      	b.n	81456 <_vfiprintf_r+0xd2>
   8168e:	f018 0320 	ands.w	r3, r8, #32
   81692:	9503      	str	r5, [sp, #12]
   81694:	46b4      	mov	ip, r6
   81696:	d062      	beq.n	8175e <_vfiprintf_r+0x3da>
   81698:	9b04      	ldr	r3, [sp, #16]
   8169a:	3307      	adds	r3, #7
   8169c:	f023 0307 	bic.w	r3, r3, #7
   816a0:	f103 0208 	add.w	r2, r3, #8
   816a4:	e9d3 6700 	ldrd	r6, r7, [r3]
   816a8:	9204      	str	r2, [sp, #16]
   816aa:	2300      	movs	r3, #0
   816ac:	e76d      	b.n	8158a <_vfiprintf_r+0x206>
   816ae:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   816b2:	f89b 3000 	ldrb.w	r3, [fp]
   816b6:	4658      	mov	r0, fp
   816b8:	e6cd      	b.n	81456 <_vfiprintf_r+0xd2>
   816ba:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   816be:	f89b 3000 	ldrb.w	r3, [fp]
   816c2:	4658      	mov	r0, fp
   816c4:	e6c7      	b.n	81456 <_vfiprintf_r+0xd2>
   816c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816ca:	2500      	movs	r5, #0
   816cc:	f81b 3b01 	ldrb.w	r3, [fp], #1
   816d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   816d4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   816d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816dc:	2a09      	cmp	r2, #9
   816de:	d9f5      	bls.n	816cc <_vfiprintf_r+0x348>
   816e0:	e6bb      	b.n	8145a <_vfiprintf_r+0xd6>
   816e2:	f048 0810 	orr.w	r8, r8, #16
   816e6:	f018 0f20 	tst.w	r8, #32
   816ea:	9503      	str	r5, [sp, #12]
   816ec:	46b4      	mov	ip, r6
   816ee:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   816f2:	f000 809b 	beq.w	8182c <_vfiprintf_r+0x4a8>
   816f6:	9904      	ldr	r1, [sp, #16]
   816f8:	3107      	adds	r1, #7
   816fa:	f021 0107 	bic.w	r1, r1, #7
   816fe:	e9d1 2300 	ldrd	r2, r3, [r1]
   81702:	4616      	mov	r6, r2
   81704:	461f      	mov	r7, r3
   81706:	3108      	adds	r1, #8
   81708:	9104      	str	r1, [sp, #16]
   8170a:	2a00      	cmp	r2, #0
   8170c:	f173 0300 	sbcs.w	r3, r3, #0
   81710:	f2c0 83a4 	blt.w	81e5c <_vfiprintf_r+0xad8>
   81714:	f1bc 0f00 	cmp.w	ip, #0
   81718:	bfa8      	it	ge
   8171a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   8171e:	ea56 0207 	orrs.w	r2, r6, r7
   81722:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81726:	46e1      	mov	r9, ip
   81728:	f04f 0301 	mov.w	r3, #1
   8172c:	f43f af3c 	beq.w	815a8 <_vfiprintf_r+0x224>
   81730:	2b01      	cmp	r3, #1
   81732:	f47f af40 	bne.w	815b6 <_vfiprintf_r+0x232>
   81736:	2f00      	cmp	r7, #0
   81738:	bf08      	it	eq
   8173a:	2e0a      	cmpeq	r6, #10
   8173c:	f080 8332 	bcs.w	81da4 <_vfiprintf_r+0xa20>
   81740:	ab2a      	add	r3, sp, #168	; 0xa8
   81742:	3630      	adds	r6, #48	; 0x30
   81744:	f803 6d41 	strb.w	r6, [r3, #-65]!
   81748:	ebc3 090a 	rsb	r9, r3, sl
   8174c:	9307      	str	r3, [sp, #28]
   8174e:	e74b      	b.n	815e8 <_vfiprintf_r+0x264>
   81750:	f048 0810 	orr.w	r8, r8, #16
   81754:	f018 0320 	ands.w	r3, r8, #32
   81758:	9503      	str	r5, [sp, #12]
   8175a:	46b4      	mov	ip, r6
   8175c:	d19c      	bne.n	81698 <_vfiprintf_r+0x314>
   8175e:	f018 0210 	ands.w	r2, r8, #16
   81762:	f040 82f7 	bne.w	81d54 <_vfiprintf_r+0x9d0>
   81766:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   8176a:	f000 82f3 	beq.w	81d54 <_vfiprintf_r+0x9d0>
   8176e:	9904      	ldr	r1, [sp, #16]
   81770:	4613      	mov	r3, r2
   81772:	460a      	mov	r2, r1
   81774:	3204      	adds	r2, #4
   81776:	880e      	ldrh	r6, [r1, #0]
   81778:	2700      	movs	r7, #0
   8177a:	9204      	str	r2, [sp, #16]
   8177c:	e705      	b.n	8158a <_vfiprintf_r+0x206>
   8177e:	f048 0810 	orr.w	r8, r8, #16
   81782:	f018 0f20 	tst.w	r8, #32
   81786:	9503      	str	r5, [sp, #12]
   81788:	46b4      	mov	ip, r6
   8178a:	f47f aef4 	bne.w	81576 <_vfiprintf_r+0x1f2>
   8178e:	9a04      	ldr	r2, [sp, #16]
   81790:	f018 0f10 	tst.w	r8, #16
   81794:	4613      	mov	r3, r2
   81796:	f040 82e4 	bne.w	81d62 <_vfiprintf_r+0x9de>
   8179a:	f018 0f40 	tst.w	r8, #64	; 0x40
   8179e:	f000 82e0 	beq.w	81d62 <_vfiprintf_r+0x9de>
   817a2:	8816      	ldrh	r6, [r2, #0]
   817a4:	3204      	adds	r2, #4
   817a6:	2700      	movs	r7, #0
   817a8:	2301      	movs	r3, #1
   817aa:	9204      	str	r2, [sp, #16]
   817ac:	e6ed      	b.n	8158a <_vfiprintf_r+0x206>
   817ae:	4a62      	ldr	r2, [pc, #392]	; (81938 <_vfiprintf_r+0x5b4>)
   817b0:	f018 0f20 	tst.w	r8, #32
   817b4:	9503      	str	r5, [sp, #12]
   817b6:	46b4      	mov	ip, r6
   817b8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   817bc:	9209      	str	r2, [sp, #36]	; 0x24
   817be:	f000 808f 	beq.w	818e0 <_vfiprintf_r+0x55c>
   817c2:	9a04      	ldr	r2, [sp, #16]
   817c4:	3207      	adds	r2, #7
   817c6:	f022 0207 	bic.w	r2, r2, #7
   817ca:	f102 0108 	add.w	r1, r2, #8
   817ce:	9104      	str	r1, [sp, #16]
   817d0:	e9d2 6700 	ldrd	r6, r7, [r2]
   817d4:	f018 0f01 	tst.w	r8, #1
   817d8:	f000 828f 	beq.w	81cfa <_vfiprintf_r+0x976>
   817dc:	ea56 0207 	orrs.w	r2, r6, r7
   817e0:	f000 828b 	beq.w	81cfa <_vfiprintf_r+0x976>
   817e4:	2230      	movs	r2, #48	; 0x30
   817e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   817ea:	f048 0802 	orr.w	r8, r8, #2
   817ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   817f2:	2302      	movs	r3, #2
   817f4:	e6c9      	b.n	8158a <_vfiprintf_r+0x206>
   817f6:	9a04      	ldr	r2, [sp, #16]
   817f8:	2601      	movs	r6, #1
   817fa:	6813      	ldr	r3, [r2, #0]
   817fc:	f04f 0100 	mov.w	r1, #0
   81800:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81804:	4613      	mov	r3, r2
   81806:	46b1      	mov	r9, r6
   81808:	3304      	adds	r3, #4
   8180a:	9304      	str	r3, [sp, #16]
   8180c:	ab10      	add	r3, sp, #64	; 0x40
   8180e:	9503      	str	r5, [sp, #12]
   81810:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81814:	9307      	str	r3, [sp, #28]
   81816:	f04f 0c00 	mov.w	ip, #0
   8181a:	e6eb      	b.n	815f4 <_vfiprintf_r+0x270>
   8181c:	f018 0f20 	tst.w	r8, #32
   81820:	9503      	str	r5, [sp, #12]
   81822:	46b4      	mov	ip, r6
   81824:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81828:	f47f af65 	bne.w	816f6 <_vfiprintf_r+0x372>
   8182c:	9a04      	ldr	r2, [sp, #16]
   8182e:	f018 0f10 	tst.w	r8, #16
   81832:	4613      	mov	r3, r2
   81834:	f040 82a0 	bne.w	81d78 <_vfiprintf_r+0x9f4>
   81838:	f018 0f40 	tst.w	r8, #64	; 0x40
   8183c:	f000 829c 	beq.w	81d78 <_vfiprintf_r+0x9f4>
   81840:	f9b2 6000 	ldrsh.w	r6, [r2]
   81844:	3304      	adds	r3, #4
   81846:	17f7      	asrs	r7, r6, #31
   81848:	9304      	str	r3, [sp, #16]
   8184a:	4632      	mov	r2, r6
   8184c:	463b      	mov	r3, r7
   8184e:	e75c      	b.n	8170a <_vfiprintf_r+0x386>
   81850:	9904      	ldr	r1, [sp, #16]
   81852:	2378      	movs	r3, #120	; 0x78
   81854:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81858:	4b38      	ldr	r3, [pc, #224]	; (8193c <_vfiprintf_r+0x5b8>)
   8185a:	46b4      	mov	ip, r6
   8185c:	2230      	movs	r2, #48	; 0x30
   8185e:	680e      	ldr	r6, [r1, #0]
   81860:	3104      	adds	r1, #4
   81862:	9309      	str	r3, [sp, #36]	; 0x24
   81864:	9503      	str	r5, [sp, #12]
   81866:	f048 0802 	orr.w	r8, r8, #2
   8186a:	9104      	str	r1, [sp, #16]
   8186c:	2700      	movs	r7, #0
   8186e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   81872:	2302      	movs	r3, #2
   81874:	e689      	b.n	8158a <_vfiprintf_r+0x206>
   81876:	f048 0820 	orr.w	r8, r8, #32
   8187a:	f89b 3000 	ldrb.w	r3, [fp]
   8187e:	4658      	mov	r0, fp
   81880:	e5e9      	b.n	81456 <_vfiprintf_r+0xd2>
   81882:	f04f 0100 	mov.w	r1, #0
   81886:	9a04      	ldr	r2, [sp, #16]
   81888:	9503      	str	r5, [sp, #12]
   8188a:	6813      	ldr	r3, [r2, #0]
   8188c:	46b4      	mov	ip, r6
   8188e:	9307      	str	r3, [sp, #28]
   81890:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81894:	1d15      	adds	r5, r2, #4
   81896:	2b00      	cmp	r3, #0
   81898:	f000 834e 	beq.w	81f38 <_vfiprintf_r+0xbb4>
   8189c:	2e00      	cmp	r6, #0
   8189e:	f2c0 8329 	blt.w	81ef4 <_vfiprintf_r+0xb70>
   818a2:	9e07      	ldr	r6, [sp, #28]
   818a4:	4662      	mov	r2, ip
   818a6:	4630      	mov	r0, r6
   818a8:	2100      	movs	r1, #0
   818aa:	f8cd c010 	str.w	ip, [sp, #16]
   818ae:	f001 fbff 	bl	830b0 <memchr>
   818b2:	f8dd c010 	ldr.w	ip, [sp, #16]
   818b6:	2800      	cmp	r0, #0
   818b8:	f000 834e 	beq.w	81f58 <_vfiprintf_r+0xbd4>
   818bc:	9504      	str	r5, [sp, #16]
   818be:	ebc6 0900 	rsb	r9, r6, r0
   818c2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   818c6:	f04f 0c00 	mov.w	ip, #0
   818ca:	e68d      	b.n	815e8 <_vfiprintf_r+0x264>
   818cc:	4a1b      	ldr	r2, [pc, #108]	; (8193c <_vfiprintf_r+0x5b8>)
   818ce:	f018 0f20 	tst.w	r8, #32
   818d2:	9503      	str	r5, [sp, #12]
   818d4:	46b4      	mov	ip, r6
   818d6:	9209      	str	r2, [sp, #36]	; 0x24
   818d8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   818dc:	f47f af71 	bne.w	817c2 <_vfiprintf_r+0x43e>
   818e0:	9904      	ldr	r1, [sp, #16]
   818e2:	f018 0f10 	tst.w	r8, #16
   818e6:	460a      	mov	r2, r1
   818e8:	f040 8241 	bne.w	81d6e <_vfiprintf_r+0x9ea>
   818ec:	f018 0f40 	tst.w	r8, #64	; 0x40
   818f0:	f000 823d 	beq.w	81d6e <_vfiprintf_r+0x9ea>
   818f4:	3204      	adds	r2, #4
   818f6:	880e      	ldrh	r6, [r1, #0]
   818f8:	2700      	movs	r7, #0
   818fa:	9204      	str	r2, [sp, #16]
   818fc:	e76a      	b.n	817d4 <_vfiprintf_r+0x450>
   818fe:	f89b 3000 	ldrb.w	r3, [fp]
   81902:	2b6c      	cmp	r3, #108	; 0x6c
   81904:	f000 82e9 	beq.w	81eda <_vfiprintf_r+0xb56>
   81908:	f048 0810 	orr.w	r8, r8, #16
   8190c:	4658      	mov	r0, fp
   8190e:	e5a2      	b.n	81456 <_vfiprintf_r+0xd2>
   81910:	9a04      	ldr	r2, [sp, #16]
   81912:	4613      	mov	r3, r2
   81914:	6815      	ldr	r5, [r2, #0]
   81916:	3304      	adds	r3, #4
   81918:	2d00      	cmp	r5, #0
   8191a:	f2c0 82e6 	blt.w	81eea <_vfiprintf_r+0xb66>
   8191e:	9304      	str	r3, [sp, #16]
   81920:	f89b 3000 	ldrb.w	r3, [fp]
   81924:	4658      	mov	r0, fp
   81926:	e596      	b.n	81456 <_vfiprintf_r+0xd2>
   81928:	f89b 3000 	ldrb.w	r3, [fp]
   8192c:	4658      	mov	r0, fp
   8192e:	212b      	movs	r1, #43	; 0x2b
   81930:	e591      	b.n	81456 <_vfiprintf_r+0xd2>
   81932:	bf00      	nop
   81934:	00084250 	.word	0x00084250
   81938:	00084220 	.word	0x00084220
   8193c:	00084234 	.word	0x00084234
   81940:	f89b 3000 	ldrb.w	r3, [fp]
   81944:	f10b 0001 	add.w	r0, fp, #1
   81948:	2b2a      	cmp	r3, #42	; 0x2a
   8194a:	f000 830f 	beq.w	81f6c <_vfiprintf_r+0xbe8>
   8194e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81952:	2a09      	cmp	r2, #9
   81954:	4683      	mov	fp, r0
   81956:	f04f 0600 	mov.w	r6, #0
   8195a:	f63f ad7e 	bhi.w	8145a <_vfiprintf_r+0xd6>
   8195e:	f81b 3b01 	ldrb.w	r3, [fp], #1
   81962:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81966:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   8196a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8196e:	2a09      	cmp	r2, #9
   81970:	d9f5      	bls.n	8195e <_vfiprintf_r+0x5da>
   81972:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   81976:	e570      	b.n	8145a <_vfiprintf_r+0xd6>
   81978:	f018 0f20 	tst.w	r8, #32
   8197c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81980:	f000 8283 	beq.w	81e8a <_vfiprintf_r+0xb06>
   81984:	9a04      	ldr	r2, [sp, #16]
   81986:	4613      	mov	r3, r2
   81988:	3304      	adds	r3, #4
   8198a:	9304      	str	r3, [sp, #16]
   8198c:	9b02      	ldr	r3, [sp, #8]
   8198e:	6811      	ldr	r1, [r2, #0]
   81990:	17df      	asrs	r7, r3, #31
   81992:	461a      	mov	r2, r3
   81994:	463b      	mov	r3, r7
   81996:	e9c1 2300 	strd	r2, r3, [r1]
   8199a:	e525      	b.n	813e8 <_vfiprintf_r+0x64>
   8199c:	4658      	mov	r0, fp
   8199e:	f89b 3000 	ldrb.w	r3, [fp]
   819a2:	2900      	cmp	r1, #0
   819a4:	f47f ad57 	bne.w	81456 <_vfiprintf_r+0xd2>
   819a8:	2120      	movs	r1, #32
   819aa:	e554      	b.n	81456 <_vfiprintf_r+0xd2>
   819ac:	f048 0801 	orr.w	r8, r8, #1
   819b0:	4658      	mov	r0, fp
   819b2:	f89b 3000 	ldrb.w	r3, [fp]
   819b6:	e54e      	b.n	81456 <_vfiprintf_r+0xd2>
   819b8:	9503      	str	r5, [sp, #12]
   819ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   819be:	2b00      	cmp	r3, #0
   819c0:	f000 809c 	beq.w	81afc <_vfiprintf_r+0x778>
   819c4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   819c8:	f04f 0300 	mov.w	r3, #0
   819cc:	2601      	movs	r6, #1
   819ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   819d2:	ab10      	add	r3, sp, #64	; 0x40
   819d4:	46b1      	mov	r9, r6
   819d6:	9307      	str	r3, [sp, #28]
   819d8:	e71d      	b.n	81816 <_vfiprintf_r+0x492>
   819da:	9801      	ldr	r0, [sp, #4]
   819dc:	9900      	ldr	r1, [sp, #0]
   819de:	aa0d      	add	r2, sp, #52	; 0x34
   819e0:	9308      	str	r3, [sp, #32]
   819e2:	f7ff fc93 	bl	8130c <__sprint_r.part.0>
   819e6:	2800      	cmp	r0, #0
   819e8:	f040 808f 	bne.w	81b0a <_vfiprintf_r+0x786>
   819ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   819ee:	46d4      	mov	ip, sl
   819f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   819f2:	f101 0e01 	add.w	lr, r1, #1
   819f6:	9b08      	ldr	r3, [sp, #32]
   819f8:	e61d      	b.n	81636 <_vfiprintf_r+0x2b2>
   819fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   819fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   819fe:	1c48      	adds	r0, r1, #1
   81a00:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81a04:	b16b      	cbz	r3, 81a22 <_vfiprintf_r+0x69e>
   81a06:	3201      	adds	r2, #1
   81a08:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   81a0c:	2101      	movs	r1, #1
   81a0e:	2807      	cmp	r0, #7
   81a10:	920f      	str	r2, [sp, #60]	; 0x3c
   81a12:	900e      	str	r0, [sp, #56]	; 0x38
   81a14:	6023      	str	r3, [r4, #0]
   81a16:	6061      	str	r1, [r4, #4]
   81a18:	f300 8134 	bgt.w	81c84 <_vfiprintf_r+0x900>
   81a1c:	4601      	mov	r1, r0
   81a1e:	3408      	adds	r4, #8
   81a20:	3001      	adds	r0, #1
   81a22:	9b05      	ldr	r3, [sp, #20]
   81a24:	b163      	cbz	r3, 81a40 <_vfiprintf_r+0x6bc>
   81a26:	3202      	adds	r2, #2
   81a28:	a90c      	add	r1, sp, #48	; 0x30
   81a2a:	2302      	movs	r3, #2
   81a2c:	2807      	cmp	r0, #7
   81a2e:	920f      	str	r2, [sp, #60]	; 0x3c
   81a30:	900e      	str	r0, [sp, #56]	; 0x38
   81a32:	e884 000a 	stmia.w	r4, {r1, r3}
   81a36:	f300 8134 	bgt.w	81ca2 <_vfiprintf_r+0x91e>
   81a3a:	4601      	mov	r1, r0
   81a3c:	3408      	adds	r4, #8
   81a3e:	3001      	adds	r0, #1
   81a40:	9b06      	ldr	r3, [sp, #24]
   81a42:	2b80      	cmp	r3, #128	; 0x80
   81a44:	f000 80d4 	beq.w	81bf0 <_vfiprintf_r+0x86c>
   81a48:	ebc9 070c 	rsb	r7, r9, ip
   81a4c:	2f00      	cmp	r7, #0
   81a4e:	dd2b      	ble.n	81aa8 <_vfiprintf_r+0x724>
   81a50:	2f10      	cmp	r7, #16
   81a52:	4dab      	ldr	r5, [pc, #684]	; (81d00 <_vfiprintf_r+0x97c>)
   81a54:	dd1f      	ble.n	81a96 <_vfiprintf_r+0x712>
   81a56:	46a6      	mov	lr, r4
   81a58:	2310      	movs	r3, #16
   81a5a:	9c01      	ldr	r4, [sp, #4]
   81a5c:	e007      	b.n	81a6e <_vfiprintf_r+0x6ea>
   81a5e:	f101 0c02 	add.w	ip, r1, #2
   81a62:	4601      	mov	r1, r0
   81a64:	f10e 0e08 	add.w	lr, lr, #8
   81a68:	3f10      	subs	r7, #16
   81a6a:	2f10      	cmp	r7, #16
   81a6c:	dd11      	ble.n	81a92 <_vfiprintf_r+0x70e>
   81a6e:	1c48      	adds	r0, r1, #1
   81a70:	3210      	adds	r2, #16
   81a72:	2807      	cmp	r0, #7
   81a74:	920f      	str	r2, [sp, #60]	; 0x3c
   81a76:	f8ce 5000 	str.w	r5, [lr]
   81a7a:	f8ce 3004 	str.w	r3, [lr, #4]
   81a7e:	900e      	str	r0, [sp, #56]	; 0x38
   81a80:	dded      	ble.n	81a5e <_vfiprintf_r+0x6da>
   81a82:	bb6a      	cbnz	r2, 81ae0 <_vfiprintf_r+0x75c>
   81a84:	3f10      	subs	r7, #16
   81a86:	2f10      	cmp	r7, #16
   81a88:	f04f 0c01 	mov.w	ip, #1
   81a8c:	4611      	mov	r1, r2
   81a8e:	46d6      	mov	lr, sl
   81a90:	dced      	bgt.n	81a6e <_vfiprintf_r+0x6ea>
   81a92:	4674      	mov	r4, lr
   81a94:	4660      	mov	r0, ip
   81a96:	443a      	add	r2, r7
   81a98:	2807      	cmp	r0, #7
   81a9a:	920f      	str	r2, [sp, #60]	; 0x3c
   81a9c:	e884 00a0 	stmia.w	r4, {r5, r7}
   81aa0:	900e      	str	r0, [sp, #56]	; 0x38
   81aa2:	dc3b      	bgt.n	81b1c <_vfiprintf_r+0x798>
   81aa4:	3408      	adds	r4, #8
   81aa6:	3001      	adds	r0, #1
   81aa8:	eb02 0309 	add.w	r3, r2, r9
   81aac:	9a07      	ldr	r2, [sp, #28]
   81aae:	2807      	cmp	r0, #7
   81ab0:	930f      	str	r3, [sp, #60]	; 0x3c
   81ab2:	e884 0204 	stmia.w	r4, {r2, r9}
   81ab6:	900e      	str	r0, [sp, #56]	; 0x38
   81ab8:	dd3d      	ble.n	81b36 <_vfiprintf_r+0x7b2>
   81aba:	2b00      	cmp	r3, #0
   81abc:	f040 813f 	bne.w	81d3e <_vfiprintf_r+0x9ba>
   81ac0:	f018 0f04 	tst.w	r8, #4
   81ac4:	930e      	str	r3, [sp, #56]	; 0x38
   81ac6:	f040 8130 	bne.w	81d2a <_vfiprintf_r+0x9a6>
   81aca:	9b02      	ldr	r3, [sp, #8]
   81acc:	9a03      	ldr	r2, [sp, #12]
   81ace:	4296      	cmp	r6, r2
   81ad0:	bfac      	ite	ge
   81ad2:	199b      	addge	r3, r3, r6
   81ad4:	189b      	addlt	r3, r3, r2
   81ad6:	9302      	str	r3, [sp, #8]
   81ad8:	2300      	movs	r3, #0
   81ada:	930e      	str	r3, [sp, #56]	; 0x38
   81adc:	4654      	mov	r4, sl
   81ade:	e483      	b.n	813e8 <_vfiprintf_r+0x64>
   81ae0:	4620      	mov	r0, r4
   81ae2:	9900      	ldr	r1, [sp, #0]
   81ae4:	aa0d      	add	r2, sp, #52	; 0x34
   81ae6:	9305      	str	r3, [sp, #20]
   81ae8:	f7ff fc10 	bl	8130c <__sprint_r.part.0>
   81aec:	b968      	cbnz	r0, 81b0a <_vfiprintf_r+0x786>
   81aee:	990e      	ldr	r1, [sp, #56]	; 0x38
   81af0:	46d6      	mov	lr, sl
   81af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81af4:	f101 0c01 	add.w	ip, r1, #1
   81af8:	9b05      	ldr	r3, [sp, #20]
   81afa:	e7b5      	b.n	81a68 <_vfiprintf_r+0x6e4>
   81afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81afe:	b123      	cbz	r3, 81b0a <_vfiprintf_r+0x786>
   81b00:	9801      	ldr	r0, [sp, #4]
   81b02:	9900      	ldr	r1, [sp, #0]
   81b04:	aa0d      	add	r2, sp, #52	; 0x34
   81b06:	f7ff fc01 	bl	8130c <__sprint_r.part.0>
   81b0a:	9b00      	ldr	r3, [sp, #0]
   81b0c:	899b      	ldrh	r3, [r3, #12]
   81b0e:	065b      	lsls	r3, r3, #25
   81b10:	f53f ad23 	bmi.w	8155a <_vfiprintf_r+0x1d6>
   81b14:	9802      	ldr	r0, [sp, #8]
   81b16:	b02b      	add	sp, #172	; 0xac
   81b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b1c:	2a00      	cmp	r2, #0
   81b1e:	f040 8190 	bne.w	81e42 <_vfiprintf_r+0xabe>
   81b22:	464b      	mov	r3, r9
   81b24:	4654      	mov	r4, sl
   81b26:	9907      	ldr	r1, [sp, #28]
   81b28:	2201      	movs	r2, #1
   81b2a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   81b2e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   81b32:	911a      	str	r1, [sp, #104]	; 0x68
   81b34:	920e      	str	r2, [sp, #56]	; 0x38
   81b36:	f104 0208 	add.w	r2, r4, #8
   81b3a:	f018 0f04 	tst.w	r8, #4
   81b3e:	d039      	beq.n	81bb4 <_vfiprintf_r+0x830>
   81b40:	9903      	ldr	r1, [sp, #12]
   81b42:	1b8d      	subs	r5, r1, r6
   81b44:	2d00      	cmp	r5, #0
   81b46:	dd35      	ble.n	81bb4 <_vfiprintf_r+0x830>
   81b48:	2d10      	cmp	r5, #16
   81b4a:	f340 8200 	ble.w	81f4e <_vfiprintf_r+0xbca>
   81b4e:	980e      	ldr	r0, [sp, #56]	; 0x38
   81b50:	4f6c      	ldr	r7, [pc, #432]	; (81d04 <_vfiprintf_r+0x980>)
   81b52:	2410      	movs	r4, #16
   81b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
   81b58:	f8dd 9000 	ldr.w	r9, [sp]
   81b5c:	e006      	b.n	81b6c <_vfiprintf_r+0x7e8>
   81b5e:	f100 0e02 	add.w	lr, r0, #2
   81b62:	4608      	mov	r0, r1
   81b64:	3208      	adds	r2, #8
   81b66:	3d10      	subs	r5, #16
   81b68:	2d10      	cmp	r5, #16
   81b6a:	dd10      	ble.n	81b8e <_vfiprintf_r+0x80a>
   81b6c:	1c41      	adds	r1, r0, #1
   81b6e:	3310      	adds	r3, #16
   81b70:	2907      	cmp	r1, #7
   81b72:	930f      	str	r3, [sp, #60]	; 0x3c
   81b74:	6017      	str	r7, [r2, #0]
   81b76:	6054      	str	r4, [r2, #4]
   81b78:	910e      	str	r1, [sp, #56]	; 0x38
   81b7a:	ddf0      	ble.n	81b5e <_vfiprintf_r+0x7da>
   81b7c:	2b00      	cmp	r3, #0
   81b7e:	d12a      	bne.n	81bd6 <_vfiprintf_r+0x852>
   81b80:	3d10      	subs	r5, #16
   81b82:	2d10      	cmp	r5, #16
   81b84:	f04f 0e01 	mov.w	lr, #1
   81b88:	4618      	mov	r0, r3
   81b8a:	4652      	mov	r2, sl
   81b8c:	dcee      	bgt.n	81b6c <_vfiprintf_r+0x7e8>
   81b8e:	442b      	add	r3, r5
   81b90:	f1be 0f07 	cmp.w	lr, #7
   81b94:	930f      	str	r3, [sp, #60]	; 0x3c
   81b96:	6017      	str	r7, [r2, #0]
   81b98:	6055      	str	r5, [r2, #4]
   81b9a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81b9e:	dd09      	ble.n	81bb4 <_vfiprintf_r+0x830>
   81ba0:	2b00      	cmp	r3, #0
   81ba2:	d092      	beq.n	81aca <_vfiprintf_r+0x746>
   81ba4:	9801      	ldr	r0, [sp, #4]
   81ba6:	9900      	ldr	r1, [sp, #0]
   81ba8:	aa0d      	add	r2, sp, #52	; 0x34
   81baa:	f7ff fbaf 	bl	8130c <__sprint_r.part.0>
   81bae:	2800      	cmp	r0, #0
   81bb0:	d1ab      	bne.n	81b0a <_vfiprintf_r+0x786>
   81bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81bb4:	9a02      	ldr	r2, [sp, #8]
   81bb6:	9903      	ldr	r1, [sp, #12]
   81bb8:	428e      	cmp	r6, r1
   81bba:	bfac      	ite	ge
   81bbc:	1992      	addge	r2, r2, r6
   81bbe:	1852      	addlt	r2, r2, r1
   81bc0:	9202      	str	r2, [sp, #8]
   81bc2:	2b00      	cmp	r3, #0
   81bc4:	d088      	beq.n	81ad8 <_vfiprintf_r+0x754>
   81bc6:	9801      	ldr	r0, [sp, #4]
   81bc8:	9900      	ldr	r1, [sp, #0]
   81bca:	aa0d      	add	r2, sp, #52	; 0x34
   81bcc:	f7ff fb9e 	bl	8130c <__sprint_r.part.0>
   81bd0:	2800      	cmp	r0, #0
   81bd2:	d081      	beq.n	81ad8 <_vfiprintf_r+0x754>
   81bd4:	e799      	b.n	81b0a <_vfiprintf_r+0x786>
   81bd6:	4640      	mov	r0, r8
   81bd8:	4649      	mov	r1, r9
   81bda:	aa0d      	add	r2, sp, #52	; 0x34
   81bdc:	f7ff fb96 	bl	8130c <__sprint_r.part.0>
   81be0:	2800      	cmp	r0, #0
   81be2:	d192      	bne.n	81b0a <_vfiprintf_r+0x786>
   81be4:	980e      	ldr	r0, [sp, #56]	; 0x38
   81be6:	4652      	mov	r2, sl
   81be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81bea:	f100 0e01 	add.w	lr, r0, #1
   81bee:	e7ba      	b.n	81b66 <_vfiprintf_r+0x7e2>
   81bf0:	9b03      	ldr	r3, [sp, #12]
   81bf2:	1b9f      	subs	r7, r3, r6
   81bf4:	2f00      	cmp	r7, #0
   81bf6:	f77f af27 	ble.w	81a48 <_vfiprintf_r+0x6c4>
   81bfa:	2f10      	cmp	r7, #16
   81bfc:	f340 81b3 	ble.w	81f66 <_vfiprintf_r+0xbe2>
   81c00:	4620      	mov	r0, r4
   81c02:	4d3f      	ldr	r5, [pc, #252]	; (81d00 <_vfiprintf_r+0x97c>)
   81c04:	4664      	mov	r4, ip
   81c06:	2310      	movs	r3, #16
   81c08:	4684      	mov	ip, r0
   81c0a:	e007      	b.n	81c1c <_vfiprintf_r+0x898>
   81c0c:	f101 0e02 	add.w	lr, r1, #2
   81c10:	4601      	mov	r1, r0
   81c12:	f10c 0c08 	add.w	ip, ip, #8
   81c16:	3f10      	subs	r7, #16
   81c18:	2f10      	cmp	r7, #16
   81c1a:	dd11      	ble.n	81c40 <_vfiprintf_r+0x8bc>
   81c1c:	1c48      	adds	r0, r1, #1
   81c1e:	3210      	adds	r2, #16
   81c20:	2807      	cmp	r0, #7
   81c22:	920f      	str	r2, [sp, #60]	; 0x3c
   81c24:	f8cc 5000 	str.w	r5, [ip]
   81c28:	f8cc 3004 	str.w	r3, [ip, #4]
   81c2c:	900e      	str	r0, [sp, #56]	; 0x38
   81c2e:	dded      	ble.n	81c0c <_vfiprintf_r+0x888>
   81c30:	b9c2      	cbnz	r2, 81c64 <_vfiprintf_r+0x8e0>
   81c32:	3f10      	subs	r7, #16
   81c34:	2f10      	cmp	r7, #16
   81c36:	f04f 0e01 	mov.w	lr, #1
   81c3a:	4611      	mov	r1, r2
   81c3c:	46d4      	mov	ip, sl
   81c3e:	dced      	bgt.n	81c1c <_vfiprintf_r+0x898>
   81c40:	4663      	mov	r3, ip
   81c42:	46a4      	mov	ip, r4
   81c44:	461c      	mov	r4, r3
   81c46:	443a      	add	r2, r7
   81c48:	f1be 0f07 	cmp.w	lr, #7
   81c4c:	920f      	str	r2, [sp, #60]	; 0x3c
   81c4e:	e884 00a0 	stmia.w	r4, {r5, r7}
   81c52:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81c56:	f300 80ee 	bgt.w	81e36 <_vfiprintf_r+0xab2>
   81c5a:	3408      	adds	r4, #8
   81c5c:	f10e 0001 	add.w	r0, lr, #1
   81c60:	4671      	mov	r1, lr
   81c62:	e6f1      	b.n	81a48 <_vfiprintf_r+0x6c4>
   81c64:	9801      	ldr	r0, [sp, #4]
   81c66:	9900      	ldr	r1, [sp, #0]
   81c68:	aa0d      	add	r2, sp, #52	; 0x34
   81c6a:	9305      	str	r3, [sp, #20]
   81c6c:	f7ff fb4e 	bl	8130c <__sprint_r.part.0>
   81c70:	2800      	cmp	r0, #0
   81c72:	f47f af4a 	bne.w	81b0a <_vfiprintf_r+0x786>
   81c76:	990e      	ldr	r1, [sp, #56]	; 0x38
   81c78:	46d4      	mov	ip, sl
   81c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81c7c:	f101 0e01 	add.w	lr, r1, #1
   81c80:	9b05      	ldr	r3, [sp, #20]
   81c82:	e7c8      	b.n	81c16 <_vfiprintf_r+0x892>
   81c84:	2a00      	cmp	r2, #0
   81c86:	f040 80c5 	bne.w	81e14 <_vfiprintf_r+0xa90>
   81c8a:	9b05      	ldr	r3, [sp, #20]
   81c8c:	2b00      	cmp	r3, #0
   81c8e:	f000 8085 	beq.w	81d9c <_vfiprintf_r+0xa18>
   81c92:	aa0c      	add	r2, sp, #48	; 0x30
   81c94:	2302      	movs	r3, #2
   81c96:	921a      	str	r2, [sp, #104]	; 0x68
   81c98:	4608      	mov	r0, r1
   81c9a:	931b      	str	r3, [sp, #108]	; 0x6c
   81c9c:	461a      	mov	r2, r3
   81c9e:	4654      	mov	r4, sl
   81ca0:	e6cb      	b.n	81a3a <_vfiprintf_r+0x6b6>
   81ca2:	2a00      	cmp	r2, #0
   81ca4:	f040 80a5 	bne.w	81df2 <_vfiprintf_r+0xa6e>
   81ca8:	2001      	movs	r0, #1
   81caa:	4611      	mov	r1, r2
   81cac:	4654      	mov	r4, sl
   81cae:	e6c7      	b.n	81a40 <_vfiprintf_r+0x6bc>
   81cb0:	bb03      	cbnz	r3, 81cf4 <_vfiprintf_r+0x970>
   81cb2:	f018 0f01 	tst.w	r8, #1
   81cb6:	d01d      	beq.n	81cf4 <_vfiprintf_r+0x970>
   81cb8:	ab2a      	add	r3, sp, #168	; 0xa8
   81cba:	2230      	movs	r2, #48	; 0x30
   81cbc:	f803 2d41 	strb.w	r2, [r3, #-65]!
   81cc0:	ebc3 090a 	rsb	r9, r3, sl
   81cc4:	9307      	str	r3, [sp, #28]
   81cc6:	e48f      	b.n	815e8 <_vfiprintf_r+0x264>
   81cc8:	46d1      	mov	r9, sl
   81cca:	9809      	ldr	r0, [sp, #36]	; 0x24
   81ccc:	0933      	lsrs	r3, r6, #4
   81cce:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81cd2:	0939      	lsrs	r1, r7, #4
   81cd4:	f006 020f 	and.w	r2, r6, #15
   81cd8:	460f      	mov	r7, r1
   81cda:	461e      	mov	r6, r3
   81cdc:	5c83      	ldrb	r3, [r0, r2]
   81cde:	f809 3d01 	strb.w	r3, [r9, #-1]!
   81ce2:	ea56 0307 	orrs.w	r3, r6, r7
   81ce6:	d1f1      	bne.n	81ccc <_vfiprintf_r+0x948>
   81ce8:	464b      	mov	r3, r9
   81cea:	f8cd 901c 	str.w	r9, [sp, #28]
   81cee:	ebc3 090a 	rsb	r9, r3, sl
   81cf2:	e479      	b.n	815e8 <_vfiprintf_r+0x264>
   81cf4:	f8cd a01c 	str.w	sl, [sp, #28]
   81cf8:	e476      	b.n	815e8 <_vfiprintf_r+0x264>
   81cfa:	2302      	movs	r3, #2
   81cfc:	e445      	b.n	8158a <_vfiprintf_r+0x206>
   81cfe:	bf00      	nop
   81d00:	00084210 	.word	0x00084210
   81d04:	00084250 	.word	0x00084250
   81d08:	2a00      	cmp	r2, #0
   81d0a:	f040 80d5 	bne.w	81eb8 <_vfiprintf_r+0xb34>
   81d0e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81d12:	2b00      	cmp	r3, #0
   81d14:	f000 80ac 	beq.w	81e70 <_vfiprintf_r+0xaec>
   81d18:	2301      	movs	r3, #1
   81d1a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81d1e:	4618      	mov	r0, r3
   81d20:	931b      	str	r3, [sp, #108]	; 0x6c
   81d22:	461a      	mov	r2, r3
   81d24:	911a      	str	r1, [sp, #104]	; 0x68
   81d26:	4654      	mov	r4, sl
   81d28:	e678      	b.n	81a1c <_vfiprintf_r+0x698>
   81d2a:	9a03      	ldr	r2, [sp, #12]
   81d2c:	1b95      	subs	r5, r2, r6
   81d2e:	2d00      	cmp	r5, #0
   81d30:	4652      	mov	r2, sl
   81d32:	f73f af09 	bgt.w	81b48 <_vfiprintf_r+0x7c4>
   81d36:	e6c8      	b.n	81aca <_vfiprintf_r+0x746>
   81d38:	465d      	mov	r5, fp
   81d3a:	f7ff bb7c 	b.w	81436 <_vfiprintf_r+0xb2>
   81d3e:	9801      	ldr	r0, [sp, #4]
   81d40:	9900      	ldr	r1, [sp, #0]
   81d42:	aa0d      	add	r2, sp, #52	; 0x34
   81d44:	f7ff fae2 	bl	8130c <__sprint_r.part.0>
   81d48:	2800      	cmp	r0, #0
   81d4a:	f47f aede 	bne.w	81b0a <_vfiprintf_r+0x786>
   81d4e:	4652      	mov	r2, sl
   81d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81d52:	e6f2      	b.n	81b3a <_vfiprintf_r+0x7b6>
   81d54:	9904      	ldr	r1, [sp, #16]
   81d56:	2700      	movs	r7, #0
   81d58:	460a      	mov	r2, r1
   81d5a:	3204      	adds	r2, #4
   81d5c:	680e      	ldr	r6, [r1, #0]
   81d5e:	9204      	str	r2, [sp, #16]
   81d60:	e413      	b.n	8158a <_vfiprintf_r+0x206>
   81d62:	3204      	adds	r2, #4
   81d64:	681e      	ldr	r6, [r3, #0]
   81d66:	2700      	movs	r7, #0
   81d68:	2301      	movs	r3, #1
   81d6a:	9204      	str	r2, [sp, #16]
   81d6c:	e40d      	b.n	8158a <_vfiprintf_r+0x206>
   81d6e:	6816      	ldr	r6, [r2, #0]
   81d70:	3204      	adds	r2, #4
   81d72:	9204      	str	r2, [sp, #16]
   81d74:	2700      	movs	r7, #0
   81d76:	e52d      	b.n	817d4 <_vfiprintf_r+0x450>
   81d78:	681e      	ldr	r6, [r3, #0]
   81d7a:	3304      	adds	r3, #4
   81d7c:	17f7      	asrs	r7, r6, #31
   81d7e:	9304      	str	r3, [sp, #16]
   81d80:	4632      	mov	r2, r6
   81d82:	463b      	mov	r3, r7
   81d84:	e4c1      	b.n	8170a <_vfiprintf_r+0x386>
   81d86:	9801      	ldr	r0, [sp, #4]
   81d88:	9900      	ldr	r1, [sp, #0]
   81d8a:	aa0d      	add	r2, sp, #52	; 0x34
   81d8c:	f7ff fabe 	bl	8130c <__sprint_r.part.0>
   81d90:	2800      	cmp	r0, #0
   81d92:	f47f aeba 	bne.w	81b0a <_vfiprintf_r+0x786>
   81d96:	4654      	mov	r4, sl
   81d98:	f7ff bbc0 	b.w	8151c <_vfiprintf_r+0x198>
   81d9c:	4608      	mov	r0, r1
   81d9e:	4654      	mov	r4, sl
   81da0:	4611      	mov	r1, r2
   81da2:	e64d      	b.n	81a40 <_vfiprintf_r+0x6bc>
   81da4:	46d1      	mov	r9, sl
   81da6:	f8cd c014 	str.w	ip, [sp, #20]
   81daa:	4630      	mov	r0, r6
   81dac:	4639      	mov	r1, r7
   81dae:	220a      	movs	r2, #10
   81db0:	2300      	movs	r3, #0
   81db2:	f001 ff3d 	bl	83c30 <__aeabi_uldivmod>
   81db6:	3230      	adds	r2, #48	; 0x30
   81db8:	4630      	mov	r0, r6
   81dba:	4639      	mov	r1, r7
   81dbc:	f809 2d01 	strb.w	r2, [r9, #-1]!
   81dc0:	2300      	movs	r3, #0
   81dc2:	220a      	movs	r2, #10
   81dc4:	f001 ff34 	bl	83c30 <__aeabi_uldivmod>
   81dc8:	4606      	mov	r6, r0
   81dca:	460f      	mov	r7, r1
   81dcc:	ea56 0307 	orrs.w	r3, r6, r7
   81dd0:	d1eb      	bne.n	81daa <_vfiprintf_r+0xa26>
   81dd2:	f8dd c014 	ldr.w	ip, [sp, #20]
   81dd6:	e787      	b.n	81ce8 <_vfiprintf_r+0x964>
   81dd8:	2b30      	cmp	r3, #48	; 0x30
   81dda:	9b07      	ldr	r3, [sp, #28]
   81ddc:	d087      	beq.n	81cee <_vfiprintf_r+0x96a>
   81dde:	3b01      	subs	r3, #1
   81de0:	461a      	mov	r2, r3
   81de2:	9307      	str	r3, [sp, #28]
   81de4:	2330      	movs	r3, #48	; 0x30
   81de6:	ebc2 090a 	rsb	r9, r2, sl
   81dea:	f801 3c01 	strb.w	r3, [r1, #-1]
   81dee:	f7ff bbfb 	b.w	815e8 <_vfiprintf_r+0x264>
   81df2:	9801      	ldr	r0, [sp, #4]
   81df4:	9900      	ldr	r1, [sp, #0]
   81df6:	aa0d      	add	r2, sp, #52	; 0x34
   81df8:	f8cd c014 	str.w	ip, [sp, #20]
   81dfc:	f7ff fa86 	bl	8130c <__sprint_r.part.0>
   81e00:	2800      	cmp	r0, #0
   81e02:	f47f ae82 	bne.w	81b0a <_vfiprintf_r+0x786>
   81e06:	990e      	ldr	r1, [sp, #56]	; 0x38
   81e08:	4654      	mov	r4, sl
   81e0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81e0c:	1c48      	adds	r0, r1, #1
   81e0e:	f8dd c014 	ldr.w	ip, [sp, #20]
   81e12:	e615      	b.n	81a40 <_vfiprintf_r+0x6bc>
   81e14:	9801      	ldr	r0, [sp, #4]
   81e16:	9900      	ldr	r1, [sp, #0]
   81e18:	aa0d      	add	r2, sp, #52	; 0x34
   81e1a:	f8cd c020 	str.w	ip, [sp, #32]
   81e1e:	f7ff fa75 	bl	8130c <__sprint_r.part.0>
   81e22:	2800      	cmp	r0, #0
   81e24:	f47f ae71 	bne.w	81b0a <_vfiprintf_r+0x786>
   81e28:	990e      	ldr	r1, [sp, #56]	; 0x38
   81e2a:	4654      	mov	r4, sl
   81e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81e2e:	1c48      	adds	r0, r1, #1
   81e30:	f8dd c020 	ldr.w	ip, [sp, #32]
   81e34:	e5f5      	b.n	81a22 <_vfiprintf_r+0x69e>
   81e36:	2a00      	cmp	r2, #0
   81e38:	d167      	bne.n	81f0a <_vfiprintf_r+0xb86>
   81e3a:	2001      	movs	r0, #1
   81e3c:	4611      	mov	r1, r2
   81e3e:	4654      	mov	r4, sl
   81e40:	e602      	b.n	81a48 <_vfiprintf_r+0x6c4>
   81e42:	9801      	ldr	r0, [sp, #4]
   81e44:	9900      	ldr	r1, [sp, #0]
   81e46:	aa0d      	add	r2, sp, #52	; 0x34
   81e48:	f7ff fa60 	bl	8130c <__sprint_r.part.0>
   81e4c:	2800      	cmp	r0, #0
   81e4e:	f47f ae5c 	bne.w	81b0a <_vfiprintf_r+0x786>
   81e52:	980e      	ldr	r0, [sp, #56]	; 0x38
   81e54:	4654      	mov	r4, sl
   81e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81e58:	3001      	adds	r0, #1
   81e5a:	e625      	b.n	81aa8 <_vfiprintf_r+0x724>
   81e5c:	252d      	movs	r5, #45	; 0x2d
   81e5e:	4276      	negs	r6, r6
   81e60:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81e64:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   81e68:	46e1      	mov	r9, ip
   81e6a:	2301      	movs	r3, #1
   81e6c:	f7ff bb93 	b.w	81596 <_vfiprintf_r+0x212>
   81e70:	9b05      	ldr	r3, [sp, #20]
   81e72:	4611      	mov	r1, r2
   81e74:	2001      	movs	r0, #1
   81e76:	4654      	mov	r4, sl
   81e78:	2b00      	cmp	r3, #0
   81e7a:	f43f ade5 	beq.w	81a48 <_vfiprintf_r+0x6c4>
   81e7e:	aa0c      	add	r2, sp, #48	; 0x30
   81e80:	2302      	movs	r3, #2
   81e82:	e88a 000c 	stmia.w	sl, {r2, r3}
   81e86:	461a      	mov	r2, r3
   81e88:	e5d7      	b.n	81a3a <_vfiprintf_r+0x6b6>
   81e8a:	f018 0f10 	tst.w	r8, #16
   81e8e:	d10b      	bne.n	81ea8 <_vfiprintf_r+0xb24>
   81e90:	f018 0f40 	tst.w	r8, #64	; 0x40
   81e94:	d008      	beq.n	81ea8 <_vfiprintf_r+0xb24>
   81e96:	9a04      	ldr	r2, [sp, #16]
   81e98:	6813      	ldr	r3, [r2, #0]
   81e9a:	3204      	adds	r2, #4
   81e9c:	9204      	str	r2, [sp, #16]
   81e9e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   81ea2:	801a      	strh	r2, [r3, #0]
   81ea4:	f7ff baa0 	b.w	813e8 <_vfiprintf_r+0x64>
   81ea8:	9a04      	ldr	r2, [sp, #16]
   81eaa:	6813      	ldr	r3, [r2, #0]
   81eac:	3204      	adds	r2, #4
   81eae:	9204      	str	r2, [sp, #16]
   81eb0:	9a02      	ldr	r2, [sp, #8]
   81eb2:	601a      	str	r2, [r3, #0]
   81eb4:	f7ff ba98 	b.w	813e8 <_vfiprintf_r+0x64>
   81eb8:	9801      	ldr	r0, [sp, #4]
   81eba:	9900      	ldr	r1, [sp, #0]
   81ebc:	aa0d      	add	r2, sp, #52	; 0x34
   81ebe:	f8cd c020 	str.w	ip, [sp, #32]
   81ec2:	f7ff fa23 	bl	8130c <__sprint_r.part.0>
   81ec6:	2800      	cmp	r0, #0
   81ec8:	f47f ae1f 	bne.w	81b0a <_vfiprintf_r+0x786>
   81ecc:	990e      	ldr	r1, [sp, #56]	; 0x38
   81ece:	4654      	mov	r4, sl
   81ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ed2:	1c48      	adds	r0, r1, #1
   81ed4:	f8dd c020 	ldr.w	ip, [sp, #32]
   81ed8:	e592      	b.n	81a00 <_vfiprintf_r+0x67c>
   81eda:	f048 0820 	orr.w	r8, r8, #32
   81ede:	f10b 0001 	add.w	r0, fp, #1
   81ee2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81ee6:	f7ff bab6 	b.w	81456 <_vfiprintf_r+0xd2>
   81eea:	426d      	negs	r5, r5
   81eec:	9304      	str	r3, [sp, #16]
   81eee:	4658      	mov	r0, fp
   81ef0:	f7ff bbc8 	b.w	81684 <_vfiprintf_r+0x300>
   81ef4:	9807      	ldr	r0, [sp, #28]
   81ef6:	9504      	str	r5, [sp, #16]
   81ef8:	f001 fcd8 	bl	838ac <strlen>
   81efc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81f00:	4681      	mov	r9, r0
   81f02:	f04f 0c00 	mov.w	ip, #0
   81f06:	f7ff bb6f 	b.w	815e8 <_vfiprintf_r+0x264>
   81f0a:	9801      	ldr	r0, [sp, #4]
   81f0c:	9900      	ldr	r1, [sp, #0]
   81f0e:	aa0d      	add	r2, sp, #52	; 0x34
   81f10:	f8cd c014 	str.w	ip, [sp, #20]
   81f14:	f7ff f9fa 	bl	8130c <__sprint_r.part.0>
   81f18:	2800      	cmp	r0, #0
   81f1a:	f47f adf6 	bne.w	81b0a <_vfiprintf_r+0x786>
   81f1e:	990e      	ldr	r1, [sp, #56]	; 0x38
   81f20:	4654      	mov	r4, sl
   81f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81f24:	1c48      	adds	r0, r1, #1
   81f26:	f8dd c014 	ldr.w	ip, [sp, #20]
   81f2a:	e58d      	b.n	81a48 <_vfiprintf_r+0x6c4>
   81f2c:	990e      	ldr	r1, [sp, #56]	; 0x38
   81f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81f30:	3101      	adds	r1, #1
   81f32:	4f15      	ldr	r7, [pc, #84]	; (81f88 <_vfiprintf_r+0xc04>)
   81f34:	f7ff bb9a 	b.w	8166c <_vfiprintf_r+0x2e8>
   81f38:	2e06      	cmp	r6, #6
   81f3a:	4b14      	ldr	r3, [pc, #80]	; (81f8c <_vfiprintf_r+0xc08>)
   81f3c:	bf28      	it	cs
   81f3e:	f04f 0c06 	movcs.w	ip, #6
   81f42:	46e1      	mov	r9, ip
   81f44:	9504      	str	r5, [sp, #16]
   81f46:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   81f4a:	9307      	str	r3, [sp, #28]
   81f4c:	e463      	b.n	81816 <_vfiprintf_r+0x492>
   81f4e:	990e      	ldr	r1, [sp, #56]	; 0x38
   81f50:	4f0d      	ldr	r7, [pc, #52]	; (81f88 <_vfiprintf_r+0xc04>)
   81f52:	f101 0e01 	add.w	lr, r1, #1
   81f56:	e61a      	b.n	81b8e <_vfiprintf_r+0x80a>
   81f58:	46e1      	mov	r9, ip
   81f5a:	9504      	str	r5, [sp, #16]
   81f5c:	4684      	mov	ip, r0
   81f5e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81f62:	f7ff bb41 	b.w	815e8 <_vfiprintf_r+0x264>
   81f66:	4686      	mov	lr, r0
   81f68:	4d09      	ldr	r5, [pc, #36]	; (81f90 <_vfiprintf_r+0xc0c>)
   81f6a:	e66c      	b.n	81c46 <_vfiprintf_r+0x8c2>
   81f6c:	9a04      	ldr	r2, [sp, #16]
   81f6e:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81f72:	6816      	ldr	r6, [r2, #0]
   81f74:	3204      	adds	r2, #4
   81f76:	2e00      	cmp	r6, #0
   81f78:	9204      	str	r2, [sp, #16]
   81f7a:	f6bf aa6c 	bge.w	81456 <_vfiprintf_r+0xd2>
   81f7e:	f04f 36ff 	mov.w	r6, #4294967295
   81f82:	f7ff ba68 	b.w	81456 <_vfiprintf_r+0xd2>
   81f86:	bf00      	nop
   81f88:	00084250 	.word	0x00084250
   81f8c:	00084248 	.word	0x00084248
   81f90:	00084210 	.word	0x00084210

00081f94 <__sbprintf>:
   81f94:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   81f98:	4688      	mov	r8, r1
   81f9a:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81f9c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81fa0:	9719      	str	r7, [sp, #100]	; 0x64
   81fa2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81fa6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   81faa:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   81fae:	9707      	str	r7, [sp, #28]
   81fb0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81fb4:	ac1a      	add	r4, sp, #104	; 0x68
   81fb6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81fba:	f02e 0e02 	bic.w	lr, lr, #2
   81fbe:	2600      	movs	r6, #0
   81fc0:	4669      	mov	r1, sp
   81fc2:	9400      	str	r4, [sp, #0]
   81fc4:	9404      	str	r4, [sp, #16]
   81fc6:	9502      	str	r5, [sp, #8]
   81fc8:	9505      	str	r5, [sp, #20]
   81fca:	f8ad e00c 	strh.w	lr, [sp, #12]
   81fce:	f8ad a00e 	strh.w	sl, [sp, #14]
   81fd2:	9709      	str	r7, [sp, #36]	; 0x24
   81fd4:	9606      	str	r6, [sp, #24]
   81fd6:	4605      	mov	r5, r0
   81fd8:	f7ff f9d4 	bl	81384 <_vfiprintf_r>
   81fdc:	1e04      	subs	r4, r0, #0
   81fde:	db07      	blt.n	81ff0 <__sbprintf+0x5c>
   81fe0:	4628      	mov	r0, r5
   81fe2:	4669      	mov	r1, sp
   81fe4:	f000 f92a 	bl	8223c <_fflush_r>
   81fe8:	42b0      	cmp	r0, r6
   81fea:	bf18      	it	ne
   81fec:	f04f 34ff 	movne.w	r4, #4294967295
   81ff0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81ff4:	065b      	lsls	r3, r3, #25
   81ff6:	d505      	bpl.n	82004 <__sbprintf+0x70>
   81ff8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82000:	f8a8 300c 	strh.w	r3, [r8, #12]
   82004:	4620      	mov	r0, r4
   82006:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8200a:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   8200e:	bf00      	nop

00082010 <__swsetup_r>:
   82010:	b538      	push	{r3, r4, r5, lr}
   82012:	4b2f      	ldr	r3, [pc, #188]	; (820d0 <__swsetup_r+0xc0>)
   82014:	4605      	mov	r5, r0
   82016:	6818      	ldr	r0, [r3, #0]
   82018:	460c      	mov	r4, r1
   8201a:	b110      	cbz	r0, 82022 <__swsetup_r+0x12>
   8201c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8201e:	2b00      	cmp	r3, #0
   82020:	d036      	beq.n	82090 <__swsetup_r+0x80>
   82022:	89a2      	ldrh	r2, [r4, #12]
   82024:	b293      	uxth	r3, r2
   82026:	0718      	lsls	r0, r3, #28
   82028:	d50c      	bpl.n	82044 <__swsetup_r+0x34>
   8202a:	6920      	ldr	r0, [r4, #16]
   8202c:	b1a8      	cbz	r0, 8205a <__swsetup_r+0x4a>
   8202e:	f013 0201 	ands.w	r2, r3, #1
   82032:	d01e      	beq.n	82072 <__swsetup_r+0x62>
   82034:	6963      	ldr	r3, [r4, #20]
   82036:	2200      	movs	r2, #0
   82038:	425b      	negs	r3, r3
   8203a:	61a3      	str	r3, [r4, #24]
   8203c:	60a2      	str	r2, [r4, #8]
   8203e:	b1f0      	cbz	r0, 8207e <__swsetup_r+0x6e>
   82040:	2000      	movs	r0, #0
   82042:	bd38      	pop	{r3, r4, r5, pc}
   82044:	06d9      	lsls	r1, r3, #27
   82046:	d53a      	bpl.n	820be <__swsetup_r+0xae>
   82048:	0758      	lsls	r0, r3, #29
   8204a:	d424      	bmi.n	82096 <__swsetup_r+0x86>
   8204c:	6920      	ldr	r0, [r4, #16]
   8204e:	f042 0308 	orr.w	r3, r2, #8
   82052:	81a3      	strh	r3, [r4, #12]
   82054:	b29b      	uxth	r3, r3
   82056:	2800      	cmp	r0, #0
   82058:	d1e9      	bne.n	8202e <__swsetup_r+0x1e>
   8205a:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8205e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82062:	d0e4      	beq.n	8202e <__swsetup_r+0x1e>
   82064:	4628      	mov	r0, r5
   82066:	4621      	mov	r1, r4
   82068:	f000 fd24 	bl	82ab4 <__smakebuf_r>
   8206c:	89a3      	ldrh	r3, [r4, #12]
   8206e:	6920      	ldr	r0, [r4, #16]
   82070:	e7dd      	b.n	8202e <__swsetup_r+0x1e>
   82072:	0799      	lsls	r1, r3, #30
   82074:	bf58      	it	pl
   82076:	6962      	ldrpl	r2, [r4, #20]
   82078:	60a2      	str	r2, [r4, #8]
   8207a:	2800      	cmp	r0, #0
   8207c:	d1e0      	bne.n	82040 <__swsetup_r+0x30>
   8207e:	89a3      	ldrh	r3, [r4, #12]
   82080:	061a      	lsls	r2, r3, #24
   82082:	d5de      	bpl.n	82042 <__swsetup_r+0x32>
   82084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82088:	81a3      	strh	r3, [r4, #12]
   8208a:	f04f 30ff 	mov.w	r0, #4294967295
   8208e:	bd38      	pop	{r3, r4, r5, pc}
   82090:	f000 f97a 	bl	82388 <__sinit>
   82094:	e7c5      	b.n	82022 <__swsetup_r+0x12>
   82096:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82098:	b149      	cbz	r1, 820ae <__swsetup_r+0x9e>
   8209a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8209e:	4299      	cmp	r1, r3
   820a0:	d003      	beq.n	820aa <__swsetup_r+0x9a>
   820a2:	4628      	mov	r0, r5
   820a4:	f000 fa48 	bl	82538 <_free_r>
   820a8:	89a2      	ldrh	r2, [r4, #12]
   820aa:	2300      	movs	r3, #0
   820ac:	6323      	str	r3, [r4, #48]	; 0x30
   820ae:	6920      	ldr	r0, [r4, #16]
   820b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   820b4:	2300      	movs	r3, #0
   820b6:	b292      	uxth	r2, r2
   820b8:	e884 0009 	stmia.w	r4, {r0, r3}
   820bc:	e7c7      	b.n	8204e <__swsetup_r+0x3e>
   820be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   820c2:	2309      	movs	r3, #9
   820c4:	602b      	str	r3, [r5, #0]
   820c6:	f04f 30ff 	mov.w	r0, #4294967295
   820ca:	81a2      	strh	r2, [r4, #12]
   820cc:	bd38      	pop	{r3, r4, r5, pc}
   820ce:	bf00      	nop
   820d0:	20070568 	.word	0x20070568

000820d4 <register_fini>:
   820d4:	4b02      	ldr	r3, [pc, #8]	; (820e0 <register_fini+0xc>)
   820d6:	b113      	cbz	r3, 820de <register_fini+0xa>
   820d8:	4802      	ldr	r0, [pc, #8]	; (820e4 <register_fini+0x10>)
   820da:	f000 b805 	b.w	820e8 <atexit>
   820de:	4770      	bx	lr
   820e0:	00000000 	.word	0x00000000
   820e4:	0008239d 	.word	0x0008239d

000820e8 <atexit>:
   820e8:	4601      	mov	r1, r0
   820ea:	2000      	movs	r0, #0
   820ec:	4602      	mov	r2, r0
   820ee:	4603      	mov	r3, r0
   820f0:	f001 bcaa 	b.w	83a48 <__register_exitproc>

000820f4 <__sflush_r>:
   820f4:	898b      	ldrh	r3, [r1, #12]
   820f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820fa:	b29a      	uxth	r2, r3
   820fc:	460d      	mov	r5, r1
   820fe:	0711      	lsls	r1, r2, #28
   82100:	4680      	mov	r8, r0
   82102:	d43c      	bmi.n	8217e <__sflush_r+0x8a>
   82104:	686a      	ldr	r2, [r5, #4]
   82106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8210a:	2a00      	cmp	r2, #0
   8210c:	81ab      	strh	r3, [r5, #12]
   8210e:	dd65      	ble.n	821dc <__sflush_r+0xe8>
   82110:	6aae      	ldr	r6, [r5, #40]	; 0x28
   82112:	2e00      	cmp	r6, #0
   82114:	d04b      	beq.n	821ae <__sflush_r+0xba>
   82116:	b29b      	uxth	r3, r3
   82118:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8211c:	2100      	movs	r1, #0
   8211e:	b292      	uxth	r2, r2
   82120:	f8d8 4000 	ldr.w	r4, [r8]
   82124:	f8c8 1000 	str.w	r1, [r8]
   82128:	2a00      	cmp	r2, #0
   8212a:	d05b      	beq.n	821e4 <__sflush_r+0xf0>
   8212c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8212e:	075f      	lsls	r7, r3, #29
   82130:	d505      	bpl.n	8213e <__sflush_r+0x4a>
   82132:	6869      	ldr	r1, [r5, #4]
   82134:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82136:	1a52      	subs	r2, r2, r1
   82138:	b10b      	cbz	r3, 8213e <__sflush_r+0x4a>
   8213a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8213c:	1ad2      	subs	r2, r2, r3
   8213e:	4640      	mov	r0, r8
   82140:	69e9      	ldr	r1, [r5, #28]
   82142:	2300      	movs	r3, #0
   82144:	47b0      	blx	r6
   82146:	1c46      	adds	r6, r0, #1
   82148:	d056      	beq.n	821f8 <__sflush_r+0x104>
   8214a:	89ab      	ldrh	r3, [r5, #12]
   8214c:	692a      	ldr	r2, [r5, #16]
   8214e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82152:	b29b      	uxth	r3, r3
   82154:	2100      	movs	r1, #0
   82156:	602a      	str	r2, [r5, #0]
   82158:	04da      	lsls	r2, r3, #19
   8215a:	81ab      	strh	r3, [r5, #12]
   8215c:	6069      	str	r1, [r5, #4]
   8215e:	d43b      	bmi.n	821d8 <__sflush_r+0xe4>
   82160:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82162:	f8c8 4000 	str.w	r4, [r8]
   82166:	b311      	cbz	r1, 821ae <__sflush_r+0xba>
   82168:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8216c:	4299      	cmp	r1, r3
   8216e:	d002      	beq.n	82176 <__sflush_r+0x82>
   82170:	4640      	mov	r0, r8
   82172:	f000 f9e1 	bl	82538 <_free_r>
   82176:	2000      	movs	r0, #0
   82178:	6328      	str	r0, [r5, #48]	; 0x30
   8217a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8217e:	692e      	ldr	r6, [r5, #16]
   82180:	b1ae      	cbz	r6, 821ae <__sflush_r+0xba>
   82182:	0791      	lsls	r1, r2, #30
   82184:	682c      	ldr	r4, [r5, #0]
   82186:	bf0c      	ite	eq
   82188:	696b      	ldreq	r3, [r5, #20]
   8218a:	2300      	movne	r3, #0
   8218c:	602e      	str	r6, [r5, #0]
   8218e:	1ba4      	subs	r4, r4, r6
   82190:	60ab      	str	r3, [r5, #8]
   82192:	e00a      	b.n	821aa <__sflush_r+0xb6>
   82194:	4632      	mov	r2, r6
   82196:	4623      	mov	r3, r4
   82198:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8219a:	4640      	mov	r0, r8
   8219c:	69e9      	ldr	r1, [r5, #28]
   8219e:	47b8      	blx	r7
   821a0:	2800      	cmp	r0, #0
   821a2:	eba4 0400 	sub.w	r4, r4, r0
   821a6:	4406      	add	r6, r0
   821a8:	dd04      	ble.n	821b4 <__sflush_r+0xc0>
   821aa:	2c00      	cmp	r4, #0
   821ac:	dcf2      	bgt.n	82194 <__sflush_r+0xa0>
   821ae:	2000      	movs	r0, #0
   821b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b4:	89ab      	ldrh	r3, [r5, #12]
   821b6:	f04f 30ff 	mov.w	r0, #4294967295
   821ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821be:	81ab      	strh	r3, [r5, #12]
   821c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821c4:	89ab      	ldrh	r3, [r5, #12]
   821c6:	692a      	ldr	r2, [r5, #16]
   821c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   821cc:	b29b      	uxth	r3, r3
   821ce:	81ab      	strh	r3, [r5, #12]
   821d0:	04db      	lsls	r3, r3, #19
   821d2:	6069      	str	r1, [r5, #4]
   821d4:	602a      	str	r2, [r5, #0]
   821d6:	d5c3      	bpl.n	82160 <__sflush_r+0x6c>
   821d8:	6528      	str	r0, [r5, #80]	; 0x50
   821da:	e7c1      	b.n	82160 <__sflush_r+0x6c>
   821dc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   821de:	2a00      	cmp	r2, #0
   821e0:	dc96      	bgt.n	82110 <__sflush_r+0x1c>
   821e2:	e7e4      	b.n	821ae <__sflush_r+0xba>
   821e4:	2301      	movs	r3, #1
   821e6:	4640      	mov	r0, r8
   821e8:	69e9      	ldr	r1, [r5, #28]
   821ea:	47b0      	blx	r6
   821ec:	1c43      	adds	r3, r0, #1
   821ee:	4602      	mov	r2, r0
   821f0:	d019      	beq.n	82226 <__sflush_r+0x132>
   821f2:	89ab      	ldrh	r3, [r5, #12]
   821f4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   821f6:	e79a      	b.n	8212e <__sflush_r+0x3a>
   821f8:	f8d8 1000 	ldr.w	r1, [r8]
   821fc:	2900      	cmp	r1, #0
   821fe:	d0e1      	beq.n	821c4 <__sflush_r+0xd0>
   82200:	291d      	cmp	r1, #29
   82202:	d007      	beq.n	82214 <__sflush_r+0x120>
   82204:	2916      	cmp	r1, #22
   82206:	d005      	beq.n	82214 <__sflush_r+0x120>
   82208:	89ab      	ldrh	r3, [r5, #12]
   8220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8220e:	81ab      	strh	r3, [r5, #12]
   82210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82214:	89ab      	ldrh	r3, [r5, #12]
   82216:	6929      	ldr	r1, [r5, #16]
   82218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8221c:	2200      	movs	r2, #0
   8221e:	81ab      	strh	r3, [r5, #12]
   82220:	e885 0006 	stmia.w	r5, {r1, r2}
   82224:	e79c      	b.n	82160 <__sflush_r+0x6c>
   82226:	f8d8 3000 	ldr.w	r3, [r8]
   8222a:	2b00      	cmp	r3, #0
   8222c:	d0e1      	beq.n	821f2 <__sflush_r+0xfe>
   8222e:	2b1d      	cmp	r3, #29
   82230:	d001      	beq.n	82236 <__sflush_r+0x142>
   82232:	2b16      	cmp	r3, #22
   82234:	d1be      	bne.n	821b4 <__sflush_r+0xc0>
   82236:	f8c8 4000 	str.w	r4, [r8]
   8223a:	e7b8      	b.n	821ae <__sflush_r+0xba>

0008223c <_fflush_r>:
   8223c:	b510      	push	{r4, lr}
   8223e:	4604      	mov	r4, r0
   82240:	b082      	sub	sp, #8
   82242:	b108      	cbz	r0, 82248 <_fflush_r+0xc>
   82244:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82246:	b153      	cbz	r3, 8225e <_fflush_r+0x22>
   82248:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8224c:	b908      	cbnz	r0, 82252 <_fflush_r+0x16>
   8224e:	b002      	add	sp, #8
   82250:	bd10      	pop	{r4, pc}
   82252:	4620      	mov	r0, r4
   82254:	b002      	add	sp, #8
   82256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8225a:	f7ff bf4b 	b.w	820f4 <__sflush_r>
   8225e:	9101      	str	r1, [sp, #4]
   82260:	f000 f892 	bl	82388 <__sinit>
   82264:	9901      	ldr	r1, [sp, #4]
   82266:	e7ef      	b.n	82248 <_fflush_r+0xc>

00082268 <fflush>:
   82268:	b120      	cbz	r0, 82274 <fflush+0xc>
   8226a:	4b05      	ldr	r3, [pc, #20]	; (82280 <fflush+0x18>)
   8226c:	4601      	mov	r1, r0
   8226e:	6818      	ldr	r0, [r3, #0]
   82270:	f7ff bfe4 	b.w	8223c <_fflush_r>
   82274:	4b03      	ldr	r3, [pc, #12]	; (82284 <fflush+0x1c>)
   82276:	4904      	ldr	r1, [pc, #16]	; (82288 <fflush+0x20>)
   82278:	6818      	ldr	r0, [r3, #0]
   8227a:	f000 bbe9 	b.w	82a50 <_fwalk_reent>
   8227e:	bf00      	nop
   82280:	20070568 	.word	0x20070568
   82284:	000841e4 	.word	0x000841e4
   82288:	0008223d 	.word	0x0008223d

0008228c <_cleanup_r>:
   8228c:	4901      	ldr	r1, [pc, #4]	; (82294 <_cleanup_r+0x8>)
   8228e:	f000 bbdf 	b.w	82a50 <_fwalk_reent>
   82292:	bf00      	nop
   82294:	00083b11 	.word	0x00083b11

00082298 <__sinit.part.1>:
   82298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8229c:	4607      	mov	r7, r0
   8229e:	4835      	ldr	r0, [pc, #212]	; (82374 <__sinit.part.1+0xdc>)
   822a0:	687d      	ldr	r5, [r7, #4]
   822a2:	2400      	movs	r4, #0
   822a4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   822a8:	2304      	movs	r3, #4
   822aa:	2103      	movs	r1, #3
   822ac:	63f8      	str	r0, [r7, #60]	; 0x3c
   822ae:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   822b2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   822b6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   822ba:	b083      	sub	sp, #12
   822bc:	602c      	str	r4, [r5, #0]
   822be:	606c      	str	r4, [r5, #4]
   822c0:	60ac      	str	r4, [r5, #8]
   822c2:	666c      	str	r4, [r5, #100]	; 0x64
   822c4:	81ec      	strh	r4, [r5, #14]
   822c6:	612c      	str	r4, [r5, #16]
   822c8:	616c      	str	r4, [r5, #20]
   822ca:	61ac      	str	r4, [r5, #24]
   822cc:	81ab      	strh	r3, [r5, #12]
   822ce:	4621      	mov	r1, r4
   822d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822d4:	2208      	movs	r2, #8
   822d6:	f7fe feed 	bl	810b4 <memset>
   822da:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82378 <__sinit.part.1+0xe0>
   822de:	68be      	ldr	r6, [r7, #8]
   822e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 8237c <__sinit.part.1+0xe4>
   822e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82380 <__sinit.part.1+0xe8>
   822e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82384 <__sinit.part.1+0xec>
   822ec:	2301      	movs	r3, #1
   822ee:	2209      	movs	r2, #9
   822f0:	f8c5 b020 	str.w	fp, [r5, #32]
   822f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   822f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   822fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82300:	61ed      	str	r5, [r5, #28]
   82302:	4621      	mov	r1, r4
   82304:	81f3      	strh	r3, [r6, #14]
   82306:	81b2      	strh	r2, [r6, #12]
   82308:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8230c:	6034      	str	r4, [r6, #0]
   8230e:	6074      	str	r4, [r6, #4]
   82310:	60b4      	str	r4, [r6, #8]
   82312:	6674      	str	r4, [r6, #100]	; 0x64
   82314:	6134      	str	r4, [r6, #16]
   82316:	6174      	str	r4, [r6, #20]
   82318:	61b4      	str	r4, [r6, #24]
   8231a:	2208      	movs	r2, #8
   8231c:	9301      	str	r3, [sp, #4]
   8231e:	f7fe fec9 	bl	810b4 <memset>
   82322:	68fd      	ldr	r5, [r7, #12]
   82324:	2012      	movs	r0, #18
   82326:	2202      	movs	r2, #2
   82328:	61f6      	str	r6, [r6, #28]
   8232a:	f8c6 b020 	str.w	fp, [r6, #32]
   8232e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82332:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82336:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8233a:	4621      	mov	r1, r4
   8233c:	81a8      	strh	r0, [r5, #12]
   8233e:	81ea      	strh	r2, [r5, #14]
   82340:	602c      	str	r4, [r5, #0]
   82342:	606c      	str	r4, [r5, #4]
   82344:	60ac      	str	r4, [r5, #8]
   82346:	666c      	str	r4, [r5, #100]	; 0x64
   82348:	612c      	str	r4, [r5, #16]
   8234a:	616c      	str	r4, [r5, #20]
   8234c:	61ac      	str	r4, [r5, #24]
   8234e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82352:	2208      	movs	r2, #8
   82354:	f7fe feae 	bl	810b4 <memset>
   82358:	9b01      	ldr	r3, [sp, #4]
   8235a:	61ed      	str	r5, [r5, #28]
   8235c:	f8c5 b020 	str.w	fp, [r5, #32]
   82360:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82364:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82368:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8236c:	63bb      	str	r3, [r7, #56]	; 0x38
   8236e:	b003      	add	sp, #12
   82370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82374:	0008228d 	.word	0x0008228d
   82378:	00083829 	.word	0x00083829
   8237c:	0008384d 	.word	0x0008384d
   82380:	00083885 	.word	0x00083885
   82384:	000838a5 	.word	0x000838a5

00082388 <__sinit>:
   82388:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8238a:	b103      	cbz	r3, 8238e <__sinit+0x6>
   8238c:	4770      	bx	lr
   8238e:	f7ff bf83 	b.w	82298 <__sinit.part.1>
   82392:	bf00      	nop

00082394 <__sfp_lock_acquire>:
   82394:	4770      	bx	lr
   82396:	bf00      	nop

00082398 <__sfp_lock_release>:
   82398:	4770      	bx	lr
   8239a:	bf00      	nop

0008239c <__libc_fini_array>:
   8239c:	b538      	push	{r3, r4, r5, lr}
   8239e:	4b08      	ldr	r3, [pc, #32]	; (823c0 <__libc_fini_array+0x24>)
   823a0:	4d08      	ldr	r5, [pc, #32]	; (823c4 <__libc_fini_array+0x28>)
   823a2:	1aed      	subs	r5, r5, r3
   823a4:	10ac      	asrs	r4, r5, #2
   823a6:	bf18      	it	ne
   823a8:	18ed      	addne	r5, r5, r3
   823aa:	d005      	beq.n	823b8 <__libc_fini_array+0x1c>
   823ac:	3c01      	subs	r4, #1
   823ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   823b2:	4798      	blx	r3
   823b4:	2c00      	cmp	r4, #0
   823b6:	d1f9      	bne.n	823ac <__libc_fini_array+0x10>
   823b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   823bc:	f001 bf5a 	b.w	84274 <_fini>
   823c0:	00084280 	.word	0x00084280
   823c4:	00084284 	.word	0x00084284

000823c8 <__fputwc>:
   823c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823cc:	b082      	sub	sp, #8
   823ce:	4607      	mov	r7, r0
   823d0:	460e      	mov	r6, r1
   823d2:	4614      	mov	r4, r2
   823d4:	f000 fb68 	bl	82aa8 <__locale_mb_cur_max>
   823d8:	2801      	cmp	r0, #1
   823da:	d040      	beq.n	8245e <__fputwc+0x96>
   823dc:	4638      	mov	r0, r7
   823de:	a901      	add	r1, sp, #4
   823e0:	4632      	mov	r2, r6
   823e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   823e6:	f001 fae3 	bl	839b0 <_wcrtomb_r>
   823ea:	f1b0 3fff 	cmp.w	r0, #4294967295
   823ee:	4680      	mov	r8, r0
   823f0:	d02e      	beq.n	82450 <__fputwc+0x88>
   823f2:	2800      	cmp	r0, #0
   823f4:	d03b      	beq.n	8246e <__fputwc+0xa6>
   823f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   823fa:	2500      	movs	r5, #0
   823fc:	e009      	b.n	82412 <__fputwc+0x4a>
   823fe:	6823      	ldr	r3, [r4, #0]
   82400:	7019      	strb	r1, [r3, #0]
   82402:	6823      	ldr	r3, [r4, #0]
   82404:	3301      	adds	r3, #1
   82406:	6023      	str	r3, [r4, #0]
   82408:	3501      	adds	r5, #1
   8240a:	45a8      	cmp	r8, r5
   8240c:	d92f      	bls.n	8246e <__fputwc+0xa6>
   8240e:	ab01      	add	r3, sp, #4
   82410:	5d59      	ldrb	r1, [r3, r5]
   82412:	68a3      	ldr	r3, [r4, #8]
   82414:	3b01      	subs	r3, #1
   82416:	2b00      	cmp	r3, #0
   82418:	60a3      	str	r3, [r4, #8]
   8241a:	daf0      	bge.n	823fe <__fputwc+0x36>
   8241c:	69a2      	ldr	r2, [r4, #24]
   8241e:	4293      	cmp	r3, r2
   82420:	db06      	blt.n	82430 <__fputwc+0x68>
   82422:	6823      	ldr	r3, [r4, #0]
   82424:	7019      	strb	r1, [r3, #0]
   82426:	6823      	ldr	r3, [r4, #0]
   82428:	7819      	ldrb	r1, [r3, #0]
   8242a:	3301      	adds	r3, #1
   8242c:	290a      	cmp	r1, #10
   8242e:	d1ea      	bne.n	82406 <__fputwc+0x3e>
   82430:	4638      	mov	r0, r7
   82432:	4622      	mov	r2, r4
   82434:	f001 fa68 	bl	83908 <__swbuf_r>
   82438:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   8243c:	fab0 f080 	clz	r0, r0
   82440:	0940      	lsrs	r0, r0, #5
   82442:	2800      	cmp	r0, #0
   82444:	d0e0      	beq.n	82408 <__fputwc+0x40>
   82446:	f04f 30ff 	mov.w	r0, #4294967295
   8244a:	b002      	add	sp, #8
   8244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82450:	89a3      	ldrh	r3, [r4, #12]
   82452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82456:	81a3      	strh	r3, [r4, #12]
   82458:	b002      	add	sp, #8
   8245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8245e:	1e73      	subs	r3, r6, #1
   82460:	2bfe      	cmp	r3, #254	; 0xfe
   82462:	d8bb      	bhi.n	823dc <__fputwc+0x14>
   82464:	b2f1      	uxtb	r1, r6
   82466:	4680      	mov	r8, r0
   82468:	f88d 1004 	strb.w	r1, [sp, #4]
   8246c:	e7c5      	b.n	823fa <__fputwc+0x32>
   8246e:	4630      	mov	r0, r6
   82470:	b002      	add	sp, #8
   82472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82476:	bf00      	nop

00082478 <_fputwc_r>:
   82478:	8993      	ldrh	r3, [r2, #12]
   8247a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8247e:	d10b      	bne.n	82498 <_fputwc_r+0x20>
   82480:	b410      	push	{r4}
   82482:	6e54      	ldr	r4, [r2, #100]	; 0x64
   82484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82488:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8248c:	6654      	str	r4, [r2, #100]	; 0x64
   8248e:	8193      	strh	r3, [r2, #12]
   82490:	f85d 4b04 	ldr.w	r4, [sp], #4
   82494:	f7ff bf98 	b.w	823c8 <__fputwc>
   82498:	f7ff bf96 	b.w	823c8 <__fputwc>

0008249c <_malloc_trim_r>:
   8249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8249e:	460c      	mov	r4, r1
   824a0:	4f22      	ldr	r7, [pc, #136]	; (8252c <_malloc_trim_r+0x90>)
   824a2:	4606      	mov	r6, r0
   824a4:	f000 ff28 	bl	832f8 <__malloc_lock>
   824a8:	68bb      	ldr	r3, [r7, #8]
   824aa:	685d      	ldr	r5, [r3, #4]
   824ac:	f025 0503 	bic.w	r5, r5, #3
   824b0:	1b29      	subs	r1, r5, r4
   824b2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   824b6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   824ba:	f021 010f 	bic.w	r1, r1, #15
   824be:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   824c2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   824c6:	db07      	blt.n	824d8 <_malloc_trim_r+0x3c>
   824c8:	4630      	mov	r0, r6
   824ca:	2100      	movs	r1, #0
   824cc:	f001 f99a 	bl	83804 <_sbrk_r>
   824d0:	68bb      	ldr	r3, [r7, #8]
   824d2:	442b      	add	r3, r5
   824d4:	4298      	cmp	r0, r3
   824d6:	d004      	beq.n	824e2 <_malloc_trim_r+0x46>
   824d8:	4630      	mov	r0, r6
   824da:	f000 ff0f 	bl	832fc <__malloc_unlock>
   824de:	2000      	movs	r0, #0
   824e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   824e2:	4630      	mov	r0, r6
   824e4:	4261      	negs	r1, r4
   824e6:	f001 f98d 	bl	83804 <_sbrk_r>
   824ea:	3001      	adds	r0, #1
   824ec:	d00d      	beq.n	8250a <_malloc_trim_r+0x6e>
   824ee:	4b10      	ldr	r3, [pc, #64]	; (82530 <_malloc_trim_r+0x94>)
   824f0:	68ba      	ldr	r2, [r7, #8]
   824f2:	6819      	ldr	r1, [r3, #0]
   824f4:	1b2d      	subs	r5, r5, r4
   824f6:	f045 0501 	orr.w	r5, r5, #1
   824fa:	4630      	mov	r0, r6
   824fc:	1b09      	subs	r1, r1, r4
   824fe:	6055      	str	r5, [r2, #4]
   82500:	6019      	str	r1, [r3, #0]
   82502:	f000 fefb 	bl	832fc <__malloc_unlock>
   82506:	2001      	movs	r0, #1
   82508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8250a:	4630      	mov	r0, r6
   8250c:	2100      	movs	r1, #0
   8250e:	f001 f979 	bl	83804 <_sbrk_r>
   82512:	68ba      	ldr	r2, [r7, #8]
   82514:	1a83      	subs	r3, r0, r2
   82516:	2b0f      	cmp	r3, #15
   82518:	ddde      	ble.n	824d8 <_malloc_trim_r+0x3c>
   8251a:	4c06      	ldr	r4, [pc, #24]	; (82534 <_malloc_trim_r+0x98>)
   8251c:	4904      	ldr	r1, [pc, #16]	; (82530 <_malloc_trim_r+0x94>)
   8251e:	6824      	ldr	r4, [r4, #0]
   82520:	f043 0301 	orr.w	r3, r3, #1
   82524:	1b00      	subs	r0, r0, r4
   82526:	6053      	str	r3, [r2, #4]
   82528:	6008      	str	r0, [r1, #0]
   8252a:	e7d5      	b.n	824d8 <_malloc_trim_r+0x3c>
   8252c:	20070590 	.word	0x20070590
   82530:	20070ae0 	.word	0x20070ae0
   82534:	2007099c 	.word	0x2007099c

00082538 <_free_r>:
   82538:	2900      	cmp	r1, #0
   8253a:	d04e      	beq.n	825da <_free_r+0xa2>
   8253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82540:	460c      	mov	r4, r1
   82542:	4680      	mov	r8, r0
   82544:	f000 fed8 	bl	832f8 <__malloc_lock>
   82548:	f854 7c04 	ldr.w	r7, [r4, #-4]
   8254c:	4962      	ldr	r1, [pc, #392]	; (826d8 <_free_r+0x1a0>)
   8254e:	f1a4 0508 	sub.w	r5, r4, #8
   82552:	f027 0201 	bic.w	r2, r7, #1
   82556:	18ab      	adds	r3, r5, r2
   82558:	688e      	ldr	r6, [r1, #8]
   8255a:	6858      	ldr	r0, [r3, #4]
   8255c:	429e      	cmp	r6, r3
   8255e:	f020 0003 	bic.w	r0, r0, #3
   82562:	d05a      	beq.n	8261a <_free_r+0xe2>
   82564:	07fe      	lsls	r6, r7, #31
   82566:	6058      	str	r0, [r3, #4]
   82568:	d40b      	bmi.n	82582 <_free_r+0x4a>
   8256a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8256e:	f101 0e08 	add.w	lr, r1, #8
   82572:	1bed      	subs	r5, r5, r7
   82574:	68ac      	ldr	r4, [r5, #8]
   82576:	443a      	add	r2, r7
   82578:	4574      	cmp	r4, lr
   8257a:	d067      	beq.n	8264c <_free_r+0x114>
   8257c:	68ef      	ldr	r7, [r5, #12]
   8257e:	60e7      	str	r7, [r4, #12]
   82580:	60bc      	str	r4, [r7, #8]
   82582:	181c      	adds	r4, r3, r0
   82584:	6864      	ldr	r4, [r4, #4]
   82586:	07e4      	lsls	r4, r4, #31
   82588:	d40c      	bmi.n	825a4 <_free_r+0x6c>
   8258a:	4f54      	ldr	r7, [pc, #336]	; (826dc <_free_r+0x1a4>)
   8258c:	689c      	ldr	r4, [r3, #8]
   8258e:	4402      	add	r2, r0
   82590:	42bc      	cmp	r4, r7
   82592:	d07c      	beq.n	8268e <_free_r+0x156>
   82594:	68d8      	ldr	r0, [r3, #12]
   82596:	f042 0301 	orr.w	r3, r2, #1
   8259a:	60e0      	str	r0, [r4, #12]
   8259c:	6084      	str	r4, [r0, #8]
   8259e:	606b      	str	r3, [r5, #4]
   825a0:	50aa      	str	r2, [r5, r2]
   825a2:	e003      	b.n	825ac <_free_r+0x74>
   825a4:	f042 0301 	orr.w	r3, r2, #1
   825a8:	606b      	str	r3, [r5, #4]
   825aa:	50aa      	str	r2, [r5, r2]
   825ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   825b0:	d214      	bcs.n	825dc <_free_r+0xa4>
   825b2:	08d2      	lsrs	r2, r2, #3
   825b4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   825b8:	2401      	movs	r4, #1
   825ba:	6848      	ldr	r0, [r1, #4]
   825bc:	1092      	asrs	r2, r2, #2
   825be:	fa04 f202 	lsl.w	r2, r4, r2
   825c2:	689c      	ldr	r4, [r3, #8]
   825c4:	4310      	orrs	r0, r2
   825c6:	60ac      	str	r4, [r5, #8]
   825c8:	60eb      	str	r3, [r5, #12]
   825ca:	6048      	str	r0, [r1, #4]
   825cc:	609d      	str	r5, [r3, #8]
   825ce:	60e5      	str	r5, [r4, #12]
   825d0:	4640      	mov	r0, r8
   825d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   825d6:	f000 be91 	b.w	832fc <__malloc_unlock>
   825da:	4770      	bx	lr
   825dc:	0a53      	lsrs	r3, r2, #9
   825de:	2b04      	cmp	r3, #4
   825e0:	d847      	bhi.n	82672 <_free_r+0x13a>
   825e2:	0993      	lsrs	r3, r2, #6
   825e4:	f103 0438 	add.w	r4, r3, #56	; 0x38
   825e8:	0060      	lsls	r0, r4, #1
   825ea:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   825ee:	6883      	ldr	r3, [r0, #8]
   825f0:	4939      	ldr	r1, [pc, #228]	; (826d8 <_free_r+0x1a0>)
   825f2:	4283      	cmp	r3, r0
   825f4:	d043      	beq.n	8267e <_free_r+0x146>
   825f6:	6859      	ldr	r1, [r3, #4]
   825f8:	f021 0103 	bic.w	r1, r1, #3
   825fc:	4291      	cmp	r1, r2
   825fe:	d902      	bls.n	82606 <_free_r+0xce>
   82600:	689b      	ldr	r3, [r3, #8]
   82602:	4298      	cmp	r0, r3
   82604:	d1f7      	bne.n	825f6 <_free_r+0xbe>
   82606:	68da      	ldr	r2, [r3, #12]
   82608:	60ea      	str	r2, [r5, #12]
   8260a:	60ab      	str	r3, [r5, #8]
   8260c:	4640      	mov	r0, r8
   8260e:	6095      	str	r5, [r2, #8]
   82610:	60dd      	str	r5, [r3, #12]
   82612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82616:	f000 be71 	b.w	832fc <__malloc_unlock>
   8261a:	07ff      	lsls	r7, r7, #31
   8261c:	4402      	add	r2, r0
   8261e:	d407      	bmi.n	82630 <_free_r+0xf8>
   82620:	f854 4c08 	ldr.w	r4, [r4, #-8]
   82624:	1b2d      	subs	r5, r5, r4
   82626:	68eb      	ldr	r3, [r5, #12]
   82628:	68a8      	ldr	r0, [r5, #8]
   8262a:	4422      	add	r2, r4
   8262c:	60c3      	str	r3, [r0, #12]
   8262e:	6098      	str	r0, [r3, #8]
   82630:	4b2b      	ldr	r3, [pc, #172]	; (826e0 <_free_r+0x1a8>)
   82632:	f042 0001 	orr.w	r0, r2, #1
   82636:	681b      	ldr	r3, [r3, #0]
   82638:	6068      	str	r0, [r5, #4]
   8263a:	429a      	cmp	r2, r3
   8263c:	608d      	str	r5, [r1, #8]
   8263e:	d3c7      	bcc.n	825d0 <_free_r+0x98>
   82640:	4b28      	ldr	r3, [pc, #160]	; (826e4 <_free_r+0x1ac>)
   82642:	4640      	mov	r0, r8
   82644:	6819      	ldr	r1, [r3, #0]
   82646:	f7ff ff29 	bl	8249c <_malloc_trim_r>
   8264a:	e7c1      	b.n	825d0 <_free_r+0x98>
   8264c:	1819      	adds	r1, r3, r0
   8264e:	6849      	ldr	r1, [r1, #4]
   82650:	07c9      	lsls	r1, r1, #31
   82652:	d409      	bmi.n	82668 <_free_r+0x130>
   82654:	68d9      	ldr	r1, [r3, #12]
   82656:	4402      	add	r2, r0
   82658:	689b      	ldr	r3, [r3, #8]
   8265a:	f042 0001 	orr.w	r0, r2, #1
   8265e:	60d9      	str	r1, [r3, #12]
   82660:	608b      	str	r3, [r1, #8]
   82662:	6068      	str	r0, [r5, #4]
   82664:	50aa      	str	r2, [r5, r2]
   82666:	e7b3      	b.n	825d0 <_free_r+0x98>
   82668:	f042 0301 	orr.w	r3, r2, #1
   8266c:	606b      	str	r3, [r5, #4]
   8266e:	50aa      	str	r2, [r5, r2]
   82670:	e7ae      	b.n	825d0 <_free_r+0x98>
   82672:	2b14      	cmp	r3, #20
   82674:	d814      	bhi.n	826a0 <_free_r+0x168>
   82676:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8267a:	0060      	lsls	r0, r4, #1
   8267c:	e7b5      	b.n	825ea <_free_r+0xb2>
   8267e:	684a      	ldr	r2, [r1, #4]
   82680:	10a4      	asrs	r4, r4, #2
   82682:	2001      	movs	r0, #1
   82684:	40a0      	lsls	r0, r4
   82686:	4302      	orrs	r2, r0
   82688:	604a      	str	r2, [r1, #4]
   8268a:	461a      	mov	r2, r3
   8268c:	e7bc      	b.n	82608 <_free_r+0xd0>
   8268e:	f042 0301 	orr.w	r3, r2, #1
   82692:	614d      	str	r5, [r1, #20]
   82694:	610d      	str	r5, [r1, #16]
   82696:	60ec      	str	r4, [r5, #12]
   82698:	60ac      	str	r4, [r5, #8]
   8269a:	606b      	str	r3, [r5, #4]
   8269c:	50aa      	str	r2, [r5, r2]
   8269e:	e797      	b.n	825d0 <_free_r+0x98>
   826a0:	2b54      	cmp	r3, #84	; 0x54
   826a2:	d804      	bhi.n	826ae <_free_r+0x176>
   826a4:	0b13      	lsrs	r3, r2, #12
   826a6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   826aa:	0060      	lsls	r0, r4, #1
   826ac:	e79d      	b.n	825ea <_free_r+0xb2>
   826ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   826b2:	d804      	bhi.n	826be <_free_r+0x186>
   826b4:	0bd3      	lsrs	r3, r2, #15
   826b6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   826ba:	0060      	lsls	r0, r4, #1
   826bc:	e795      	b.n	825ea <_free_r+0xb2>
   826be:	f240 5054 	movw	r0, #1364	; 0x554
   826c2:	4283      	cmp	r3, r0
   826c4:	d804      	bhi.n	826d0 <_free_r+0x198>
   826c6:	0c93      	lsrs	r3, r2, #18
   826c8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   826cc:	0060      	lsls	r0, r4, #1
   826ce:	e78c      	b.n	825ea <_free_r+0xb2>
   826d0:	20fc      	movs	r0, #252	; 0xfc
   826d2:	247e      	movs	r4, #126	; 0x7e
   826d4:	e789      	b.n	825ea <_free_r+0xb2>
   826d6:	bf00      	nop
   826d8:	20070590 	.word	0x20070590
   826dc:	20070598 	.word	0x20070598
   826e0:	20070998 	.word	0x20070998
   826e4:	20070adc 	.word	0x20070adc

000826e8 <__sfvwrite_r>:
   826e8:	6893      	ldr	r3, [r2, #8]
   826ea:	2b00      	cmp	r3, #0
   826ec:	f000 80b1 	beq.w	82852 <__sfvwrite_r+0x16a>
   826f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826f4:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   826f8:	b083      	sub	sp, #12
   826fa:	f01e 0f08 	tst.w	lr, #8
   826fe:	460c      	mov	r4, r1
   82700:	4681      	mov	r9, r0
   82702:	4616      	mov	r6, r2
   82704:	d028      	beq.n	82758 <__sfvwrite_r+0x70>
   82706:	690b      	ldr	r3, [r1, #16]
   82708:	b333      	cbz	r3, 82758 <__sfvwrite_r+0x70>
   8270a:	f00e 0802 	and.w	r8, lr, #2
   8270e:	fa1f f088 	uxth.w	r0, r8
   82712:	6835      	ldr	r5, [r6, #0]
   82714:	b380      	cbz	r0, 82778 <__sfvwrite_r+0x90>
   82716:	f04f 0b00 	mov.w	fp, #0
   8271a:	46d8      	mov	r8, fp
   8271c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 82a04 <__sfvwrite_r+0x31c>
   82720:	f1b8 0f00 	cmp.w	r8, #0
   82724:	f000 808f 	beq.w	82846 <__sfvwrite_r+0x15e>
   82728:	45d0      	cmp	r8, sl
   8272a:	4643      	mov	r3, r8
   8272c:	4648      	mov	r0, r9
   8272e:	bf28      	it	cs
   82730:	4653      	movcs	r3, sl
   82732:	69e1      	ldr	r1, [r4, #28]
   82734:	465a      	mov	r2, fp
   82736:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82738:	47b8      	blx	r7
   8273a:	2800      	cmp	r0, #0
   8273c:	f340 80a8 	ble.w	82890 <__sfvwrite_r+0x1a8>
   82740:	68b3      	ldr	r3, [r6, #8]
   82742:	4483      	add	fp, r0
   82744:	1a1b      	subs	r3, r3, r0
   82746:	ebc0 0808 	rsb	r8, r0, r8
   8274a:	60b3      	str	r3, [r6, #8]
   8274c:	2b00      	cmp	r3, #0
   8274e:	d1e7      	bne.n	82720 <__sfvwrite_r+0x38>
   82750:	2000      	movs	r0, #0
   82752:	b003      	add	sp, #12
   82754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82758:	4648      	mov	r0, r9
   8275a:	4621      	mov	r1, r4
   8275c:	f7ff fc58 	bl	82010 <__swsetup_r>
   82760:	2800      	cmp	r0, #0
   82762:	f040 8146 	bne.w	829f2 <__sfvwrite_r+0x30a>
   82766:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8276a:	6835      	ldr	r5, [r6, #0]
   8276c:	f00e 0802 	and.w	r8, lr, #2
   82770:	fa1f f088 	uxth.w	r0, r8
   82774:	2800      	cmp	r0, #0
   82776:	d1ce      	bne.n	82716 <__sfvwrite_r+0x2e>
   82778:	f01e 0b01 	ands.w	fp, lr, #1
   8277c:	f040 8091 	bne.w	828a2 <__sfvwrite_r+0x1ba>
   82780:	46d8      	mov	r8, fp
   82782:	f1b8 0f00 	cmp.w	r8, #0
   82786:	d058      	beq.n	8283a <__sfvwrite_r+0x152>
   82788:	f41e 7f00 	tst.w	lr, #512	; 0x200
   8278c:	68a7      	ldr	r7, [r4, #8]
   8278e:	d062      	beq.n	82856 <__sfvwrite_r+0x16e>
   82790:	45b8      	cmp	r8, r7
   82792:	46ba      	mov	sl, r7
   82794:	f0c0 80c2 	bcc.w	8291c <__sfvwrite_r+0x234>
   82798:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   8279c:	f000 80c0 	beq.w	82920 <__sfvwrite_r+0x238>
   827a0:	6967      	ldr	r7, [r4, #20]
   827a2:	6921      	ldr	r1, [r4, #16]
   827a4:	6823      	ldr	r3, [r4, #0]
   827a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   827aa:	1a5b      	subs	r3, r3, r1
   827ac:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   827b0:	1c58      	adds	r0, r3, #1
   827b2:	107f      	asrs	r7, r7, #1
   827b4:	4440      	add	r0, r8
   827b6:	4287      	cmp	r7, r0
   827b8:	463a      	mov	r2, r7
   827ba:	bf3c      	itt	cc
   827bc:	4607      	movcc	r7, r0
   827be:	463a      	movcc	r2, r7
   827c0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   827c4:	9300      	str	r3, [sp, #0]
   827c6:	f000 80fb 	beq.w	829c0 <__sfvwrite_r+0x2d8>
   827ca:	4611      	mov	r1, r2
   827cc:	4648      	mov	r0, r9
   827ce:	f000 f9e9 	bl	82ba4 <_malloc_r>
   827d2:	9b00      	ldr	r3, [sp, #0]
   827d4:	4682      	mov	sl, r0
   827d6:	2800      	cmp	r0, #0
   827d8:	f000 810e 	beq.w	829f8 <__sfvwrite_r+0x310>
   827dc:	461a      	mov	r2, r3
   827de:	6921      	ldr	r1, [r4, #16]
   827e0:	9300      	str	r3, [sp, #0]
   827e2:	f000 fcaf 	bl	83144 <memcpy>
   827e6:	89a2      	ldrh	r2, [r4, #12]
   827e8:	9b00      	ldr	r3, [sp, #0]
   827ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   827ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   827f2:	81a2      	strh	r2, [r4, #12]
   827f4:	eb0a 0003 	add.w	r0, sl, r3
   827f8:	f8c4 a010 	str.w	sl, [r4, #16]
   827fc:	1afb      	subs	r3, r7, r3
   827fe:	6167      	str	r7, [r4, #20]
   82800:	46c2      	mov	sl, r8
   82802:	4647      	mov	r7, r8
   82804:	6020      	str	r0, [r4, #0]
   82806:	60a3      	str	r3, [r4, #8]
   82808:	4652      	mov	r2, sl
   8280a:	4659      	mov	r1, fp
   8280c:	f000 fd10 	bl	83230 <memmove>
   82810:	68a0      	ldr	r0, [r4, #8]
   82812:	6822      	ldr	r2, [r4, #0]
   82814:	1bc0      	subs	r0, r0, r7
   82816:	60a0      	str	r0, [r4, #8]
   82818:	4640      	mov	r0, r8
   8281a:	eb02 030a 	add.w	r3, r2, sl
   8281e:	6023      	str	r3, [r4, #0]
   82820:	68b3      	ldr	r3, [r6, #8]
   82822:	4483      	add	fp, r0
   82824:	1a1b      	subs	r3, r3, r0
   82826:	ebc0 0808 	rsb	r8, r0, r8
   8282a:	60b3      	str	r3, [r6, #8]
   8282c:	2b00      	cmp	r3, #0
   8282e:	d08f      	beq.n	82750 <__sfvwrite_r+0x68>
   82830:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   82834:	f1b8 0f00 	cmp.w	r8, #0
   82838:	d1a6      	bne.n	82788 <__sfvwrite_r+0xa0>
   8283a:	f8d5 b000 	ldr.w	fp, [r5]
   8283e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82842:	3508      	adds	r5, #8
   82844:	e79d      	b.n	82782 <__sfvwrite_r+0x9a>
   82846:	f8d5 b000 	ldr.w	fp, [r5]
   8284a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8284e:	3508      	adds	r5, #8
   82850:	e766      	b.n	82720 <__sfvwrite_r+0x38>
   82852:	2000      	movs	r0, #0
   82854:	4770      	bx	lr
   82856:	6820      	ldr	r0, [r4, #0]
   82858:	6923      	ldr	r3, [r4, #16]
   8285a:	4298      	cmp	r0, r3
   8285c:	d803      	bhi.n	82866 <__sfvwrite_r+0x17e>
   8285e:	6962      	ldr	r2, [r4, #20]
   82860:	4590      	cmp	r8, r2
   82862:	f080 8085 	bcs.w	82970 <__sfvwrite_r+0x288>
   82866:	4547      	cmp	r7, r8
   82868:	bf28      	it	cs
   8286a:	4647      	movcs	r7, r8
   8286c:	4659      	mov	r1, fp
   8286e:	463a      	mov	r2, r7
   82870:	f000 fcde 	bl	83230 <memmove>
   82874:	68a3      	ldr	r3, [r4, #8]
   82876:	6822      	ldr	r2, [r4, #0]
   82878:	1bdb      	subs	r3, r3, r7
   8287a:	443a      	add	r2, r7
   8287c:	60a3      	str	r3, [r4, #8]
   8287e:	6022      	str	r2, [r4, #0]
   82880:	2b00      	cmp	r3, #0
   82882:	d149      	bne.n	82918 <__sfvwrite_r+0x230>
   82884:	4648      	mov	r0, r9
   82886:	4621      	mov	r1, r4
   82888:	f7ff fcd8 	bl	8223c <_fflush_r>
   8288c:	2800      	cmp	r0, #0
   8288e:	d043      	beq.n	82918 <__sfvwrite_r+0x230>
   82890:	89a3      	ldrh	r3, [r4, #12]
   82892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82896:	f04f 30ff 	mov.w	r0, #4294967295
   8289a:	81a3      	strh	r3, [r4, #12]
   8289c:	b003      	add	sp, #12
   8289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828a2:	4680      	mov	r8, r0
   828a4:	4683      	mov	fp, r0
   828a6:	4682      	mov	sl, r0
   828a8:	9000      	str	r0, [sp, #0]
   828aa:	f1ba 0f00 	cmp.w	sl, #0
   828ae:	d02b      	beq.n	82908 <__sfvwrite_r+0x220>
   828b0:	9b00      	ldr	r3, [sp, #0]
   828b2:	2b00      	cmp	r3, #0
   828b4:	d04f      	beq.n	82956 <__sfvwrite_r+0x26e>
   828b6:	45d0      	cmp	r8, sl
   828b8:	4643      	mov	r3, r8
   828ba:	bf28      	it	cs
   828bc:	4653      	movcs	r3, sl
   828be:	6820      	ldr	r0, [r4, #0]
   828c0:	6921      	ldr	r1, [r4, #16]
   828c2:	461f      	mov	r7, r3
   828c4:	4288      	cmp	r0, r1
   828c6:	f8d4 e008 	ldr.w	lr, [r4, #8]
   828ca:	6962      	ldr	r2, [r4, #20]
   828cc:	d903      	bls.n	828d6 <__sfvwrite_r+0x1ee>
   828ce:	eb0e 0c02 	add.w	ip, lr, r2
   828d2:	4563      	cmp	r3, ip
   828d4:	dc5e      	bgt.n	82994 <__sfvwrite_r+0x2ac>
   828d6:	4293      	cmp	r3, r2
   828d8:	db24      	blt.n	82924 <__sfvwrite_r+0x23c>
   828da:	4613      	mov	r3, r2
   828dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   828de:	4648      	mov	r0, r9
   828e0:	69e1      	ldr	r1, [r4, #28]
   828e2:	465a      	mov	r2, fp
   828e4:	47b8      	blx	r7
   828e6:	1e07      	subs	r7, r0, #0
   828e8:	ddd2      	ble.n	82890 <__sfvwrite_r+0x1a8>
   828ea:	ebb8 0807 	subs.w	r8, r8, r7
   828ee:	d029      	beq.n	82944 <__sfvwrite_r+0x25c>
   828f0:	68b3      	ldr	r3, [r6, #8]
   828f2:	44bb      	add	fp, r7
   828f4:	1bdb      	subs	r3, r3, r7
   828f6:	ebc7 0a0a 	rsb	sl, r7, sl
   828fa:	60b3      	str	r3, [r6, #8]
   828fc:	2b00      	cmp	r3, #0
   828fe:	f43f af27 	beq.w	82750 <__sfvwrite_r+0x68>
   82902:	f1ba 0f00 	cmp.w	sl, #0
   82906:	d1d3      	bne.n	828b0 <__sfvwrite_r+0x1c8>
   82908:	2300      	movs	r3, #0
   8290a:	f8d5 b000 	ldr.w	fp, [r5]
   8290e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   82912:	9300      	str	r3, [sp, #0]
   82914:	3508      	adds	r5, #8
   82916:	e7c8      	b.n	828aa <__sfvwrite_r+0x1c2>
   82918:	4638      	mov	r0, r7
   8291a:	e781      	b.n	82820 <__sfvwrite_r+0x138>
   8291c:	4647      	mov	r7, r8
   8291e:	46c2      	mov	sl, r8
   82920:	6820      	ldr	r0, [r4, #0]
   82922:	e771      	b.n	82808 <__sfvwrite_r+0x120>
   82924:	461a      	mov	r2, r3
   82926:	4659      	mov	r1, fp
   82928:	9301      	str	r3, [sp, #4]
   8292a:	f000 fc81 	bl	83230 <memmove>
   8292e:	68a2      	ldr	r2, [r4, #8]
   82930:	6821      	ldr	r1, [r4, #0]
   82932:	9b01      	ldr	r3, [sp, #4]
   82934:	ebb8 0807 	subs.w	r8, r8, r7
   82938:	eba2 0203 	sub.w	r2, r2, r3
   8293c:	440b      	add	r3, r1
   8293e:	60a2      	str	r2, [r4, #8]
   82940:	6023      	str	r3, [r4, #0]
   82942:	d1d5      	bne.n	828f0 <__sfvwrite_r+0x208>
   82944:	4648      	mov	r0, r9
   82946:	4621      	mov	r1, r4
   82948:	f7ff fc78 	bl	8223c <_fflush_r>
   8294c:	2800      	cmp	r0, #0
   8294e:	d19f      	bne.n	82890 <__sfvwrite_r+0x1a8>
   82950:	f8cd 8000 	str.w	r8, [sp]
   82954:	e7cc      	b.n	828f0 <__sfvwrite_r+0x208>
   82956:	4658      	mov	r0, fp
   82958:	210a      	movs	r1, #10
   8295a:	4652      	mov	r2, sl
   8295c:	f000 fba8 	bl	830b0 <memchr>
   82960:	2800      	cmp	r0, #0
   82962:	d041      	beq.n	829e8 <__sfvwrite_r+0x300>
   82964:	3001      	adds	r0, #1
   82966:	2301      	movs	r3, #1
   82968:	ebcb 0800 	rsb	r8, fp, r0
   8296c:	9300      	str	r3, [sp, #0]
   8296e:	e7a2      	b.n	828b6 <__sfvwrite_r+0x1ce>
   82970:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   82974:	4543      	cmp	r3, r8
   82976:	bf28      	it	cs
   82978:	4643      	movcs	r3, r8
   8297a:	fb93 f3f2 	sdiv	r3, r3, r2
   8297e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82980:	fb03 f302 	mul.w	r3, r3, r2
   82984:	4648      	mov	r0, r9
   82986:	69e1      	ldr	r1, [r4, #28]
   82988:	465a      	mov	r2, fp
   8298a:	47b8      	blx	r7
   8298c:	2800      	cmp	r0, #0
   8298e:	f73f af47 	bgt.w	82820 <__sfvwrite_r+0x138>
   82992:	e77d      	b.n	82890 <__sfvwrite_r+0x1a8>
   82994:	4662      	mov	r2, ip
   82996:	4659      	mov	r1, fp
   82998:	f8cd c004 	str.w	ip, [sp, #4]
   8299c:	f000 fc48 	bl	83230 <memmove>
   829a0:	6823      	ldr	r3, [r4, #0]
   829a2:	f8dd c004 	ldr.w	ip, [sp, #4]
   829a6:	4648      	mov	r0, r9
   829a8:	4463      	add	r3, ip
   829aa:	6023      	str	r3, [r4, #0]
   829ac:	4621      	mov	r1, r4
   829ae:	f7ff fc45 	bl	8223c <_fflush_r>
   829b2:	f8dd c004 	ldr.w	ip, [sp, #4]
   829b6:	2800      	cmp	r0, #0
   829b8:	f47f af6a 	bne.w	82890 <__sfvwrite_r+0x1a8>
   829bc:	4667      	mov	r7, ip
   829be:	e794      	b.n	828ea <__sfvwrite_r+0x202>
   829c0:	4648      	mov	r0, r9
   829c2:	f000 fc9d 	bl	83300 <_realloc_r>
   829c6:	9b00      	ldr	r3, [sp, #0]
   829c8:	4682      	mov	sl, r0
   829ca:	2800      	cmp	r0, #0
   829cc:	f47f af12 	bne.w	827f4 <__sfvwrite_r+0x10c>
   829d0:	4648      	mov	r0, r9
   829d2:	6921      	ldr	r1, [r4, #16]
   829d4:	f7ff fdb0 	bl	82538 <_free_r>
   829d8:	89a3      	ldrh	r3, [r4, #12]
   829da:	220c      	movs	r2, #12
   829dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   829e0:	b29b      	uxth	r3, r3
   829e2:	f8c9 2000 	str.w	r2, [r9]
   829e6:	e754      	b.n	82892 <__sfvwrite_r+0x1aa>
   829e8:	2301      	movs	r3, #1
   829ea:	f10a 0801 	add.w	r8, sl, #1
   829ee:	9300      	str	r3, [sp, #0]
   829f0:	e761      	b.n	828b6 <__sfvwrite_r+0x1ce>
   829f2:	f04f 30ff 	mov.w	r0, #4294967295
   829f6:	e6ac      	b.n	82752 <__sfvwrite_r+0x6a>
   829f8:	230c      	movs	r3, #12
   829fa:	f8c9 3000 	str.w	r3, [r9]
   829fe:	89a3      	ldrh	r3, [r4, #12]
   82a00:	e747      	b.n	82892 <__sfvwrite_r+0x1aa>
   82a02:	bf00      	nop
   82a04:	7ffffc00 	.word	0x7ffffc00

00082a08 <_fwalk>:
   82a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a0c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82a10:	d01a      	beq.n	82a48 <_fwalk+0x40>
   82a12:	4688      	mov	r8, r1
   82a14:	2600      	movs	r6, #0
   82a16:	687d      	ldr	r5, [r7, #4]
   82a18:	68bc      	ldr	r4, [r7, #8]
   82a1a:	3d01      	subs	r5, #1
   82a1c:	d40e      	bmi.n	82a3c <_fwalk+0x34>
   82a1e:	89a3      	ldrh	r3, [r4, #12]
   82a20:	3d01      	subs	r5, #1
   82a22:	2b01      	cmp	r3, #1
   82a24:	d906      	bls.n	82a34 <_fwalk+0x2c>
   82a26:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82a2a:	3301      	adds	r3, #1
   82a2c:	d002      	beq.n	82a34 <_fwalk+0x2c>
   82a2e:	4620      	mov	r0, r4
   82a30:	47c0      	blx	r8
   82a32:	4306      	orrs	r6, r0
   82a34:	1c6b      	adds	r3, r5, #1
   82a36:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82a3a:	d1f0      	bne.n	82a1e <_fwalk+0x16>
   82a3c:	683f      	ldr	r7, [r7, #0]
   82a3e:	2f00      	cmp	r7, #0
   82a40:	d1e9      	bne.n	82a16 <_fwalk+0xe>
   82a42:	4630      	mov	r0, r6
   82a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a48:	463e      	mov	r6, r7
   82a4a:	4630      	mov	r0, r6
   82a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082a50 <_fwalk_reent>:
   82a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82a54:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82a58:	d01e      	beq.n	82a98 <_fwalk_reent+0x48>
   82a5a:	4688      	mov	r8, r1
   82a5c:	4607      	mov	r7, r0
   82a5e:	f04f 0900 	mov.w	r9, #0
   82a62:	6875      	ldr	r5, [r6, #4]
   82a64:	68b4      	ldr	r4, [r6, #8]
   82a66:	3d01      	subs	r5, #1
   82a68:	d410      	bmi.n	82a8c <_fwalk_reent+0x3c>
   82a6a:	89a3      	ldrh	r3, [r4, #12]
   82a6c:	3d01      	subs	r5, #1
   82a6e:	2b01      	cmp	r3, #1
   82a70:	d908      	bls.n	82a84 <_fwalk_reent+0x34>
   82a72:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82a76:	3301      	adds	r3, #1
   82a78:	d004      	beq.n	82a84 <_fwalk_reent+0x34>
   82a7a:	4638      	mov	r0, r7
   82a7c:	4621      	mov	r1, r4
   82a7e:	47c0      	blx	r8
   82a80:	ea49 0900 	orr.w	r9, r9, r0
   82a84:	1c6b      	adds	r3, r5, #1
   82a86:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82a8a:	d1ee      	bne.n	82a6a <_fwalk_reent+0x1a>
   82a8c:	6836      	ldr	r6, [r6, #0]
   82a8e:	2e00      	cmp	r6, #0
   82a90:	d1e7      	bne.n	82a62 <_fwalk_reent+0x12>
   82a92:	4648      	mov	r0, r9
   82a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a98:	46b1      	mov	r9, r6
   82a9a:	4648      	mov	r0, r9
   82a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082aa0 <__locale_charset>:
   82aa0:	4800      	ldr	r0, [pc, #0]	; (82aa4 <__locale_charset+0x4>)
   82aa2:	4770      	bx	lr
   82aa4:	2007056c 	.word	0x2007056c

00082aa8 <__locale_mb_cur_max>:
   82aa8:	4b01      	ldr	r3, [pc, #4]	; (82ab0 <__locale_mb_cur_max+0x8>)
   82aaa:	6818      	ldr	r0, [r3, #0]
   82aac:	4770      	bx	lr
   82aae:	bf00      	nop
   82ab0:	2007058c 	.word	0x2007058c

00082ab4 <__smakebuf_r>:
   82ab4:	898b      	ldrh	r3, [r1, #12]
   82ab6:	b29a      	uxth	r2, r3
   82ab8:	f012 0f02 	tst.w	r2, #2
   82abc:	d13c      	bne.n	82b38 <__smakebuf_r+0x84>
   82abe:	b5f0      	push	{r4, r5, r6, r7, lr}
   82ac0:	460c      	mov	r4, r1
   82ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82ac6:	b091      	sub	sp, #68	; 0x44
   82ac8:	2900      	cmp	r1, #0
   82aca:	4605      	mov	r5, r0
   82acc:	db19      	blt.n	82b02 <__smakebuf_r+0x4e>
   82ace:	aa01      	add	r2, sp, #4
   82ad0:	f001 f860 	bl	83b94 <_fstat_r>
   82ad4:	2800      	cmp	r0, #0
   82ad6:	db12      	blt.n	82afe <__smakebuf_r+0x4a>
   82ad8:	9b02      	ldr	r3, [sp, #8]
   82ada:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82ade:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   82ae2:	fab7 f787 	clz	r7, r7
   82ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82aea:	ea4f 1757 	mov.w	r7, r7, lsr #5
   82aee:	d02a      	beq.n	82b46 <__smakebuf_r+0x92>
   82af0:	89a3      	ldrh	r3, [r4, #12]
   82af2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82afa:	81a3      	strh	r3, [r4, #12]
   82afc:	e00b      	b.n	82b16 <__smakebuf_r+0x62>
   82afe:	89a3      	ldrh	r3, [r4, #12]
   82b00:	b29a      	uxth	r2, r3
   82b02:	f012 0f80 	tst.w	r2, #128	; 0x80
   82b06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b0a:	81a3      	strh	r3, [r4, #12]
   82b0c:	bf0c      	ite	eq
   82b0e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82b12:	2640      	movne	r6, #64	; 0x40
   82b14:	2700      	movs	r7, #0
   82b16:	4628      	mov	r0, r5
   82b18:	4631      	mov	r1, r6
   82b1a:	f000 f843 	bl	82ba4 <_malloc_r>
   82b1e:	89a3      	ldrh	r3, [r4, #12]
   82b20:	b340      	cbz	r0, 82b74 <__smakebuf_r+0xc0>
   82b22:	4a1a      	ldr	r2, [pc, #104]	; (82b8c <__smakebuf_r+0xd8>)
   82b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b28:	63ea      	str	r2, [r5, #60]	; 0x3c
   82b2a:	81a3      	strh	r3, [r4, #12]
   82b2c:	6020      	str	r0, [r4, #0]
   82b2e:	6120      	str	r0, [r4, #16]
   82b30:	6166      	str	r6, [r4, #20]
   82b32:	b99f      	cbnz	r7, 82b5c <__smakebuf_r+0xa8>
   82b34:	b011      	add	sp, #68	; 0x44
   82b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b38:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82b3c:	2201      	movs	r2, #1
   82b3e:	600b      	str	r3, [r1, #0]
   82b40:	610b      	str	r3, [r1, #16]
   82b42:	614a      	str	r2, [r1, #20]
   82b44:	4770      	bx	lr
   82b46:	4b12      	ldr	r3, [pc, #72]	; (82b90 <__smakebuf_r+0xdc>)
   82b48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   82b4a:	429a      	cmp	r2, r3
   82b4c:	d1d0      	bne.n	82af0 <__smakebuf_r+0x3c>
   82b4e:	89a3      	ldrh	r3, [r4, #12]
   82b50:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82b54:	4333      	orrs	r3, r6
   82b56:	81a3      	strh	r3, [r4, #12]
   82b58:	64e6      	str	r6, [r4, #76]	; 0x4c
   82b5a:	e7dc      	b.n	82b16 <__smakebuf_r+0x62>
   82b5c:	4628      	mov	r0, r5
   82b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b62:	f001 f82b 	bl	83bbc <_isatty_r>
   82b66:	2800      	cmp	r0, #0
   82b68:	d0e4      	beq.n	82b34 <__smakebuf_r+0x80>
   82b6a:	89a3      	ldrh	r3, [r4, #12]
   82b6c:	f043 0301 	orr.w	r3, r3, #1
   82b70:	81a3      	strh	r3, [r4, #12]
   82b72:	e7df      	b.n	82b34 <__smakebuf_r+0x80>
   82b74:	059a      	lsls	r2, r3, #22
   82b76:	d4dd      	bmi.n	82b34 <__smakebuf_r+0x80>
   82b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82b7c:	f043 0302 	orr.w	r3, r3, #2
   82b80:	2101      	movs	r1, #1
   82b82:	81a3      	strh	r3, [r4, #12]
   82b84:	6022      	str	r2, [r4, #0]
   82b86:	6122      	str	r2, [r4, #16]
   82b88:	6161      	str	r1, [r4, #20]
   82b8a:	e7d3      	b.n	82b34 <__smakebuf_r+0x80>
   82b8c:	0008228d 	.word	0x0008228d
   82b90:	00083885 	.word	0x00083885

00082b94 <malloc>:
   82b94:	4b02      	ldr	r3, [pc, #8]	; (82ba0 <malloc+0xc>)
   82b96:	4601      	mov	r1, r0
   82b98:	6818      	ldr	r0, [r3, #0]
   82b9a:	f000 b803 	b.w	82ba4 <_malloc_r>
   82b9e:	bf00      	nop
   82ba0:	20070568 	.word	0x20070568

00082ba4 <_malloc_r>:
   82ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ba8:	f101 050b 	add.w	r5, r1, #11
   82bac:	2d16      	cmp	r5, #22
   82bae:	b083      	sub	sp, #12
   82bb0:	4606      	mov	r6, r0
   82bb2:	d927      	bls.n	82c04 <_malloc_r+0x60>
   82bb4:	f035 0507 	bics.w	r5, r5, #7
   82bb8:	f100 80b6 	bmi.w	82d28 <_malloc_r+0x184>
   82bbc:	42a9      	cmp	r1, r5
   82bbe:	f200 80b3 	bhi.w	82d28 <_malloc_r+0x184>
   82bc2:	f000 fb99 	bl	832f8 <__malloc_lock>
   82bc6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82bca:	d222      	bcs.n	82c12 <_malloc_r+0x6e>
   82bcc:	4fbc      	ldr	r7, [pc, #752]	; (82ec0 <_malloc_r+0x31c>)
   82bce:	08e8      	lsrs	r0, r5, #3
   82bd0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82bd4:	68dc      	ldr	r4, [r3, #12]
   82bd6:	429c      	cmp	r4, r3
   82bd8:	f000 81bc 	beq.w	82f54 <_malloc_r+0x3b0>
   82bdc:	6863      	ldr	r3, [r4, #4]
   82bde:	68e1      	ldr	r1, [r4, #12]
   82be0:	f023 0303 	bic.w	r3, r3, #3
   82be4:	4423      	add	r3, r4
   82be6:	685a      	ldr	r2, [r3, #4]
   82be8:	68a5      	ldr	r5, [r4, #8]
   82bea:	f042 0201 	orr.w	r2, r2, #1
   82bee:	60e9      	str	r1, [r5, #12]
   82bf0:	4630      	mov	r0, r6
   82bf2:	608d      	str	r5, [r1, #8]
   82bf4:	605a      	str	r2, [r3, #4]
   82bf6:	f000 fb81 	bl	832fc <__malloc_unlock>
   82bfa:	3408      	adds	r4, #8
   82bfc:	4620      	mov	r0, r4
   82bfe:	b003      	add	sp, #12
   82c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c04:	2910      	cmp	r1, #16
   82c06:	f200 808f 	bhi.w	82d28 <_malloc_r+0x184>
   82c0a:	f000 fb75 	bl	832f8 <__malloc_lock>
   82c0e:	2510      	movs	r5, #16
   82c10:	e7dc      	b.n	82bcc <_malloc_r+0x28>
   82c12:	0a68      	lsrs	r0, r5, #9
   82c14:	f000 808f 	beq.w	82d36 <_malloc_r+0x192>
   82c18:	2804      	cmp	r0, #4
   82c1a:	f200 8147 	bhi.w	82eac <_malloc_r+0x308>
   82c1e:	09a8      	lsrs	r0, r5, #6
   82c20:	3038      	adds	r0, #56	; 0x38
   82c22:	0041      	lsls	r1, r0, #1
   82c24:	4fa6      	ldr	r7, [pc, #664]	; (82ec0 <_malloc_r+0x31c>)
   82c26:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82c2a:	68cc      	ldr	r4, [r1, #12]
   82c2c:	42a1      	cmp	r1, r4
   82c2e:	d106      	bne.n	82c3e <_malloc_r+0x9a>
   82c30:	e00c      	b.n	82c4c <_malloc_r+0xa8>
   82c32:	2a00      	cmp	r2, #0
   82c34:	f280 8082 	bge.w	82d3c <_malloc_r+0x198>
   82c38:	68e4      	ldr	r4, [r4, #12]
   82c3a:	42a1      	cmp	r1, r4
   82c3c:	d006      	beq.n	82c4c <_malloc_r+0xa8>
   82c3e:	6863      	ldr	r3, [r4, #4]
   82c40:	f023 0303 	bic.w	r3, r3, #3
   82c44:	1b5a      	subs	r2, r3, r5
   82c46:	2a0f      	cmp	r2, #15
   82c48:	ddf3      	ble.n	82c32 <_malloc_r+0x8e>
   82c4a:	3801      	subs	r0, #1
   82c4c:	3001      	adds	r0, #1
   82c4e:	499c      	ldr	r1, [pc, #624]	; (82ec0 <_malloc_r+0x31c>)
   82c50:	693c      	ldr	r4, [r7, #16]
   82c52:	f101 0e08 	add.w	lr, r1, #8
   82c56:	4574      	cmp	r4, lr
   82c58:	f000 8171 	beq.w	82f3e <_malloc_r+0x39a>
   82c5c:	6863      	ldr	r3, [r4, #4]
   82c5e:	f023 0303 	bic.w	r3, r3, #3
   82c62:	1b5a      	subs	r2, r3, r5
   82c64:	2a0f      	cmp	r2, #15
   82c66:	f300 8157 	bgt.w	82f18 <_malloc_r+0x374>
   82c6a:	2a00      	cmp	r2, #0
   82c6c:	f8c1 e014 	str.w	lr, [r1, #20]
   82c70:	f8c1 e010 	str.w	lr, [r1, #16]
   82c74:	da66      	bge.n	82d44 <_malloc_r+0x1a0>
   82c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82c7a:	f080 812d 	bcs.w	82ed8 <_malloc_r+0x334>
   82c7e:	08db      	lsrs	r3, r3, #3
   82c80:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82c84:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82c88:	684a      	ldr	r2, [r1, #4]
   82c8a:	2301      	movs	r3, #1
   82c8c:	fa03 f30c 	lsl.w	r3, r3, ip
   82c90:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82c94:	4313      	orrs	r3, r2
   82c96:	f8c4 c008 	str.w	ip, [r4, #8]
   82c9a:	f8c4 800c 	str.w	r8, [r4, #12]
   82c9e:	604b      	str	r3, [r1, #4]
   82ca0:	f8c8 4008 	str.w	r4, [r8, #8]
   82ca4:	f8cc 400c 	str.w	r4, [ip, #12]
   82ca8:	1082      	asrs	r2, r0, #2
   82caa:	2401      	movs	r4, #1
   82cac:	4094      	lsls	r4, r2
   82cae:	429c      	cmp	r4, r3
   82cb0:	d855      	bhi.n	82d5e <_malloc_r+0x1ba>
   82cb2:	4223      	tst	r3, r4
   82cb4:	d106      	bne.n	82cc4 <_malloc_r+0x120>
   82cb6:	f020 0003 	bic.w	r0, r0, #3
   82cba:	0064      	lsls	r4, r4, #1
   82cbc:	4223      	tst	r3, r4
   82cbe:	f100 0004 	add.w	r0, r0, #4
   82cc2:	d0fa      	beq.n	82cba <_malloc_r+0x116>
   82cc4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   82cc8:	46c4      	mov	ip, r8
   82cca:	4681      	mov	r9, r0
   82ccc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82cd0:	459c      	cmp	ip, r3
   82cd2:	d107      	bne.n	82ce4 <_malloc_r+0x140>
   82cd4:	e135      	b.n	82f42 <_malloc_r+0x39e>
   82cd6:	2900      	cmp	r1, #0
   82cd8:	f280 8145 	bge.w	82f66 <_malloc_r+0x3c2>
   82cdc:	68db      	ldr	r3, [r3, #12]
   82cde:	459c      	cmp	ip, r3
   82ce0:	f000 812f 	beq.w	82f42 <_malloc_r+0x39e>
   82ce4:	685a      	ldr	r2, [r3, #4]
   82ce6:	f022 0203 	bic.w	r2, r2, #3
   82cea:	1b51      	subs	r1, r2, r5
   82cec:	290f      	cmp	r1, #15
   82cee:	ddf2      	ble.n	82cd6 <_malloc_r+0x132>
   82cf0:	461c      	mov	r4, r3
   82cf2:	68da      	ldr	r2, [r3, #12]
   82cf4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82cf8:	f045 0901 	orr.w	r9, r5, #1
   82cfc:	f041 0801 	orr.w	r8, r1, #1
   82d00:	441d      	add	r5, r3
   82d02:	f8c3 9004 	str.w	r9, [r3, #4]
   82d06:	4630      	mov	r0, r6
   82d08:	f8cc 200c 	str.w	r2, [ip, #12]
   82d0c:	f8c2 c008 	str.w	ip, [r2, #8]
   82d10:	617d      	str	r5, [r7, #20]
   82d12:	613d      	str	r5, [r7, #16]
   82d14:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d18:	f8c5 e008 	str.w	lr, [r5, #8]
   82d1c:	f8c5 8004 	str.w	r8, [r5, #4]
   82d20:	5069      	str	r1, [r5, r1]
   82d22:	f000 faeb 	bl	832fc <__malloc_unlock>
   82d26:	e769      	b.n	82bfc <_malloc_r+0x58>
   82d28:	2400      	movs	r4, #0
   82d2a:	4620      	mov	r0, r4
   82d2c:	230c      	movs	r3, #12
   82d2e:	6033      	str	r3, [r6, #0]
   82d30:	b003      	add	sp, #12
   82d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d36:	217e      	movs	r1, #126	; 0x7e
   82d38:	203f      	movs	r0, #63	; 0x3f
   82d3a:	e773      	b.n	82c24 <_malloc_r+0x80>
   82d3c:	4423      	add	r3, r4
   82d3e:	685a      	ldr	r2, [r3, #4]
   82d40:	68e1      	ldr	r1, [r4, #12]
   82d42:	e751      	b.n	82be8 <_malloc_r+0x44>
   82d44:	4423      	add	r3, r4
   82d46:	685a      	ldr	r2, [r3, #4]
   82d48:	4630      	mov	r0, r6
   82d4a:	f042 0201 	orr.w	r2, r2, #1
   82d4e:	605a      	str	r2, [r3, #4]
   82d50:	3408      	adds	r4, #8
   82d52:	f000 fad3 	bl	832fc <__malloc_unlock>
   82d56:	4620      	mov	r0, r4
   82d58:	b003      	add	sp, #12
   82d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d5e:	68bc      	ldr	r4, [r7, #8]
   82d60:	6863      	ldr	r3, [r4, #4]
   82d62:	f023 0803 	bic.w	r8, r3, #3
   82d66:	4545      	cmp	r5, r8
   82d68:	d804      	bhi.n	82d74 <_malloc_r+0x1d0>
   82d6a:	ebc5 0308 	rsb	r3, r5, r8
   82d6e:	2b0f      	cmp	r3, #15
   82d70:	f300 808c 	bgt.w	82e8c <_malloc_r+0x2e8>
   82d74:	4b53      	ldr	r3, [pc, #332]	; (82ec4 <_malloc_r+0x320>)
   82d76:	f8df a15c 	ldr.w	sl, [pc, #348]	; 82ed4 <_malloc_r+0x330>
   82d7a:	681a      	ldr	r2, [r3, #0]
   82d7c:	f8da 3000 	ldr.w	r3, [sl]
   82d80:	442a      	add	r2, r5
   82d82:	3301      	adds	r3, #1
   82d84:	eb04 0b08 	add.w	fp, r4, r8
   82d88:	f000 8151 	beq.w	8302e <_malloc_r+0x48a>
   82d8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   82d90:	320f      	adds	r2, #15
   82d92:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82d96:	f022 020f 	bic.w	r2, r2, #15
   82d9a:	4611      	mov	r1, r2
   82d9c:	4630      	mov	r0, r6
   82d9e:	9201      	str	r2, [sp, #4]
   82da0:	f000 fd30 	bl	83804 <_sbrk_r>
   82da4:	f1b0 3fff 	cmp.w	r0, #4294967295
   82da8:	4681      	mov	r9, r0
   82daa:	9a01      	ldr	r2, [sp, #4]
   82dac:	f000 8148 	beq.w	83040 <_malloc_r+0x49c>
   82db0:	4583      	cmp	fp, r0
   82db2:	f200 80ef 	bhi.w	82f94 <_malloc_r+0x3f0>
   82db6:	4b44      	ldr	r3, [pc, #272]	; (82ec8 <_malloc_r+0x324>)
   82db8:	45cb      	cmp	fp, r9
   82dba:	6819      	ldr	r1, [r3, #0]
   82dbc:	4411      	add	r1, r2
   82dbe:	6019      	str	r1, [r3, #0]
   82dc0:	f000 8143 	beq.w	8304a <_malloc_r+0x4a6>
   82dc4:	f8da 0000 	ldr.w	r0, [sl]
   82dc8:	f8df e108 	ldr.w	lr, [pc, #264]	; 82ed4 <_malloc_r+0x330>
   82dcc:	3001      	adds	r0, #1
   82dce:	bf1b      	ittet	ne
   82dd0:	ebcb 0b09 	rsbne	fp, fp, r9
   82dd4:	4459      	addne	r1, fp
   82dd6:	f8ce 9000 	streq.w	r9, [lr]
   82dda:	6019      	strne	r1, [r3, #0]
   82ddc:	f019 0107 	ands.w	r1, r9, #7
   82de0:	f000 8108 	beq.w	82ff4 <_malloc_r+0x450>
   82de4:	f1c1 0008 	rsb	r0, r1, #8
   82de8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82dec:	4481      	add	r9, r0
   82dee:	3108      	adds	r1, #8
   82df0:	444a      	add	r2, r9
   82df2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   82df6:	ebc2 0a01 	rsb	sl, r2, r1
   82dfa:	4651      	mov	r1, sl
   82dfc:	4630      	mov	r0, r6
   82dfe:	9301      	str	r3, [sp, #4]
   82e00:	f000 fd00 	bl	83804 <_sbrk_r>
   82e04:	1c43      	adds	r3, r0, #1
   82e06:	9b01      	ldr	r3, [sp, #4]
   82e08:	f000 812d 	beq.w	83066 <_malloc_r+0x4c2>
   82e0c:	ebc9 0200 	rsb	r2, r9, r0
   82e10:	4452      	add	r2, sl
   82e12:	f042 0201 	orr.w	r2, r2, #1
   82e16:	6819      	ldr	r1, [r3, #0]
   82e18:	42bc      	cmp	r4, r7
   82e1a:	4451      	add	r1, sl
   82e1c:	f8c7 9008 	str.w	r9, [r7, #8]
   82e20:	6019      	str	r1, [r3, #0]
   82e22:	f8c9 2004 	str.w	r2, [r9, #4]
   82e26:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 82ec8 <_malloc_r+0x324>
   82e2a:	d016      	beq.n	82e5a <_malloc_r+0x2b6>
   82e2c:	f1b8 0f0f 	cmp.w	r8, #15
   82e30:	f240 80ef 	bls.w	83012 <_malloc_r+0x46e>
   82e34:	6862      	ldr	r2, [r4, #4]
   82e36:	f1a8 030c 	sub.w	r3, r8, #12
   82e3a:	f023 0307 	bic.w	r3, r3, #7
   82e3e:	f002 0201 	and.w	r2, r2, #1
   82e42:	18e0      	adds	r0, r4, r3
   82e44:	f04f 0e05 	mov.w	lr, #5
   82e48:	431a      	orrs	r2, r3
   82e4a:	2b0f      	cmp	r3, #15
   82e4c:	6062      	str	r2, [r4, #4]
   82e4e:	f8c0 e004 	str.w	lr, [r0, #4]
   82e52:	f8c0 e008 	str.w	lr, [r0, #8]
   82e56:	f200 810a 	bhi.w	8306e <_malloc_r+0x4ca>
   82e5a:	4b1c      	ldr	r3, [pc, #112]	; (82ecc <_malloc_r+0x328>)
   82e5c:	68bc      	ldr	r4, [r7, #8]
   82e5e:	681a      	ldr	r2, [r3, #0]
   82e60:	4291      	cmp	r1, r2
   82e62:	bf88      	it	hi
   82e64:	6019      	strhi	r1, [r3, #0]
   82e66:	4b1a      	ldr	r3, [pc, #104]	; (82ed0 <_malloc_r+0x32c>)
   82e68:	681a      	ldr	r2, [r3, #0]
   82e6a:	4291      	cmp	r1, r2
   82e6c:	6862      	ldr	r2, [r4, #4]
   82e6e:	bf88      	it	hi
   82e70:	6019      	strhi	r1, [r3, #0]
   82e72:	f022 0203 	bic.w	r2, r2, #3
   82e76:	4295      	cmp	r5, r2
   82e78:	eba2 0305 	sub.w	r3, r2, r5
   82e7c:	d801      	bhi.n	82e82 <_malloc_r+0x2de>
   82e7e:	2b0f      	cmp	r3, #15
   82e80:	dc04      	bgt.n	82e8c <_malloc_r+0x2e8>
   82e82:	4630      	mov	r0, r6
   82e84:	f000 fa3a 	bl	832fc <__malloc_unlock>
   82e88:	2400      	movs	r4, #0
   82e8a:	e6b7      	b.n	82bfc <_malloc_r+0x58>
   82e8c:	f045 0201 	orr.w	r2, r5, #1
   82e90:	f043 0301 	orr.w	r3, r3, #1
   82e94:	4425      	add	r5, r4
   82e96:	6062      	str	r2, [r4, #4]
   82e98:	4630      	mov	r0, r6
   82e9a:	60bd      	str	r5, [r7, #8]
   82e9c:	3408      	adds	r4, #8
   82e9e:	606b      	str	r3, [r5, #4]
   82ea0:	f000 fa2c 	bl	832fc <__malloc_unlock>
   82ea4:	4620      	mov	r0, r4
   82ea6:	b003      	add	sp, #12
   82ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eac:	2814      	cmp	r0, #20
   82eae:	d969      	bls.n	82f84 <_malloc_r+0x3e0>
   82eb0:	2854      	cmp	r0, #84	; 0x54
   82eb2:	f200 8098 	bhi.w	82fe6 <_malloc_r+0x442>
   82eb6:	0b28      	lsrs	r0, r5, #12
   82eb8:	306e      	adds	r0, #110	; 0x6e
   82eba:	0041      	lsls	r1, r0, #1
   82ebc:	e6b2      	b.n	82c24 <_malloc_r+0x80>
   82ebe:	bf00      	nop
   82ec0:	20070590 	.word	0x20070590
   82ec4:	20070adc 	.word	0x20070adc
   82ec8:	20070ae0 	.word	0x20070ae0
   82ecc:	20070ad8 	.word	0x20070ad8
   82ed0:	20070ad4 	.word	0x20070ad4
   82ed4:	2007099c 	.word	0x2007099c
   82ed8:	0a5a      	lsrs	r2, r3, #9
   82eda:	2a04      	cmp	r2, #4
   82edc:	d955      	bls.n	82f8a <_malloc_r+0x3e6>
   82ede:	2a14      	cmp	r2, #20
   82ee0:	f200 80a7 	bhi.w	83032 <_malloc_r+0x48e>
   82ee4:	325b      	adds	r2, #91	; 0x5b
   82ee6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82eea:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   82eee:	f8dc 1008 	ldr.w	r1, [ip, #8]
   82ef2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 830ac <_malloc_r+0x508>
   82ef6:	4561      	cmp	r1, ip
   82ef8:	d07f      	beq.n	82ffa <_malloc_r+0x456>
   82efa:	684a      	ldr	r2, [r1, #4]
   82efc:	f022 0203 	bic.w	r2, r2, #3
   82f00:	4293      	cmp	r3, r2
   82f02:	d202      	bcs.n	82f0a <_malloc_r+0x366>
   82f04:	6889      	ldr	r1, [r1, #8]
   82f06:	458c      	cmp	ip, r1
   82f08:	d1f7      	bne.n	82efa <_malloc_r+0x356>
   82f0a:	68ca      	ldr	r2, [r1, #12]
   82f0c:	687b      	ldr	r3, [r7, #4]
   82f0e:	60e2      	str	r2, [r4, #12]
   82f10:	60a1      	str	r1, [r4, #8]
   82f12:	6094      	str	r4, [r2, #8]
   82f14:	60cc      	str	r4, [r1, #12]
   82f16:	e6c7      	b.n	82ca8 <_malloc_r+0x104>
   82f18:	f045 0701 	orr.w	r7, r5, #1
   82f1c:	f042 0301 	orr.w	r3, r2, #1
   82f20:	4425      	add	r5, r4
   82f22:	6067      	str	r7, [r4, #4]
   82f24:	4630      	mov	r0, r6
   82f26:	614d      	str	r5, [r1, #20]
   82f28:	610d      	str	r5, [r1, #16]
   82f2a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82f2e:	f8c5 e008 	str.w	lr, [r5, #8]
   82f32:	606b      	str	r3, [r5, #4]
   82f34:	50aa      	str	r2, [r5, r2]
   82f36:	3408      	adds	r4, #8
   82f38:	f000 f9e0 	bl	832fc <__malloc_unlock>
   82f3c:	e65e      	b.n	82bfc <_malloc_r+0x58>
   82f3e:	684b      	ldr	r3, [r1, #4]
   82f40:	e6b2      	b.n	82ca8 <_malloc_r+0x104>
   82f42:	f109 0901 	add.w	r9, r9, #1
   82f46:	f019 0f03 	tst.w	r9, #3
   82f4a:	f10c 0c08 	add.w	ip, ip, #8
   82f4e:	f47f aebd 	bne.w	82ccc <_malloc_r+0x128>
   82f52:	e02c      	b.n	82fae <_malloc_r+0x40a>
   82f54:	f104 0308 	add.w	r3, r4, #8
   82f58:	6964      	ldr	r4, [r4, #20]
   82f5a:	42a3      	cmp	r3, r4
   82f5c:	bf08      	it	eq
   82f5e:	3002      	addeq	r0, #2
   82f60:	f43f ae75 	beq.w	82c4e <_malloc_r+0xaa>
   82f64:	e63a      	b.n	82bdc <_malloc_r+0x38>
   82f66:	461c      	mov	r4, r3
   82f68:	441a      	add	r2, r3
   82f6a:	6851      	ldr	r1, [r2, #4]
   82f6c:	68db      	ldr	r3, [r3, #12]
   82f6e:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82f72:	f041 0101 	orr.w	r1, r1, #1
   82f76:	6051      	str	r1, [r2, #4]
   82f78:	4630      	mov	r0, r6
   82f7a:	60eb      	str	r3, [r5, #12]
   82f7c:	609d      	str	r5, [r3, #8]
   82f7e:	f000 f9bd 	bl	832fc <__malloc_unlock>
   82f82:	e63b      	b.n	82bfc <_malloc_r+0x58>
   82f84:	305b      	adds	r0, #91	; 0x5b
   82f86:	0041      	lsls	r1, r0, #1
   82f88:	e64c      	b.n	82c24 <_malloc_r+0x80>
   82f8a:	099a      	lsrs	r2, r3, #6
   82f8c:	3238      	adds	r2, #56	; 0x38
   82f8e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82f92:	e7aa      	b.n	82eea <_malloc_r+0x346>
   82f94:	42bc      	cmp	r4, r7
   82f96:	4b45      	ldr	r3, [pc, #276]	; (830ac <_malloc_r+0x508>)
   82f98:	f43f af0d 	beq.w	82db6 <_malloc_r+0x212>
   82f9c:	689c      	ldr	r4, [r3, #8]
   82f9e:	6862      	ldr	r2, [r4, #4]
   82fa0:	f022 0203 	bic.w	r2, r2, #3
   82fa4:	e767      	b.n	82e76 <_malloc_r+0x2d2>
   82fa6:	f8d8 8000 	ldr.w	r8, [r8]
   82faa:	4598      	cmp	r8, r3
   82fac:	d17c      	bne.n	830a8 <_malloc_r+0x504>
   82fae:	f010 0f03 	tst.w	r0, #3
   82fb2:	f1a8 0308 	sub.w	r3, r8, #8
   82fb6:	f100 30ff 	add.w	r0, r0, #4294967295
   82fba:	d1f4      	bne.n	82fa6 <_malloc_r+0x402>
   82fbc:	687b      	ldr	r3, [r7, #4]
   82fbe:	ea23 0304 	bic.w	r3, r3, r4
   82fc2:	607b      	str	r3, [r7, #4]
   82fc4:	0064      	lsls	r4, r4, #1
   82fc6:	429c      	cmp	r4, r3
   82fc8:	f63f aec9 	bhi.w	82d5e <_malloc_r+0x1ba>
   82fcc:	2c00      	cmp	r4, #0
   82fce:	f43f aec6 	beq.w	82d5e <_malloc_r+0x1ba>
   82fd2:	4223      	tst	r3, r4
   82fd4:	4648      	mov	r0, r9
   82fd6:	f47f ae75 	bne.w	82cc4 <_malloc_r+0x120>
   82fda:	0064      	lsls	r4, r4, #1
   82fdc:	4223      	tst	r3, r4
   82fde:	f100 0004 	add.w	r0, r0, #4
   82fe2:	d0fa      	beq.n	82fda <_malloc_r+0x436>
   82fe4:	e66e      	b.n	82cc4 <_malloc_r+0x120>
   82fe6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82fea:	d818      	bhi.n	8301e <_malloc_r+0x47a>
   82fec:	0be8      	lsrs	r0, r5, #15
   82fee:	3077      	adds	r0, #119	; 0x77
   82ff0:	0041      	lsls	r1, r0, #1
   82ff2:	e617      	b.n	82c24 <_malloc_r+0x80>
   82ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82ff8:	e6fa      	b.n	82df0 <_malloc_r+0x24c>
   82ffa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82ffe:	1092      	asrs	r2, r2, #2
   83000:	f04f 0c01 	mov.w	ip, #1
   83004:	fa0c f202 	lsl.w	r2, ip, r2
   83008:	4313      	orrs	r3, r2
   8300a:	f8c8 3004 	str.w	r3, [r8, #4]
   8300e:	460a      	mov	r2, r1
   83010:	e77d      	b.n	82f0e <_malloc_r+0x36a>
   83012:	2301      	movs	r3, #1
   83014:	f8c9 3004 	str.w	r3, [r9, #4]
   83018:	464c      	mov	r4, r9
   8301a:	2200      	movs	r2, #0
   8301c:	e72b      	b.n	82e76 <_malloc_r+0x2d2>
   8301e:	f240 5354 	movw	r3, #1364	; 0x554
   83022:	4298      	cmp	r0, r3
   83024:	d81c      	bhi.n	83060 <_malloc_r+0x4bc>
   83026:	0ca8      	lsrs	r0, r5, #18
   83028:	307c      	adds	r0, #124	; 0x7c
   8302a:	0041      	lsls	r1, r0, #1
   8302c:	e5fa      	b.n	82c24 <_malloc_r+0x80>
   8302e:	3210      	adds	r2, #16
   83030:	e6b3      	b.n	82d9a <_malloc_r+0x1f6>
   83032:	2a54      	cmp	r2, #84	; 0x54
   83034:	d823      	bhi.n	8307e <_malloc_r+0x4da>
   83036:	0b1a      	lsrs	r2, r3, #12
   83038:	326e      	adds	r2, #110	; 0x6e
   8303a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8303e:	e754      	b.n	82eea <_malloc_r+0x346>
   83040:	68bc      	ldr	r4, [r7, #8]
   83042:	6862      	ldr	r2, [r4, #4]
   83044:	f022 0203 	bic.w	r2, r2, #3
   83048:	e715      	b.n	82e76 <_malloc_r+0x2d2>
   8304a:	f3cb 000b 	ubfx	r0, fp, #0, #12
   8304e:	2800      	cmp	r0, #0
   83050:	f47f aeb8 	bne.w	82dc4 <_malloc_r+0x220>
   83054:	4442      	add	r2, r8
   83056:	68bb      	ldr	r3, [r7, #8]
   83058:	f042 0201 	orr.w	r2, r2, #1
   8305c:	605a      	str	r2, [r3, #4]
   8305e:	e6fc      	b.n	82e5a <_malloc_r+0x2b6>
   83060:	21fc      	movs	r1, #252	; 0xfc
   83062:	207e      	movs	r0, #126	; 0x7e
   83064:	e5de      	b.n	82c24 <_malloc_r+0x80>
   83066:	2201      	movs	r2, #1
   83068:	f04f 0a00 	mov.w	sl, #0
   8306c:	e6d3      	b.n	82e16 <_malloc_r+0x272>
   8306e:	f104 0108 	add.w	r1, r4, #8
   83072:	4630      	mov	r0, r6
   83074:	f7ff fa60 	bl	82538 <_free_r>
   83078:	f8da 1000 	ldr.w	r1, [sl]
   8307c:	e6ed      	b.n	82e5a <_malloc_r+0x2b6>
   8307e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83082:	d804      	bhi.n	8308e <_malloc_r+0x4ea>
   83084:	0bda      	lsrs	r2, r3, #15
   83086:	3277      	adds	r2, #119	; 0x77
   83088:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8308c:	e72d      	b.n	82eea <_malloc_r+0x346>
   8308e:	f240 5154 	movw	r1, #1364	; 0x554
   83092:	428a      	cmp	r2, r1
   83094:	d804      	bhi.n	830a0 <_malloc_r+0x4fc>
   83096:	0c9a      	lsrs	r2, r3, #18
   83098:	327c      	adds	r2, #124	; 0x7c
   8309a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8309e:	e724      	b.n	82eea <_malloc_r+0x346>
   830a0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   830a4:	227e      	movs	r2, #126	; 0x7e
   830a6:	e720      	b.n	82eea <_malloc_r+0x346>
   830a8:	687b      	ldr	r3, [r7, #4]
   830aa:	e78b      	b.n	82fc4 <_malloc_r+0x420>
   830ac:	20070590 	.word	0x20070590

000830b0 <memchr>:
   830b0:	0783      	lsls	r3, r0, #30
   830b2:	b470      	push	{r4, r5, r6}
   830b4:	b2c9      	uxtb	r1, r1
   830b6:	d040      	beq.n	8313a <memchr+0x8a>
   830b8:	1e54      	subs	r4, r2, #1
   830ba:	2a00      	cmp	r2, #0
   830bc:	d03f      	beq.n	8313e <memchr+0x8e>
   830be:	7803      	ldrb	r3, [r0, #0]
   830c0:	428b      	cmp	r3, r1
   830c2:	bf18      	it	ne
   830c4:	1c43      	addne	r3, r0, #1
   830c6:	d105      	bne.n	830d4 <memchr+0x24>
   830c8:	e01c      	b.n	83104 <memchr+0x54>
   830ca:	b1ec      	cbz	r4, 83108 <memchr+0x58>
   830cc:	7802      	ldrb	r2, [r0, #0]
   830ce:	3c01      	subs	r4, #1
   830d0:	428a      	cmp	r2, r1
   830d2:	d017      	beq.n	83104 <memchr+0x54>
   830d4:	f013 0f03 	tst.w	r3, #3
   830d8:	4618      	mov	r0, r3
   830da:	f103 0301 	add.w	r3, r3, #1
   830de:	d1f4      	bne.n	830ca <memchr+0x1a>
   830e0:	2c03      	cmp	r4, #3
   830e2:	d814      	bhi.n	8310e <memchr+0x5e>
   830e4:	b184      	cbz	r4, 83108 <memchr+0x58>
   830e6:	7803      	ldrb	r3, [r0, #0]
   830e8:	428b      	cmp	r3, r1
   830ea:	d00b      	beq.n	83104 <memchr+0x54>
   830ec:	1905      	adds	r5, r0, r4
   830ee:	1c43      	adds	r3, r0, #1
   830f0:	e002      	b.n	830f8 <memchr+0x48>
   830f2:	7802      	ldrb	r2, [r0, #0]
   830f4:	428a      	cmp	r2, r1
   830f6:	d005      	beq.n	83104 <memchr+0x54>
   830f8:	42ab      	cmp	r3, r5
   830fa:	4618      	mov	r0, r3
   830fc:	f103 0301 	add.w	r3, r3, #1
   83100:	d1f7      	bne.n	830f2 <memchr+0x42>
   83102:	2000      	movs	r0, #0
   83104:	bc70      	pop	{r4, r5, r6}
   83106:	4770      	bx	lr
   83108:	4620      	mov	r0, r4
   8310a:	bc70      	pop	{r4, r5, r6}
   8310c:	4770      	bx	lr
   8310e:	4602      	mov	r2, r0
   83110:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83114:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83118:	6813      	ldr	r3, [r2, #0]
   8311a:	4610      	mov	r0, r2
   8311c:	4073      	eors	r3, r6
   8311e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   83122:	ea25 0303 	bic.w	r3, r5, r3
   83126:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8312a:	f102 0204 	add.w	r2, r2, #4
   8312e:	d1d9      	bne.n	830e4 <memchr+0x34>
   83130:	3c04      	subs	r4, #4
   83132:	2c03      	cmp	r4, #3
   83134:	4610      	mov	r0, r2
   83136:	d8ef      	bhi.n	83118 <memchr+0x68>
   83138:	e7d4      	b.n	830e4 <memchr+0x34>
   8313a:	4614      	mov	r4, r2
   8313c:	e7d0      	b.n	830e0 <memchr+0x30>
   8313e:	4610      	mov	r0, r2
   83140:	e7e0      	b.n	83104 <memchr+0x54>
   83142:	bf00      	nop

00083144 <memcpy>:
   83144:	4684      	mov	ip, r0
   83146:	ea41 0300 	orr.w	r3, r1, r0
   8314a:	f013 0303 	ands.w	r3, r3, #3
   8314e:	d149      	bne.n	831e4 <memcpy+0xa0>
   83150:	3a40      	subs	r2, #64	; 0x40
   83152:	d323      	bcc.n	8319c <memcpy+0x58>
   83154:	680b      	ldr	r3, [r1, #0]
   83156:	6003      	str	r3, [r0, #0]
   83158:	684b      	ldr	r3, [r1, #4]
   8315a:	6043      	str	r3, [r0, #4]
   8315c:	688b      	ldr	r3, [r1, #8]
   8315e:	6083      	str	r3, [r0, #8]
   83160:	68cb      	ldr	r3, [r1, #12]
   83162:	60c3      	str	r3, [r0, #12]
   83164:	690b      	ldr	r3, [r1, #16]
   83166:	6103      	str	r3, [r0, #16]
   83168:	694b      	ldr	r3, [r1, #20]
   8316a:	6143      	str	r3, [r0, #20]
   8316c:	698b      	ldr	r3, [r1, #24]
   8316e:	6183      	str	r3, [r0, #24]
   83170:	69cb      	ldr	r3, [r1, #28]
   83172:	61c3      	str	r3, [r0, #28]
   83174:	6a0b      	ldr	r3, [r1, #32]
   83176:	6203      	str	r3, [r0, #32]
   83178:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8317a:	6243      	str	r3, [r0, #36]	; 0x24
   8317c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8317e:	6283      	str	r3, [r0, #40]	; 0x28
   83180:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83182:	62c3      	str	r3, [r0, #44]	; 0x2c
   83184:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83186:	6303      	str	r3, [r0, #48]	; 0x30
   83188:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8318a:	6343      	str	r3, [r0, #52]	; 0x34
   8318c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8318e:	6383      	str	r3, [r0, #56]	; 0x38
   83190:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83192:	63c3      	str	r3, [r0, #60]	; 0x3c
   83194:	3040      	adds	r0, #64	; 0x40
   83196:	3140      	adds	r1, #64	; 0x40
   83198:	3a40      	subs	r2, #64	; 0x40
   8319a:	d2db      	bcs.n	83154 <memcpy+0x10>
   8319c:	3230      	adds	r2, #48	; 0x30
   8319e:	d30b      	bcc.n	831b8 <memcpy+0x74>
   831a0:	680b      	ldr	r3, [r1, #0]
   831a2:	6003      	str	r3, [r0, #0]
   831a4:	684b      	ldr	r3, [r1, #4]
   831a6:	6043      	str	r3, [r0, #4]
   831a8:	688b      	ldr	r3, [r1, #8]
   831aa:	6083      	str	r3, [r0, #8]
   831ac:	68cb      	ldr	r3, [r1, #12]
   831ae:	60c3      	str	r3, [r0, #12]
   831b0:	3010      	adds	r0, #16
   831b2:	3110      	adds	r1, #16
   831b4:	3a10      	subs	r2, #16
   831b6:	d2f3      	bcs.n	831a0 <memcpy+0x5c>
   831b8:	320c      	adds	r2, #12
   831ba:	d305      	bcc.n	831c8 <memcpy+0x84>
   831bc:	f851 3b04 	ldr.w	r3, [r1], #4
   831c0:	f840 3b04 	str.w	r3, [r0], #4
   831c4:	3a04      	subs	r2, #4
   831c6:	d2f9      	bcs.n	831bc <memcpy+0x78>
   831c8:	3204      	adds	r2, #4
   831ca:	d008      	beq.n	831de <memcpy+0x9a>
   831cc:	07d2      	lsls	r2, r2, #31
   831ce:	bf1c      	itt	ne
   831d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831d4:	f800 3b01 	strbne.w	r3, [r0], #1
   831d8:	d301      	bcc.n	831de <memcpy+0x9a>
   831da:	880b      	ldrh	r3, [r1, #0]
   831dc:	8003      	strh	r3, [r0, #0]
   831de:	4660      	mov	r0, ip
   831e0:	4770      	bx	lr
   831e2:	bf00      	nop
   831e4:	2a08      	cmp	r2, #8
   831e6:	d313      	bcc.n	83210 <memcpy+0xcc>
   831e8:	078b      	lsls	r3, r1, #30
   831ea:	d0b1      	beq.n	83150 <memcpy+0xc>
   831ec:	f010 0303 	ands.w	r3, r0, #3
   831f0:	d0ae      	beq.n	83150 <memcpy+0xc>
   831f2:	f1c3 0304 	rsb	r3, r3, #4
   831f6:	1ad2      	subs	r2, r2, r3
   831f8:	07db      	lsls	r3, r3, #31
   831fa:	bf1c      	itt	ne
   831fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83200:	f800 3b01 	strbne.w	r3, [r0], #1
   83204:	d3a4      	bcc.n	83150 <memcpy+0xc>
   83206:	f831 3b02 	ldrh.w	r3, [r1], #2
   8320a:	f820 3b02 	strh.w	r3, [r0], #2
   8320e:	e79f      	b.n	83150 <memcpy+0xc>
   83210:	3a04      	subs	r2, #4
   83212:	d3d9      	bcc.n	831c8 <memcpy+0x84>
   83214:	3a01      	subs	r2, #1
   83216:	f811 3b01 	ldrb.w	r3, [r1], #1
   8321a:	f800 3b01 	strb.w	r3, [r0], #1
   8321e:	d2f9      	bcs.n	83214 <memcpy+0xd0>
   83220:	780b      	ldrb	r3, [r1, #0]
   83222:	7003      	strb	r3, [r0, #0]
   83224:	784b      	ldrb	r3, [r1, #1]
   83226:	7043      	strb	r3, [r0, #1]
   83228:	788b      	ldrb	r3, [r1, #2]
   8322a:	7083      	strb	r3, [r0, #2]
   8322c:	4660      	mov	r0, ip
   8322e:	4770      	bx	lr

00083230 <memmove>:
   83230:	4288      	cmp	r0, r1
   83232:	b5f0      	push	{r4, r5, r6, r7, lr}
   83234:	d90d      	bls.n	83252 <memmove+0x22>
   83236:	188b      	adds	r3, r1, r2
   83238:	4298      	cmp	r0, r3
   8323a:	d20a      	bcs.n	83252 <memmove+0x22>
   8323c:	1881      	adds	r1, r0, r2
   8323e:	2a00      	cmp	r2, #0
   83240:	d054      	beq.n	832ec <memmove+0xbc>
   83242:	1a9a      	subs	r2, r3, r2
   83244:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83248:	4293      	cmp	r3, r2
   8324a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8324e:	d1f9      	bne.n	83244 <memmove+0x14>
   83250:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83252:	2a0f      	cmp	r2, #15
   83254:	d948      	bls.n	832e8 <memmove+0xb8>
   83256:	ea40 0301 	orr.w	r3, r0, r1
   8325a:	079b      	lsls	r3, r3, #30
   8325c:	d147      	bne.n	832ee <memmove+0xbe>
   8325e:	4615      	mov	r5, r2
   83260:	f100 0410 	add.w	r4, r0, #16
   83264:	f101 0310 	add.w	r3, r1, #16
   83268:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8326c:	3d10      	subs	r5, #16
   8326e:	f844 6c10 	str.w	r6, [r4, #-16]
   83272:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83276:	2d0f      	cmp	r5, #15
   83278:	f844 6c0c 	str.w	r6, [r4, #-12]
   8327c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83280:	f104 0410 	add.w	r4, r4, #16
   83284:	f844 6c18 	str.w	r6, [r4, #-24]
   83288:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8328c:	f103 0310 	add.w	r3, r3, #16
   83290:	f844 6c14 	str.w	r6, [r4, #-20]
   83294:	d8e8      	bhi.n	83268 <memmove+0x38>
   83296:	f1a2 0310 	sub.w	r3, r2, #16
   8329a:	f023 030f 	bic.w	r3, r3, #15
   8329e:	f002 0e0f 	and.w	lr, r2, #15
   832a2:	3310      	adds	r3, #16
   832a4:	f1be 0f03 	cmp.w	lr, #3
   832a8:	4419      	add	r1, r3
   832aa:	4403      	add	r3, r0
   832ac:	d921      	bls.n	832f2 <memmove+0xc2>
   832ae:	460e      	mov	r6, r1
   832b0:	4674      	mov	r4, lr
   832b2:	1f1d      	subs	r5, r3, #4
   832b4:	f856 7b04 	ldr.w	r7, [r6], #4
   832b8:	3c04      	subs	r4, #4
   832ba:	2c03      	cmp	r4, #3
   832bc:	f845 7f04 	str.w	r7, [r5, #4]!
   832c0:	d8f8      	bhi.n	832b4 <memmove+0x84>
   832c2:	f1ae 0404 	sub.w	r4, lr, #4
   832c6:	f024 0403 	bic.w	r4, r4, #3
   832ca:	3404      	adds	r4, #4
   832cc:	4423      	add	r3, r4
   832ce:	4421      	add	r1, r4
   832d0:	f002 0203 	and.w	r2, r2, #3
   832d4:	b152      	cbz	r2, 832ec <memmove+0xbc>
   832d6:	3b01      	subs	r3, #1
   832d8:	440a      	add	r2, r1
   832da:	f811 4b01 	ldrb.w	r4, [r1], #1
   832de:	4291      	cmp	r1, r2
   832e0:	f803 4f01 	strb.w	r4, [r3, #1]!
   832e4:	d1f9      	bne.n	832da <memmove+0xaa>
   832e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832e8:	4603      	mov	r3, r0
   832ea:	e7f3      	b.n	832d4 <memmove+0xa4>
   832ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832ee:	4603      	mov	r3, r0
   832f0:	e7f1      	b.n	832d6 <memmove+0xa6>
   832f2:	4672      	mov	r2, lr
   832f4:	e7ee      	b.n	832d4 <memmove+0xa4>
   832f6:	bf00      	nop

000832f8 <__malloc_lock>:
   832f8:	4770      	bx	lr
   832fa:	bf00      	nop

000832fc <__malloc_unlock>:
   832fc:	4770      	bx	lr
   832fe:	bf00      	nop

00083300 <_realloc_r>:
   83300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83304:	4617      	mov	r7, r2
   83306:	b083      	sub	sp, #12
   83308:	460d      	mov	r5, r1
   8330a:	2900      	cmp	r1, #0
   8330c:	f000 80e2 	beq.w	834d4 <_realloc_r+0x1d4>
   83310:	4681      	mov	r9, r0
   83312:	f107 040b 	add.w	r4, r7, #11
   83316:	f7ff ffef 	bl	832f8 <__malloc_lock>
   8331a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8331e:	2c16      	cmp	r4, #22
   83320:	f023 0603 	bic.w	r6, r3, #3
   83324:	f1a5 0808 	sub.w	r8, r5, #8
   83328:	d84b      	bhi.n	833c2 <_realloc_r+0xc2>
   8332a:	2210      	movs	r2, #16
   8332c:	4614      	mov	r4, r2
   8332e:	42a7      	cmp	r7, r4
   83330:	d84c      	bhi.n	833cc <_realloc_r+0xcc>
   83332:	4296      	cmp	r6, r2
   83334:	da51      	bge.n	833da <_realloc_r+0xda>
   83336:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 836dc <_realloc_r+0x3dc>
   8333a:	eb08 0106 	add.w	r1, r8, r6
   8333e:	f8db 0008 	ldr.w	r0, [fp, #8]
   83342:	4288      	cmp	r0, r1
   83344:	f000 80d3 	beq.w	834ee <_realloc_r+0x1ee>
   83348:	6848      	ldr	r0, [r1, #4]
   8334a:	f020 0e01 	bic.w	lr, r0, #1
   8334e:	448e      	add	lr, r1
   83350:	f8de e004 	ldr.w	lr, [lr, #4]
   83354:	f01e 0f01 	tst.w	lr, #1
   83358:	d154      	bne.n	83404 <_realloc_r+0x104>
   8335a:	f020 0003 	bic.w	r0, r0, #3
   8335e:	4430      	add	r0, r6
   83360:	4290      	cmp	r0, r2
   83362:	f280 80bd 	bge.w	834e0 <_realloc_r+0x1e0>
   83366:	07db      	lsls	r3, r3, #31
   83368:	f100 8090 	bmi.w	8348c <_realloc_r+0x18c>
   8336c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83370:	ebc3 0a08 	rsb	sl, r3, r8
   83374:	f8da 3004 	ldr.w	r3, [sl, #4]
   83378:	f023 0303 	bic.w	r3, r3, #3
   8337c:	eb00 0e03 	add.w	lr, r0, r3
   83380:	4596      	cmp	lr, r2
   83382:	db49      	blt.n	83418 <_realloc_r+0x118>
   83384:	4657      	mov	r7, sl
   83386:	68cb      	ldr	r3, [r1, #12]
   83388:	6889      	ldr	r1, [r1, #8]
   8338a:	1f32      	subs	r2, r6, #4
   8338c:	60cb      	str	r3, [r1, #12]
   8338e:	6099      	str	r1, [r3, #8]
   83390:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83394:	f8da 300c 	ldr.w	r3, [sl, #12]
   83398:	2a24      	cmp	r2, #36	; 0x24
   8339a:	60cb      	str	r3, [r1, #12]
   8339c:	6099      	str	r1, [r3, #8]
   8339e:	f200 8133 	bhi.w	83608 <_realloc_r+0x308>
   833a2:	2a13      	cmp	r2, #19
   833a4:	f240 80fa 	bls.w	8359c <_realloc_r+0x29c>
   833a8:	682b      	ldr	r3, [r5, #0]
   833aa:	2a1b      	cmp	r2, #27
   833ac:	f8ca 3008 	str.w	r3, [sl, #8]
   833b0:	686b      	ldr	r3, [r5, #4]
   833b2:	f8ca 300c 	str.w	r3, [sl, #12]
   833b6:	f200 813b 	bhi.w	83630 <_realloc_r+0x330>
   833ba:	3508      	adds	r5, #8
   833bc:	f10a 0310 	add.w	r3, sl, #16
   833c0:	e0ed      	b.n	8359e <_realloc_r+0x29e>
   833c2:	f024 0407 	bic.w	r4, r4, #7
   833c6:	2c00      	cmp	r4, #0
   833c8:	4622      	mov	r2, r4
   833ca:	dab0      	bge.n	8332e <_realloc_r+0x2e>
   833cc:	230c      	movs	r3, #12
   833ce:	2000      	movs	r0, #0
   833d0:	f8c9 3000 	str.w	r3, [r9]
   833d4:	b003      	add	sp, #12
   833d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833da:	462f      	mov	r7, r5
   833dc:	1b32      	subs	r2, r6, r4
   833de:	2a0f      	cmp	r2, #15
   833e0:	f003 0301 	and.w	r3, r3, #1
   833e4:	d840      	bhi.n	83468 <_realloc_r+0x168>
   833e6:	4333      	orrs	r3, r6
   833e8:	f8c8 3004 	str.w	r3, [r8, #4]
   833ec:	4446      	add	r6, r8
   833ee:	6873      	ldr	r3, [r6, #4]
   833f0:	f043 0301 	orr.w	r3, r3, #1
   833f4:	6073      	str	r3, [r6, #4]
   833f6:	4648      	mov	r0, r9
   833f8:	f7ff ff80 	bl	832fc <__malloc_unlock>
   833fc:	4638      	mov	r0, r7
   833fe:	b003      	add	sp, #12
   83400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83404:	07d9      	lsls	r1, r3, #31
   83406:	d441      	bmi.n	8348c <_realloc_r+0x18c>
   83408:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8340c:	ebc3 0a08 	rsb	sl, r3, r8
   83410:	f8da 3004 	ldr.w	r3, [sl, #4]
   83414:	f023 0303 	bic.w	r3, r3, #3
   83418:	4433      	add	r3, r6
   8341a:	4293      	cmp	r3, r2
   8341c:	db36      	blt.n	8348c <_realloc_r+0x18c>
   8341e:	4657      	mov	r7, sl
   83420:	f8da 100c 	ldr.w	r1, [sl, #12]
   83424:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83428:	1f32      	subs	r2, r6, #4
   8342a:	2a24      	cmp	r2, #36	; 0x24
   8342c:	60c1      	str	r1, [r0, #12]
   8342e:	6088      	str	r0, [r1, #8]
   83430:	f200 80f5 	bhi.w	8361e <_realloc_r+0x31e>
   83434:	2a13      	cmp	r2, #19
   83436:	f240 80f0 	bls.w	8361a <_realloc_r+0x31a>
   8343a:	6829      	ldr	r1, [r5, #0]
   8343c:	2a1b      	cmp	r2, #27
   8343e:	f8ca 1008 	str.w	r1, [sl, #8]
   83442:	6869      	ldr	r1, [r5, #4]
   83444:	f8ca 100c 	str.w	r1, [sl, #12]
   83448:	f200 8107 	bhi.w	8365a <_realloc_r+0x35a>
   8344c:	3508      	adds	r5, #8
   8344e:	f10a 0210 	add.w	r2, sl, #16
   83452:	6829      	ldr	r1, [r5, #0]
   83454:	461e      	mov	r6, r3
   83456:	6011      	str	r1, [r2, #0]
   83458:	6869      	ldr	r1, [r5, #4]
   8345a:	46d0      	mov	r8, sl
   8345c:	6051      	str	r1, [r2, #4]
   8345e:	68ab      	ldr	r3, [r5, #8]
   83460:	6093      	str	r3, [r2, #8]
   83462:	f8da 3004 	ldr.w	r3, [sl, #4]
   83466:	e7b9      	b.n	833dc <_realloc_r+0xdc>
   83468:	eb08 0104 	add.w	r1, r8, r4
   8346c:	4323      	orrs	r3, r4
   8346e:	f042 0001 	orr.w	r0, r2, #1
   83472:	f8c8 3004 	str.w	r3, [r8, #4]
   83476:	440a      	add	r2, r1
   83478:	6048      	str	r0, [r1, #4]
   8347a:	6853      	ldr	r3, [r2, #4]
   8347c:	3108      	adds	r1, #8
   8347e:	f043 0301 	orr.w	r3, r3, #1
   83482:	6053      	str	r3, [r2, #4]
   83484:	4648      	mov	r0, r9
   83486:	f7ff f857 	bl	82538 <_free_r>
   8348a:	e7b4      	b.n	833f6 <_realloc_r+0xf6>
   8348c:	4639      	mov	r1, r7
   8348e:	4648      	mov	r0, r9
   83490:	f7ff fb88 	bl	82ba4 <_malloc_r>
   83494:	4607      	mov	r7, r0
   83496:	2800      	cmp	r0, #0
   83498:	d0ad      	beq.n	833f6 <_realloc_r+0xf6>
   8349a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8349e:	f1a0 0108 	sub.w	r1, r0, #8
   834a2:	f023 0201 	bic.w	r2, r3, #1
   834a6:	4442      	add	r2, r8
   834a8:	4291      	cmp	r1, r2
   834aa:	f000 80a6 	beq.w	835fa <_realloc_r+0x2fa>
   834ae:	1f32      	subs	r2, r6, #4
   834b0:	2a24      	cmp	r2, #36	; 0x24
   834b2:	f200 8093 	bhi.w	835dc <_realloc_r+0x2dc>
   834b6:	2a13      	cmp	r2, #19
   834b8:	d865      	bhi.n	83586 <_realloc_r+0x286>
   834ba:	4603      	mov	r3, r0
   834bc:	462a      	mov	r2, r5
   834be:	6811      	ldr	r1, [r2, #0]
   834c0:	6019      	str	r1, [r3, #0]
   834c2:	6851      	ldr	r1, [r2, #4]
   834c4:	6059      	str	r1, [r3, #4]
   834c6:	6892      	ldr	r2, [r2, #8]
   834c8:	609a      	str	r2, [r3, #8]
   834ca:	4629      	mov	r1, r5
   834cc:	4648      	mov	r0, r9
   834ce:	f7ff f833 	bl	82538 <_free_r>
   834d2:	e790      	b.n	833f6 <_realloc_r+0xf6>
   834d4:	4611      	mov	r1, r2
   834d6:	b003      	add	sp, #12
   834d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834dc:	f7ff bb62 	b.w	82ba4 <_malloc_r>
   834e0:	68ca      	ldr	r2, [r1, #12]
   834e2:	6889      	ldr	r1, [r1, #8]
   834e4:	462f      	mov	r7, r5
   834e6:	60ca      	str	r2, [r1, #12]
   834e8:	4606      	mov	r6, r0
   834ea:	6091      	str	r1, [r2, #8]
   834ec:	e776      	b.n	833dc <_realloc_r+0xdc>
   834ee:	6841      	ldr	r1, [r0, #4]
   834f0:	f104 0010 	add.w	r0, r4, #16
   834f4:	f021 0103 	bic.w	r1, r1, #3
   834f8:	4431      	add	r1, r6
   834fa:	4281      	cmp	r1, r0
   834fc:	da5a      	bge.n	835b4 <_realloc_r+0x2b4>
   834fe:	07db      	lsls	r3, r3, #31
   83500:	d4c4      	bmi.n	8348c <_realloc_r+0x18c>
   83502:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83506:	ebc3 0a08 	rsb	sl, r3, r8
   8350a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8350e:	f023 0303 	bic.w	r3, r3, #3
   83512:	eb01 0c03 	add.w	ip, r1, r3
   83516:	4560      	cmp	r0, ip
   83518:	f73f af7e 	bgt.w	83418 <_realloc_r+0x118>
   8351c:	4657      	mov	r7, sl
   8351e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83522:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83526:	1f32      	subs	r2, r6, #4
   83528:	2a24      	cmp	r2, #36	; 0x24
   8352a:	60cb      	str	r3, [r1, #12]
   8352c:	6099      	str	r1, [r3, #8]
   8352e:	f200 80b6 	bhi.w	8369e <_realloc_r+0x39e>
   83532:	2a13      	cmp	r2, #19
   83534:	f240 80a7 	bls.w	83686 <_realloc_r+0x386>
   83538:	682b      	ldr	r3, [r5, #0]
   8353a:	2a1b      	cmp	r2, #27
   8353c:	f8ca 3008 	str.w	r3, [sl, #8]
   83540:	686b      	ldr	r3, [r5, #4]
   83542:	f8ca 300c 	str.w	r3, [sl, #12]
   83546:	f200 80b3 	bhi.w	836b0 <_realloc_r+0x3b0>
   8354a:	3508      	adds	r5, #8
   8354c:	f10a 0310 	add.w	r3, sl, #16
   83550:	682a      	ldr	r2, [r5, #0]
   83552:	601a      	str	r2, [r3, #0]
   83554:	686a      	ldr	r2, [r5, #4]
   83556:	605a      	str	r2, [r3, #4]
   83558:	68aa      	ldr	r2, [r5, #8]
   8355a:	609a      	str	r2, [r3, #8]
   8355c:	ebc4 030c 	rsb	r3, r4, ip
   83560:	eb0a 0204 	add.w	r2, sl, r4
   83564:	f043 0301 	orr.w	r3, r3, #1
   83568:	f8cb 2008 	str.w	r2, [fp, #8]
   8356c:	6053      	str	r3, [r2, #4]
   8356e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83572:	4648      	mov	r0, r9
   83574:	f003 0301 	and.w	r3, r3, #1
   83578:	431c      	orrs	r4, r3
   8357a:	f8ca 4004 	str.w	r4, [sl, #4]
   8357e:	f7ff febd 	bl	832fc <__malloc_unlock>
   83582:	4638      	mov	r0, r7
   83584:	e73b      	b.n	833fe <_realloc_r+0xfe>
   83586:	682b      	ldr	r3, [r5, #0]
   83588:	2a1b      	cmp	r2, #27
   8358a:	6003      	str	r3, [r0, #0]
   8358c:	686b      	ldr	r3, [r5, #4]
   8358e:	6043      	str	r3, [r0, #4]
   83590:	d828      	bhi.n	835e4 <_realloc_r+0x2e4>
   83592:	f100 0308 	add.w	r3, r0, #8
   83596:	f105 0208 	add.w	r2, r5, #8
   8359a:	e790      	b.n	834be <_realloc_r+0x1be>
   8359c:	463b      	mov	r3, r7
   8359e:	682a      	ldr	r2, [r5, #0]
   835a0:	4676      	mov	r6, lr
   835a2:	601a      	str	r2, [r3, #0]
   835a4:	686a      	ldr	r2, [r5, #4]
   835a6:	46d0      	mov	r8, sl
   835a8:	605a      	str	r2, [r3, #4]
   835aa:	68aa      	ldr	r2, [r5, #8]
   835ac:	609a      	str	r2, [r3, #8]
   835ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   835b2:	e713      	b.n	833dc <_realloc_r+0xdc>
   835b4:	1b0b      	subs	r3, r1, r4
   835b6:	eb08 0204 	add.w	r2, r8, r4
   835ba:	f043 0301 	orr.w	r3, r3, #1
   835be:	f8cb 2008 	str.w	r2, [fp, #8]
   835c2:	6053      	str	r3, [r2, #4]
   835c4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   835c8:	4648      	mov	r0, r9
   835ca:	f003 0301 	and.w	r3, r3, #1
   835ce:	431c      	orrs	r4, r3
   835d0:	f845 4c04 	str.w	r4, [r5, #-4]
   835d4:	f7ff fe92 	bl	832fc <__malloc_unlock>
   835d8:	4628      	mov	r0, r5
   835da:	e710      	b.n	833fe <_realloc_r+0xfe>
   835dc:	4629      	mov	r1, r5
   835de:	f7ff fe27 	bl	83230 <memmove>
   835e2:	e772      	b.n	834ca <_realloc_r+0x1ca>
   835e4:	68ab      	ldr	r3, [r5, #8]
   835e6:	2a24      	cmp	r2, #36	; 0x24
   835e8:	6083      	str	r3, [r0, #8]
   835ea:	68eb      	ldr	r3, [r5, #12]
   835ec:	60c3      	str	r3, [r0, #12]
   835ee:	d02b      	beq.n	83648 <_realloc_r+0x348>
   835f0:	f100 0310 	add.w	r3, r0, #16
   835f4:	f105 0210 	add.w	r2, r5, #16
   835f8:	e761      	b.n	834be <_realloc_r+0x1be>
   835fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
   835fe:	462f      	mov	r7, r5
   83600:	f022 0203 	bic.w	r2, r2, #3
   83604:	4416      	add	r6, r2
   83606:	e6e9      	b.n	833dc <_realloc_r+0xdc>
   83608:	4629      	mov	r1, r5
   8360a:	4638      	mov	r0, r7
   8360c:	4676      	mov	r6, lr
   8360e:	46d0      	mov	r8, sl
   83610:	f7ff fe0e 	bl	83230 <memmove>
   83614:	f8da 3004 	ldr.w	r3, [sl, #4]
   83618:	e6e0      	b.n	833dc <_realloc_r+0xdc>
   8361a:	463a      	mov	r2, r7
   8361c:	e719      	b.n	83452 <_realloc_r+0x152>
   8361e:	4629      	mov	r1, r5
   83620:	4638      	mov	r0, r7
   83622:	461e      	mov	r6, r3
   83624:	46d0      	mov	r8, sl
   83626:	f7ff fe03 	bl	83230 <memmove>
   8362a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8362e:	e6d5      	b.n	833dc <_realloc_r+0xdc>
   83630:	68ab      	ldr	r3, [r5, #8]
   83632:	2a24      	cmp	r2, #36	; 0x24
   83634:	f8ca 3010 	str.w	r3, [sl, #16]
   83638:	68eb      	ldr	r3, [r5, #12]
   8363a:	f8ca 3014 	str.w	r3, [sl, #20]
   8363e:	d018      	beq.n	83672 <_realloc_r+0x372>
   83640:	3510      	adds	r5, #16
   83642:	f10a 0318 	add.w	r3, sl, #24
   83646:	e7aa      	b.n	8359e <_realloc_r+0x29e>
   83648:	692a      	ldr	r2, [r5, #16]
   8364a:	f100 0318 	add.w	r3, r0, #24
   8364e:	6102      	str	r2, [r0, #16]
   83650:	6969      	ldr	r1, [r5, #20]
   83652:	f105 0218 	add.w	r2, r5, #24
   83656:	6141      	str	r1, [r0, #20]
   83658:	e731      	b.n	834be <_realloc_r+0x1be>
   8365a:	68a9      	ldr	r1, [r5, #8]
   8365c:	2a24      	cmp	r2, #36	; 0x24
   8365e:	f8ca 1010 	str.w	r1, [sl, #16]
   83662:	68e9      	ldr	r1, [r5, #12]
   83664:	f8ca 1014 	str.w	r1, [sl, #20]
   83668:	d00f      	beq.n	8368a <_realloc_r+0x38a>
   8366a:	3510      	adds	r5, #16
   8366c:	f10a 0218 	add.w	r2, sl, #24
   83670:	e6ef      	b.n	83452 <_realloc_r+0x152>
   83672:	692a      	ldr	r2, [r5, #16]
   83674:	f10a 0320 	add.w	r3, sl, #32
   83678:	f8ca 2018 	str.w	r2, [sl, #24]
   8367c:	696a      	ldr	r2, [r5, #20]
   8367e:	3518      	adds	r5, #24
   83680:	f8ca 201c 	str.w	r2, [sl, #28]
   83684:	e78b      	b.n	8359e <_realloc_r+0x29e>
   83686:	463b      	mov	r3, r7
   83688:	e762      	b.n	83550 <_realloc_r+0x250>
   8368a:	6929      	ldr	r1, [r5, #16]
   8368c:	f10a 0220 	add.w	r2, sl, #32
   83690:	f8ca 1018 	str.w	r1, [sl, #24]
   83694:	6969      	ldr	r1, [r5, #20]
   83696:	3518      	adds	r5, #24
   83698:	f8ca 101c 	str.w	r1, [sl, #28]
   8369c:	e6d9      	b.n	83452 <_realloc_r+0x152>
   8369e:	4629      	mov	r1, r5
   836a0:	4638      	mov	r0, r7
   836a2:	f8cd c004 	str.w	ip, [sp, #4]
   836a6:	f7ff fdc3 	bl	83230 <memmove>
   836aa:	f8dd c004 	ldr.w	ip, [sp, #4]
   836ae:	e755      	b.n	8355c <_realloc_r+0x25c>
   836b0:	68ab      	ldr	r3, [r5, #8]
   836b2:	2a24      	cmp	r2, #36	; 0x24
   836b4:	f8ca 3010 	str.w	r3, [sl, #16]
   836b8:	68eb      	ldr	r3, [r5, #12]
   836ba:	f8ca 3014 	str.w	r3, [sl, #20]
   836be:	d003      	beq.n	836c8 <_realloc_r+0x3c8>
   836c0:	3510      	adds	r5, #16
   836c2:	f10a 0318 	add.w	r3, sl, #24
   836c6:	e743      	b.n	83550 <_realloc_r+0x250>
   836c8:	692a      	ldr	r2, [r5, #16]
   836ca:	f10a 0320 	add.w	r3, sl, #32
   836ce:	f8ca 2018 	str.w	r2, [sl, #24]
   836d2:	696a      	ldr	r2, [r5, #20]
   836d4:	3518      	adds	r5, #24
   836d6:	f8ca 201c 	str.w	r2, [sl, #28]
   836da:	e739      	b.n	83550 <_realloc_r+0x250>
   836dc:	20070590 	.word	0x20070590

000836e0 <lflush>:
   836e0:	8983      	ldrh	r3, [r0, #12]
   836e2:	f003 0309 	and.w	r3, r3, #9
   836e6:	2b09      	cmp	r3, #9
   836e8:	d001      	beq.n	836ee <lflush+0xe>
   836ea:	2000      	movs	r0, #0
   836ec:	4770      	bx	lr
   836ee:	f7fe bdbb 	b.w	82268 <fflush>
   836f2:	bf00      	nop

000836f4 <__srefill_r>:
   836f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   836f6:	460c      	mov	r4, r1
   836f8:	4605      	mov	r5, r0
   836fa:	b110      	cbz	r0, 83702 <__srefill_r+0xe>
   836fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836fe:	2b00      	cmp	r3, #0
   83700:	d045      	beq.n	8378e <__srefill_r+0x9a>
   83702:	89a3      	ldrh	r3, [r4, #12]
   83704:	b29a      	uxth	r2, r3
   83706:	0497      	lsls	r7, r2, #18
   83708:	d407      	bmi.n	8371a <__srefill_r+0x26>
   8370a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8370c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   83714:	6662      	str	r2, [r4, #100]	; 0x64
   83716:	81a3      	strh	r3, [r4, #12]
   83718:	b29a      	uxth	r2, r3
   8371a:	2100      	movs	r1, #0
   8371c:	0696      	lsls	r6, r2, #26
   8371e:	6061      	str	r1, [r4, #4]
   83720:	d432      	bmi.n	83788 <__srefill_r+0x94>
   83722:	0750      	lsls	r0, r2, #29
   83724:	d521      	bpl.n	8376a <__srefill_r+0x76>
   83726:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83728:	b161      	cbz	r1, 83744 <__srefill_r+0x50>
   8372a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8372e:	4299      	cmp	r1, r3
   83730:	d002      	beq.n	83738 <__srefill_r+0x44>
   83732:	4628      	mov	r0, r5
   83734:	f7fe ff00 	bl	82538 <_free_r>
   83738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8373a:	2000      	movs	r0, #0
   8373c:	6063      	str	r3, [r4, #4]
   8373e:	6320      	str	r0, [r4, #48]	; 0x30
   83740:	2b00      	cmp	r3, #0
   83742:	d13e      	bne.n	837c2 <__srefill_r+0xce>
   83744:	6923      	ldr	r3, [r4, #16]
   83746:	2b00      	cmp	r3, #0
   83748:	d04b      	beq.n	837e2 <__srefill_r+0xee>
   8374a:	89a7      	ldrh	r7, [r4, #12]
   8374c:	b2be      	uxth	r6, r7
   8374e:	07b3      	lsls	r3, r6, #30
   83750:	d120      	bne.n	83794 <__srefill_r+0xa0>
   83752:	6922      	ldr	r2, [r4, #16]
   83754:	4628      	mov	r0, r5
   83756:	6022      	str	r2, [r4, #0]
   83758:	6a25      	ldr	r5, [r4, #32]
   8375a:	69e1      	ldr	r1, [r4, #28]
   8375c:	6963      	ldr	r3, [r4, #20]
   8375e:	47a8      	blx	r5
   83760:	2800      	cmp	r0, #0
   83762:	6060      	str	r0, [r4, #4]
   83764:	dd09      	ble.n	8377a <__srefill_r+0x86>
   83766:	2000      	movs	r0, #0
   83768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8376a:	06d1      	lsls	r1, r2, #27
   8376c:	d53e      	bpl.n	837ec <__srefill_r+0xf8>
   8376e:	0712      	lsls	r2, r2, #28
   83770:	d42a      	bmi.n	837c8 <__srefill_r+0xd4>
   83772:	f043 0304 	orr.w	r3, r3, #4
   83776:	81a3      	strh	r3, [r4, #12]
   83778:	e7e4      	b.n	83744 <__srefill_r+0x50>
   8377a:	89a3      	ldrh	r3, [r4, #12]
   8377c:	d01b      	beq.n	837b6 <__srefill_r+0xc2>
   8377e:	2200      	movs	r2, #0
   83780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83784:	81a3      	strh	r3, [r4, #12]
   83786:	6062      	str	r2, [r4, #4]
   83788:	f04f 30ff 	mov.w	r0, #4294967295
   8378c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8378e:	f7fe fdfb 	bl	82388 <__sinit>
   83792:	e7b6      	b.n	83702 <__srefill_r+0xe>
   83794:	4a19      	ldr	r2, [pc, #100]	; (837fc <__srefill_r+0x108>)
   83796:	2301      	movs	r3, #1
   83798:	6810      	ldr	r0, [r2, #0]
   8379a:	81a3      	strh	r3, [r4, #12]
   8379c:	4918      	ldr	r1, [pc, #96]	; (83800 <__srefill_r+0x10c>)
   8379e:	f006 0609 	and.w	r6, r6, #9
   837a2:	f7ff f931 	bl	82a08 <_fwalk>
   837a6:	2e09      	cmp	r6, #9
   837a8:	81a7      	strh	r7, [r4, #12]
   837aa:	d1d2      	bne.n	83752 <__srefill_r+0x5e>
   837ac:	4628      	mov	r0, r5
   837ae:	4621      	mov	r1, r4
   837b0:	f7fe fca0 	bl	820f4 <__sflush_r>
   837b4:	e7cd      	b.n	83752 <__srefill_r+0x5e>
   837b6:	f043 0320 	orr.w	r3, r3, #32
   837ba:	f04f 30ff 	mov.w	r0, #4294967295
   837be:	81a3      	strh	r3, [r4, #12]
   837c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   837c4:	6023      	str	r3, [r4, #0]
   837c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837c8:	4628      	mov	r0, r5
   837ca:	4621      	mov	r1, r4
   837cc:	f7fe fd36 	bl	8223c <_fflush_r>
   837d0:	2800      	cmp	r0, #0
   837d2:	d1d9      	bne.n	83788 <__srefill_r+0x94>
   837d4:	89a3      	ldrh	r3, [r4, #12]
   837d6:	60a0      	str	r0, [r4, #8]
   837d8:	f023 0308 	bic.w	r3, r3, #8
   837dc:	61a0      	str	r0, [r4, #24]
   837de:	b29b      	uxth	r3, r3
   837e0:	e7c7      	b.n	83772 <__srefill_r+0x7e>
   837e2:	4628      	mov	r0, r5
   837e4:	4621      	mov	r1, r4
   837e6:	f7ff f965 	bl	82ab4 <__smakebuf_r>
   837ea:	e7ae      	b.n	8374a <__srefill_r+0x56>
   837ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   837f0:	2209      	movs	r2, #9
   837f2:	602a      	str	r2, [r5, #0]
   837f4:	f04f 30ff 	mov.w	r0, #4294967295
   837f8:	81a3      	strh	r3, [r4, #12]
   837fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837fc:	000841e4 	.word	0x000841e4
   83800:	000836e1 	.word	0x000836e1

00083804 <_sbrk_r>:
   83804:	b538      	push	{r3, r4, r5, lr}
   83806:	4c07      	ldr	r4, [pc, #28]	; (83824 <_sbrk_r+0x20>)
   83808:	2300      	movs	r3, #0
   8380a:	4605      	mov	r5, r0
   8380c:	4608      	mov	r0, r1
   8380e:	6023      	str	r3, [r4, #0]
   83810:	f7fd fb6c 	bl	80eec <_sbrk>
   83814:	1c43      	adds	r3, r0, #1
   83816:	d000      	beq.n	8381a <_sbrk_r+0x16>
   83818:	bd38      	pop	{r3, r4, r5, pc}
   8381a:	6823      	ldr	r3, [r4, #0]
   8381c:	2b00      	cmp	r3, #0
   8381e:	d0fb      	beq.n	83818 <_sbrk_r+0x14>
   83820:	602b      	str	r3, [r5, #0]
   83822:	bd38      	pop	{r3, r4, r5, pc}
   83824:	20070b14 	.word	0x20070b14

00083828 <__sread>:
   83828:	b510      	push	{r4, lr}
   8382a:	460c      	mov	r4, r1
   8382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83830:	f000 f9ea 	bl	83c08 <_read_r>
   83834:	2800      	cmp	r0, #0
   83836:	db03      	blt.n	83840 <__sread+0x18>
   83838:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8383a:	4403      	add	r3, r0
   8383c:	6523      	str	r3, [r4, #80]	; 0x50
   8383e:	bd10      	pop	{r4, pc}
   83840:	89a3      	ldrh	r3, [r4, #12]
   83842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83846:	81a3      	strh	r3, [r4, #12]
   83848:	bd10      	pop	{r4, pc}
   8384a:	bf00      	nop

0008384c <__swrite>:
   8384c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83850:	460c      	mov	r4, r1
   83852:	8989      	ldrh	r1, [r1, #12]
   83854:	461d      	mov	r5, r3
   83856:	05cb      	lsls	r3, r1, #23
   83858:	4616      	mov	r6, r2
   8385a:	4607      	mov	r7, r0
   8385c:	d506      	bpl.n	8386c <__swrite+0x20>
   8385e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83862:	2200      	movs	r2, #0
   83864:	2302      	movs	r3, #2
   83866:	f000 f9bb 	bl	83be0 <_lseek_r>
   8386a:	89a1      	ldrh	r1, [r4, #12]
   8386c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83870:	81a1      	strh	r1, [r4, #12]
   83872:	4638      	mov	r0, r7
   83874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83878:	4632      	mov	r2, r6
   8387a:	462b      	mov	r3, r5
   8387c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83880:	f000 b8ce 	b.w	83a20 <_write_r>

00083884 <__sseek>:
   83884:	b510      	push	{r4, lr}
   83886:	460c      	mov	r4, r1
   83888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8388c:	f000 f9a8 	bl	83be0 <_lseek_r>
   83890:	89a3      	ldrh	r3, [r4, #12]
   83892:	1c42      	adds	r2, r0, #1
   83894:	bf0e      	itee	eq
   83896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8389a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8389e:	6520      	strne	r0, [r4, #80]	; 0x50
   838a0:	81a3      	strh	r3, [r4, #12]
   838a2:	bd10      	pop	{r4, pc}

000838a4 <__sclose>:
   838a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838a8:	f000 b920 	b.w	83aec <_close_r>

000838ac <strlen>:
   838ac:	f020 0103 	bic.w	r1, r0, #3
   838b0:	f010 0003 	ands.w	r0, r0, #3
   838b4:	f1c0 0000 	rsb	r0, r0, #0
   838b8:	f851 3b04 	ldr.w	r3, [r1], #4
   838bc:	f100 0c04 	add.w	ip, r0, #4
   838c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   838c4:	f06f 0200 	mvn.w	r2, #0
   838c8:	bf1c      	itt	ne
   838ca:	fa22 f20c 	lsrne.w	r2, r2, ip
   838ce:	4313      	orrne	r3, r2
   838d0:	f04f 0c01 	mov.w	ip, #1
   838d4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   838d8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   838dc:	eba3 020c 	sub.w	r2, r3, ip
   838e0:	ea22 0203 	bic.w	r2, r2, r3
   838e4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   838e8:	bf04      	itt	eq
   838ea:	f851 3b04 	ldreq.w	r3, [r1], #4
   838ee:	3004      	addeq	r0, #4
   838f0:	d0f4      	beq.n	838dc <strlen+0x30>
   838f2:	f1c2 0100 	rsb	r1, r2, #0
   838f6:	ea02 0201 	and.w	r2, r2, r1
   838fa:	fab2 f282 	clz	r2, r2
   838fe:	f1c2 021f 	rsb	r2, r2, #31
   83902:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83906:	4770      	bx	lr

00083908 <__swbuf_r>:
   83908:	b570      	push	{r4, r5, r6, lr}
   8390a:	460d      	mov	r5, r1
   8390c:	4614      	mov	r4, r2
   8390e:	4606      	mov	r6, r0
   83910:	b110      	cbz	r0, 83918 <__swbuf_r+0x10>
   83912:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83914:	2b00      	cmp	r3, #0
   83916:	d048      	beq.n	839aa <__swbuf_r+0xa2>
   83918:	89a2      	ldrh	r2, [r4, #12]
   8391a:	69a3      	ldr	r3, [r4, #24]
   8391c:	b291      	uxth	r1, r2
   8391e:	0708      	lsls	r0, r1, #28
   83920:	60a3      	str	r3, [r4, #8]
   83922:	d538      	bpl.n	83996 <__swbuf_r+0x8e>
   83924:	6923      	ldr	r3, [r4, #16]
   83926:	2b00      	cmp	r3, #0
   83928:	d035      	beq.n	83996 <__swbuf_r+0x8e>
   8392a:	0489      	lsls	r1, r1, #18
   8392c:	b2ed      	uxtb	r5, r5
   8392e:	d515      	bpl.n	8395c <__swbuf_r+0x54>
   83930:	6822      	ldr	r2, [r4, #0]
   83932:	6961      	ldr	r1, [r4, #20]
   83934:	1ad3      	subs	r3, r2, r3
   83936:	428b      	cmp	r3, r1
   83938:	da1c      	bge.n	83974 <__swbuf_r+0x6c>
   8393a:	3301      	adds	r3, #1
   8393c:	68a1      	ldr	r1, [r4, #8]
   8393e:	1c50      	adds	r0, r2, #1
   83940:	3901      	subs	r1, #1
   83942:	60a1      	str	r1, [r4, #8]
   83944:	6020      	str	r0, [r4, #0]
   83946:	7015      	strb	r5, [r2, #0]
   83948:	6962      	ldr	r2, [r4, #20]
   8394a:	429a      	cmp	r2, r3
   8394c:	d01a      	beq.n	83984 <__swbuf_r+0x7c>
   8394e:	89a3      	ldrh	r3, [r4, #12]
   83950:	07db      	lsls	r3, r3, #31
   83952:	d501      	bpl.n	83958 <__swbuf_r+0x50>
   83954:	2d0a      	cmp	r5, #10
   83956:	d015      	beq.n	83984 <__swbuf_r+0x7c>
   83958:	4628      	mov	r0, r5
   8395a:	bd70      	pop	{r4, r5, r6, pc}
   8395c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8395e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83962:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83966:	81a2      	strh	r2, [r4, #12]
   83968:	6822      	ldr	r2, [r4, #0]
   8396a:	6661      	str	r1, [r4, #100]	; 0x64
   8396c:	6961      	ldr	r1, [r4, #20]
   8396e:	1ad3      	subs	r3, r2, r3
   83970:	428b      	cmp	r3, r1
   83972:	dbe2      	blt.n	8393a <__swbuf_r+0x32>
   83974:	4630      	mov	r0, r6
   83976:	4621      	mov	r1, r4
   83978:	f7fe fc60 	bl	8223c <_fflush_r>
   8397c:	b940      	cbnz	r0, 83990 <__swbuf_r+0x88>
   8397e:	6822      	ldr	r2, [r4, #0]
   83980:	2301      	movs	r3, #1
   83982:	e7db      	b.n	8393c <__swbuf_r+0x34>
   83984:	4630      	mov	r0, r6
   83986:	4621      	mov	r1, r4
   83988:	f7fe fc58 	bl	8223c <_fflush_r>
   8398c:	2800      	cmp	r0, #0
   8398e:	d0e3      	beq.n	83958 <__swbuf_r+0x50>
   83990:	f04f 30ff 	mov.w	r0, #4294967295
   83994:	bd70      	pop	{r4, r5, r6, pc}
   83996:	4630      	mov	r0, r6
   83998:	4621      	mov	r1, r4
   8399a:	f7fe fb39 	bl	82010 <__swsetup_r>
   8399e:	2800      	cmp	r0, #0
   839a0:	d1f6      	bne.n	83990 <__swbuf_r+0x88>
   839a2:	89a2      	ldrh	r2, [r4, #12]
   839a4:	6923      	ldr	r3, [r4, #16]
   839a6:	b291      	uxth	r1, r2
   839a8:	e7bf      	b.n	8392a <__swbuf_r+0x22>
   839aa:	f7fe fced 	bl	82388 <__sinit>
   839ae:	e7b3      	b.n	83918 <__swbuf_r+0x10>

000839b0 <_wcrtomb_r>:
   839b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839b4:	4605      	mov	r5, r0
   839b6:	b086      	sub	sp, #24
   839b8:	461e      	mov	r6, r3
   839ba:	460c      	mov	r4, r1
   839bc:	b1a1      	cbz	r1, 839e8 <_wcrtomb_r+0x38>
   839be:	4b10      	ldr	r3, [pc, #64]	; (83a00 <_wcrtomb_r+0x50>)
   839c0:	4617      	mov	r7, r2
   839c2:	f8d3 8000 	ldr.w	r8, [r3]
   839c6:	f7ff f86b 	bl	82aa0 <__locale_charset>
   839ca:	9600      	str	r6, [sp, #0]
   839cc:	4603      	mov	r3, r0
   839ce:	4621      	mov	r1, r4
   839d0:	463a      	mov	r2, r7
   839d2:	4628      	mov	r0, r5
   839d4:	47c0      	blx	r8
   839d6:	1c43      	adds	r3, r0, #1
   839d8:	d103      	bne.n	839e2 <_wcrtomb_r+0x32>
   839da:	2200      	movs	r2, #0
   839dc:	238a      	movs	r3, #138	; 0x8a
   839de:	6032      	str	r2, [r6, #0]
   839e0:	602b      	str	r3, [r5, #0]
   839e2:	b006      	add	sp, #24
   839e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839e8:	4b05      	ldr	r3, [pc, #20]	; (83a00 <_wcrtomb_r+0x50>)
   839ea:	681f      	ldr	r7, [r3, #0]
   839ec:	f7ff f858 	bl	82aa0 <__locale_charset>
   839f0:	9600      	str	r6, [sp, #0]
   839f2:	4603      	mov	r3, r0
   839f4:	4622      	mov	r2, r4
   839f6:	4628      	mov	r0, r5
   839f8:	a903      	add	r1, sp, #12
   839fa:	47b8      	blx	r7
   839fc:	e7eb      	b.n	839d6 <_wcrtomb_r+0x26>
   839fe:	bf00      	nop
   83a00:	200709a0 	.word	0x200709a0

00083a04 <__ascii_wctomb>:
   83a04:	b121      	cbz	r1, 83a10 <__ascii_wctomb+0xc>
   83a06:	2aff      	cmp	r2, #255	; 0xff
   83a08:	d804      	bhi.n	83a14 <__ascii_wctomb+0x10>
   83a0a:	700a      	strb	r2, [r1, #0]
   83a0c:	2001      	movs	r0, #1
   83a0e:	4770      	bx	lr
   83a10:	4608      	mov	r0, r1
   83a12:	4770      	bx	lr
   83a14:	238a      	movs	r3, #138	; 0x8a
   83a16:	6003      	str	r3, [r0, #0]
   83a18:	f04f 30ff 	mov.w	r0, #4294967295
   83a1c:	4770      	bx	lr
   83a1e:	bf00      	nop

00083a20 <_write_r>:
   83a20:	b570      	push	{r4, r5, r6, lr}
   83a22:	4c08      	ldr	r4, [pc, #32]	; (83a44 <_write_r+0x24>)
   83a24:	4606      	mov	r6, r0
   83a26:	2500      	movs	r5, #0
   83a28:	4608      	mov	r0, r1
   83a2a:	4611      	mov	r1, r2
   83a2c:	461a      	mov	r2, r3
   83a2e:	6025      	str	r5, [r4, #0]
   83a30:	f7fc fc0e 	bl	80250 <_write>
   83a34:	1c43      	adds	r3, r0, #1
   83a36:	d000      	beq.n	83a3a <_write_r+0x1a>
   83a38:	bd70      	pop	{r4, r5, r6, pc}
   83a3a:	6823      	ldr	r3, [r4, #0]
   83a3c:	2b00      	cmp	r3, #0
   83a3e:	d0fb      	beq.n	83a38 <_write_r+0x18>
   83a40:	6033      	str	r3, [r6, #0]
   83a42:	bd70      	pop	{r4, r5, r6, pc}
   83a44:	20070b14 	.word	0x20070b14

00083a48 <__register_exitproc>:
   83a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a4c:	4c25      	ldr	r4, [pc, #148]	; (83ae4 <__register_exitproc+0x9c>)
   83a4e:	4606      	mov	r6, r0
   83a50:	6825      	ldr	r5, [r4, #0]
   83a52:	4688      	mov	r8, r1
   83a54:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83a58:	4692      	mov	sl, r2
   83a5a:	4699      	mov	r9, r3
   83a5c:	b3c4      	cbz	r4, 83ad0 <__register_exitproc+0x88>
   83a5e:	6860      	ldr	r0, [r4, #4]
   83a60:	281f      	cmp	r0, #31
   83a62:	dc17      	bgt.n	83a94 <__register_exitproc+0x4c>
   83a64:	1c41      	adds	r1, r0, #1
   83a66:	b176      	cbz	r6, 83a86 <__register_exitproc+0x3e>
   83a68:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83a6c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83a70:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83a74:	2201      	movs	r2, #1
   83a76:	4082      	lsls	r2, r0
   83a78:	4315      	orrs	r5, r2
   83a7a:	2e02      	cmp	r6, #2
   83a7c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83a80:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83a84:	d01e      	beq.n	83ac4 <__register_exitproc+0x7c>
   83a86:	1c83      	adds	r3, r0, #2
   83a88:	6061      	str	r1, [r4, #4]
   83a8a:	2000      	movs	r0, #0
   83a8c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a94:	4b14      	ldr	r3, [pc, #80]	; (83ae8 <__register_exitproc+0xa0>)
   83a96:	b303      	cbz	r3, 83ada <__register_exitproc+0x92>
   83a98:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83a9c:	f7ff f87a 	bl	82b94 <malloc>
   83aa0:	4604      	mov	r4, r0
   83aa2:	b1d0      	cbz	r0, 83ada <__register_exitproc+0x92>
   83aa4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83aa8:	2700      	movs	r7, #0
   83aaa:	e884 0088 	stmia.w	r4, {r3, r7}
   83aae:	4638      	mov	r0, r7
   83ab0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83ab4:	2101      	movs	r1, #1
   83ab6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83aba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   83abe:	2e00      	cmp	r6, #0
   83ac0:	d0e1      	beq.n	83a86 <__register_exitproc+0x3e>
   83ac2:	e7d1      	b.n	83a68 <__register_exitproc+0x20>
   83ac4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83ac8:	431a      	orrs	r2, r3
   83aca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   83ace:	e7da      	b.n	83a86 <__register_exitproc+0x3e>
   83ad0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83ad4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83ad8:	e7c1      	b.n	83a5e <__register_exitproc+0x16>
   83ada:	f04f 30ff 	mov.w	r0, #4294967295
   83ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ae2:	bf00      	nop
   83ae4:	000841e4 	.word	0x000841e4
   83ae8:	00082b95 	.word	0x00082b95

00083aec <_close_r>:
   83aec:	b538      	push	{r3, r4, r5, lr}
   83aee:	4c07      	ldr	r4, [pc, #28]	; (83b0c <_close_r+0x20>)
   83af0:	2300      	movs	r3, #0
   83af2:	4605      	mov	r5, r0
   83af4:	4608      	mov	r0, r1
   83af6:	6023      	str	r3, [r4, #0]
   83af8:	f7fd fa12 	bl	80f20 <_close>
   83afc:	1c43      	adds	r3, r0, #1
   83afe:	d000      	beq.n	83b02 <_close_r+0x16>
   83b00:	bd38      	pop	{r3, r4, r5, pc}
   83b02:	6823      	ldr	r3, [r4, #0]
   83b04:	2b00      	cmp	r3, #0
   83b06:	d0fb      	beq.n	83b00 <_close_r+0x14>
   83b08:	602b      	str	r3, [r5, #0]
   83b0a:	bd38      	pop	{r3, r4, r5, pc}
   83b0c:	20070b14 	.word	0x20070b14

00083b10 <_fclose_r>:
   83b10:	2900      	cmp	r1, #0
   83b12:	d03d      	beq.n	83b90 <_fclose_r+0x80>
   83b14:	b570      	push	{r4, r5, r6, lr}
   83b16:	4605      	mov	r5, r0
   83b18:	460c      	mov	r4, r1
   83b1a:	b108      	cbz	r0, 83b20 <_fclose_r+0x10>
   83b1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b1e:	b37b      	cbz	r3, 83b80 <_fclose_r+0x70>
   83b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b24:	b90b      	cbnz	r3, 83b2a <_fclose_r+0x1a>
   83b26:	2000      	movs	r0, #0
   83b28:	bd70      	pop	{r4, r5, r6, pc}
   83b2a:	4628      	mov	r0, r5
   83b2c:	4621      	mov	r1, r4
   83b2e:	f7fe fae1 	bl	820f4 <__sflush_r>
   83b32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83b34:	4606      	mov	r6, r0
   83b36:	b133      	cbz	r3, 83b46 <_fclose_r+0x36>
   83b38:	4628      	mov	r0, r5
   83b3a:	69e1      	ldr	r1, [r4, #28]
   83b3c:	4798      	blx	r3
   83b3e:	2800      	cmp	r0, #0
   83b40:	bfb8      	it	lt
   83b42:	f04f 36ff 	movlt.w	r6, #4294967295
   83b46:	89a3      	ldrh	r3, [r4, #12]
   83b48:	061b      	lsls	r3, r3, #24
   83b4a:	d41c      	bmi.n	83b86 <_fclose_r+0x76>
   83b4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83b4e:	b141      	cbz	r1, 83b62 <_fclose_r+0x52>
   83b50:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83b54:	4299      	cmp	r1, r3
   83b56:	d002      	beq.n	83b5e <_fclose_r+0x4e>
   83b58:	4628      	mov	r0, r5
   83b5a:	f7fe fced 	bl	82538 <_free_r>
   83b5e:	2300      	movs	r3, #0
   83b60:	6323      	str	r3, [r4, #48]	; 0x30
   83b62:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83b64:	b121      	cbz	r1, 83b70 <_fclose_r+0x60>
   83b66:	4628      	mov	r0, r5
   83b68:	f7fe fce6 	bl	82538 <_free_r>
   83b6c:	2300      	movs	r3, #0
   83b6e:	6463      	str	r3, [r4, #68]	; 0x44
   83b70:	f7fe fc10 	bl	82394 <__sfp_lock_acquire>
   83b74:	2300      	movs	r3, #0
   83b76:	81a3      	strh	r3, [r4, #12]
   83b78:	f7fe fc0e 	bl	82398 <__sfp_lock_release>
   83b7c:	4630      	mov	r0, r6
   83b7e:	bd70      	pop	{r4, r5, r6, pc}
   83b80:	f7fe fc02 	bl	82388 <__sinit>
   83b84:	e7cc      	b.n	83b20 <_fclose_r+0x10>
   83b86:	4628      	mov	r0, r5
   83b88:	6921      	ldr	r1, [r4, #16]
   83b8a:	f7fe fcd5 	bl	82538 <_free_r>
   83b8e:	e7dd      	b.n	83b4c <_fclose_r+0x3c>
   83b90:	2000      	movs	r0, #0
   83b92:	4770      	bx	lr

00083b94 <_fstat_r>:
   83b94:	b538      	push	{r3, r4, r5, lr}
   83b96:	4c08      	ldr	r4, [pc, #32]	; (83bb8 <_fstat_r+0x24>)
   83b98:	2300      	movs	r3, #0
   83b9a:	4605      	mov	r5, r0
   83b9c:	4608      	mov	r0, r1
   83b9e:	4611      	mov	r1, r2
   83ba0:	6023      	str	r3, [r4, #0]
   83ba2:	f7fd f9c1 	bl	80f28 <_fstat>
   83ba6:	1c43      	adds	r3, r0, #1
   83ba8:	d000      	beq.n	83bac <_fstat_r+0x18>
   83baa:	bd38      	pop	{r3, r4, r5, pc}
   83bac:	6823      	ldr	r3, [r4, #0]
   83bae:	2b00      	cmp	r3, #0
   83bb0:	d0fb      	beq.n	83baa <_fstat_r+0x16>
   83bb2:	602b      	str	r3, [r5, #0]
   83bb4:	bd38      	pop	{r3, r4, r5, pc}
   83bb6:	bf00      	nop
   83bb8:	20070b14 	.word	0x20070b14

00083bbc <_isatty_r>:
   83bbc:	b538      	push	{r3, r4, r5, lr}
   83bbe:	4c07      	ldr	r4, [pc, #28]	; (83bdc <_isatty_r+0x20>)
   83bc0:	2300      	movs	r3, #0
   83bc2:	4605      	mov	r5, r0
   83bc4:	4608      	mov	r0, r1
   83bc6:	6023      	str	r3, [r4, #0]
   83bc8:	f7fd f9b4 	bl	80f34 <_isatty>
   83bcc:	1c43      	adds	r3, r0, #1
   83bce:	d000      	beq.n	83bd2 <_isatty_r+0x16>
   83bd0:	bd38      	pop	{r3, r4, r5, pc}
   83bd2:	6823      	ldr	r3, [r4, #0]
   83bd4:	2b00      	cmp	r3, #0
   83bd6:	d0fb      	beq.n	83bd0 <_isatty_r+0x14>
   83bd8:	602b      	str	r3, [r5, #0]
   83bda:	bd38      	pop	{r3, r4, r5, pc}
   83bdc:	20070b14 	.word	0x20070b14

00083be0 <_lseek_r>:
   83be0:	b570      	push	{r4, r5, r6, lr}
   83be2:	4c08      	ldr	r4, [pc, #32]	; (83c04 <_lseek_r+0x24>)
   83be4:	4606      	mov	r6, r0
   83be6:	2500      	movs	r5, #0
   83be8:	4608      	mov	r0, r1
   83bea:	4611      	mov	r1, r2
   83bec:	461a      	mov	r2, r3
   83bee:	6025      	str	r5, [r4, #0]
   83bf0:	f7fd f9a2 	bl	80f38 <_lseek>
   83bf4:	1c43      	adds	r3, r0, #1
   83bf6:	d000      	beq.n	83bfa <_lseek_r+0x1a>
   83bf8:	bd70      	pop	{r4, r5, r6, pc}
   83bfa:	6823      	ldr	r3, [r4, #0]
   83bfc:	2b00      	cmp	r3, #0
   83bfe:	d0fb      	beq.n	83bf8 <_lseek_r+0x18>
   83c00:	6033      	str	r3, [r6, #0]
   83c02:	bd70      	pop	{r4, r5, r6, pc}
   83c04:	20070b14 	.word	0x20070b14

00083c08 <_read_r>:
   83c08:	b570      	push	{r4, r5, r6, lr}
   83c0a:	4c08      	ldr	r4, [pc, #32]	; (83c2c <_read_r+0x24>)
   83c0c:	4606      	mov	r6, r0
   83c0e:	2500      	movs	r5, #0
   83c10:	4608      	mov	r0, r1
   83c12:	4611      	mov	r1, r2
   83c14:	461a      	mov	r2, r3
   83c16:	6025      	str	r5, [r4, #0]
   83c18:	f7fc fafc 	bl	80214 <_read>
   83c1c:	1c43      	adds	r3, r0, #1
   83c1e:	d000      	beq.n	83c22 <_read_r+0x1a>
   83c20:	bd70      	pop	{r4, r5, r6, pc}
   83c22:	6823      	ldr	r3, [r4, #0]
   83c24:	2b00      	cmp	r3, #0
   83c26:	d0fb      	beq.n	83c20 <_read_r+0x18>
   83c28:	6033      	str	r3, [r6, #0]
   83c2a:	bd70      	pop	{r4, r5, r6, pc}
   83c2c:	20070b14 	.word	0x20070b14

00083c30 <__aeabi_uldivmod>:
   83c30:	b953      	cbnz	r3, 83c48 <__aeabi_uldivmod+0x18>
   83c32:	b94a      	cbnz	r2, 83c48 <__aeabi_uldivmod+0x18>
   83c34:	2900      	cmp	r1, #0
   83c36:	bf08      	it	eq
   83c38:	2800      	cmpeq	r0, #0
   83c3a:	bf1c      	itt	ne
   83c3c:	f04f 31ff 	movne.w	r1, #4294967295
   83c40:	f04f 30ff 	movne.w	r0, #4294967295
   83c44:	f000 b83c 	b.w	83cc0 <__aeabi_idiv0>
   83c48:	b082      	sub	sp, #8
   83c4a:	46ec      	mov	ip, sp
   83c4c:	e92d 5000 	stmdb	sp!, {ip, lr}
   83c50:	f000 f81e 	bl	83c90 <__gnu_uldivmod_helper>
   83c54:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c58:	b002      	add	sp, #8
   83c5a:	bc0c      	pop	{r2, r3}
   83c5c:	4770      	bx	lr
   83c5e:	bf00      	nop

00083c60 <__gnu_ldivmod_helper>:
   83c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c64:	9c06      	ldr	r4, [sp, #24]
   83c66:	4690      	mov	r8, r2
   83c68:	4606      	mov	r6, r0
   83c6a:	460f      	mov	r7, r1
   83c6c:	461d      	mov	r5, r3
   83c6e:	f000 f829 	bl	83cc4 <__divdi3>
   83c72:	fb08 fc01 	mul.w	ip, r8, r1
   83c76:	fba8 2300 	umull	r2, r3, r8, r0
   83c7a:	fb00 c505 	mla	r5, r0, r5, ip
   83c7e:	1ab2      	subs	r2, r6, r2
   83c80:	442b      	add	r3, r5
   83c82:	eb67 0303 	sbc.w	r3, r7, r3
   83c86:	4686      	mov	lr, r0
   83c88:	e9c4 2300 	strd	r2, r3, [r4]
   83c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083c90 <__gnu_uldivmod_helper>:
   83c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83c94:	9e08      	ldr	r6, [sp, #32]
   83c96:	4617      	mov	r7, r2
   83c98:	4680      	mov	r8, r0
   83c9a:	4689      	mov	r9, r1
   83c9c:	461d      	mov	r5, r3
   83c9e:	f000 f967 	bl	83f70 <__udivdi3>
   83ca2:	fb00 f305 	mul.w	r3, r0, r5
   83ca6:	fba0 4507 	umull	r4, r5, r0, r7
   83caa:	fb07 3701 	mla	r7, r7, r1, r3
   83cae:	ebb8 0404 	subs.w	r4, r8, r4
   83cb2:	443d      	add	r5, r7
   83cb4:	eb69 0505 	sbc.w	r5, r9, r5
   83cb8:	e9c6 4500 	strd	r4, r5, [r6]
   83cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083cc0 <__aeabi_idiv0>:
   83cc0:	4770      	bx	lr
   83cc2:	bf00      	nop

00083cc4 <__divdi3>:
   83cc4:	2900      	cmp	r1, #0
   83cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83cca:	f2c0 80a8 	blt.w	83e1e <__divdi3+0x15a>
   83cce:	2600      	movs	r6, #0
   83cd0:	2b00      	cmp	r3, #0
   83cd2:	f2c0 809e 	blt.w	83e12 <__divdi3+0x14e>
   83cd6:	4681      	mov	r9, r0
   83cd8:	468e      	mov	lr, r1
   83cda:	4690      	mov	r8, r2
   83cdc:	469c      	mov	ip, r3
   83cde:	4617      	mov	r7, r2
   83ce0:	4604      	mov	r4, r0
   83ce2:	460d      	mov	r5, r1
   83ce4:	2b00      	cmp	r3, #0
   83ce6:	d13d      	bne.n	83d64 <__divdi3+0xa0>
   83ce8:	428a      	cmp	r2, r1
   83cea:	d959      	bls.n	83da0 <__divdi3+0xdc>
   83cec:	fab2 f382 	clz	r3, r2
   83cf0:	b13b      	cbz	r3, 83d02 <__divdi3+0x3e>
   83cf2:	f1c3 0220 	rsb	r2, r3, #32
   83cf6:	409d      	lsls	r5, r3
   83cf8:	fa20 f202 	lsr.w	r2, r0, r2
   83cfc:	409f      	lsls	r7, r3
   83cfe:	4315      	orrs	r5, r2
   83d00:	409c      	lsls	r4, r3
   83d02:	0c39      	lsrs	r1, r7, #16
   83d04:	fbb5 f0f1 	udiv	r0, r5, r1
   83d08:	fa1f fe87 	uxth.w	lr, r7
   83d0c:	fb01 5510 	mls	r5, r1, r0, r5
   83d10:	fb0e f300 	mul.w	r3, lr, r0
   83d14:	0c22      	lsrs	r2, r4, #16
   83d16:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   83d1a:	42ab      	cmp	r3, r5
   83d1c:	d909      	bls.n	83d32 <__divdi3+0x6e>
   83d1e:	19ed      	adds	r5, r5, r7
   83d20:	f100 32ff 	add.w	r2, r0, #4294967295
   83d24:	f080 810b 	bcs.w	83f3e <__divdi3+0x27a>
   83d28:	42ab      	cmp	r3, r5
   83d2a:	f240 8108 	bls.w	83f3e <__divdi3+0x27a>
   83d2e:	3802      	subs	r0, #2
   83d30:	443d      	add	r5, r7
   83d32:	1aed      	subs	r5, r5, r3
   83d34:	fbb5 f3f1 	udiv	r3, r5, r1
   83d38:	fb01 5513 	mls	r5, r1, r3, r5
   83d3c:	fb0e fe03 	mul.w	lr, lr, r3
   83d40:	b2a4      	uxth	r4, r4
   83d42:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83d46:	45ae      	cmp	lr, r5
   83d48:	d908      	bls.n	83d5c <__divdi3+0x98>
   83d4a:	19ed      	adds	r5, r5, r7
   83d4c:	f103 32ff 	add.w	r2, r3, #4294967295
   83d50:	f080 80f7 	bcs.w	83f42 <__divdi3+0x27e>
   83d54:	45ae      	cmp	lr, r5
   83d56:	f240 80f4 	bls.w	83f42 <__divdi3+0x27e>
   83d5a:	3b02      	subs	r3, #2
   83d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83d60:	2200      	movs	r2, #0
   83d62:	e003      	b.n	83d6c <__divdi3+0xa8>
   83d64:	428b      	cmp	r3, r1
   83d66:	d90f      	bls.n	83d88 <__divdi3+0xc4>
   83d68:	2200      	movs	r2, #0
   83d6a:	4613      	mov	r3, r2
   83d6c:	1c34      	adds	r4, r6, #0
   83d6e:	bf18      	it	ne
   83d70:	2401      	movne	r4, #1
   83d72:	4260      	negs	r0, r4
   83d74:	f04f 0500 	mov.w	r5, #0
   83d78:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   83d7c:	4058      	eors	r0, r3
   83d7e:	4051      	eors	r1, r2
   83d80:	1900      	adds	r0, r0, r4
   83d82:	4169      	adcs	r1, r5
   83d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83d88:	fab3 f283 	clz	r2, r3
   83d8c:	2a00      	cmp	r2, #0
   83d8e:	f040 8089 	bne.w	83ea4 <__divdi3+0x1e0>
   83d92:	428b      	cmp	r3, r1
   83d94:	d302      	bcc.n	83d9c <__divdi3+0xd8>
   83d96:	4580      	cmp	r8, r0
   83d98:	f200 80e2 	bhi.w	83f60 <__divdi3+0x29c>
   83d9c:	2301      	movs	r3, #1
   83d9e:	e7e5      	b.n	83d6c <__divdi3+0xa8>
   83da0:	b912      	cbnz	r2, 83da8 <__divdi3+0xe4>
   83da2:	2301      	movs	r3, #1
   83da4:	fbb3 f7f2 	udiv	r7, r3, r2
   83da8:	fab7 f887 	clz	r8, r7
   83dac:	f1b8 0f00 	cmp.w	r8, #0
   83db0:	d13b      	bne.n	83e2a <__divdi3+0x166>
   83db2:	1bed      	subs	r5, r5, r7
   83db4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83db8:	fa1f fe87 	uxth.w	lr, r7
   83dbc:	2201      	movs	r2, #1
   83dbe:	fbb5 f0fc 	udiv	r0, r5, ip
   83dc2:	fb0c 5510 	mls	r5, ip, r0, r5
   83dc6:	fb0e f300 	mul.w	r3, lr, r0
   83dca:	0c21      	lsrs	r1, r4, #16
   83dcc:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   83dd0:	42ab      	cmp	r3, r5
   83dd2:	d907      	bls.n	83de4 <__divdi3+0x120>
   83dd4:	19ed      	adds	r5, r5, r7
   83dd6:	f100 31ff 	add.w	r1, r0, #4294967295
   83dda:	d202      	bcs.n	83de2 <__divdi3+0x11e>
   83ddc:	42ab      	cmp	r3, r5
   83dde:	f200 80c3 	bhi.w	83f68 <__divdi3+0x2a4>
   83de2:	4608      	mov	r0, r1
   83de4:	1aed      	subs	r5, r5, r3
   83de6:	fbb5 f3fc 	udiv	r3, r5, ip
   83dea:	fb0c 5513 	mls	r5, ip, r3, r5
   83dee:	fb0e fe03 	mul.w	lr, lr, r3
   83df2:	b2a4      	uxth	r4, r4
   83df4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83df8:	45ae      	cmp	lr, r5
   83dfa:	d907      	bls.n	83e0c <__divdi3+0x148>
   83dfc:	19ed      	adds	r5, r5, r7
   83dfe:	f103 31ff 	add.w	r1, r3, #4294967295
   83e02:	d202      	bcs.n	83e0a <__divdi3+0x146>
   83e04:	45ae      	cmp	lr, r5
   83e06:	f200 80ad 	bhi.w	83f64 <__divdi3+0x2a0>
   83e0a:	460b      	mov	r3, r1
   83e0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83e10:	e7ac      	b.n	83d6c <__divdi3+0xa8>
   83e12:	4252      	negs	r2, r2
   83e14:	ea6f 0606 	mvn.w	r6, r6
   83e18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83e1c:	e75b      	b.n	83cd6 <__divdi3+0x12>
   83e1e:	4240      	negs	r0, r0
   83e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83e24:	f04f 36ff 	mov.w	r6, #4294967295
   83e28:	e752      	b.n	83cd0 <__divdi3+0xc>
   83e2a:	fa07 f708 	lsl.w	r7, r7, r8
   83e2e:	f1c8 0220 	rsb	r2, r8, #32
   83e32:	fa25 f302 	lsr.w	r3, r5, r2
   83e36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e3a:	fbb3 f1fc 	udiv	r1, r3, ip
   83e3e:	fa1f fe87 	uxth.w	lr, r7
   83e42:	fb0c 3311 	mls	r3, ip, r1, r3
   83e46:	fa24 f202 	lsr.w	r2, r4, r2
   83e4a:	fa05 f508 	lsl.w	r5, r5, r8
   83e4e:	fb0e f901 	mul.w	r9, lr, r1
   83e52:	432a      	orrs	r2, r5
   83e54:	0c10      	lsrs	r0, r2, #16
   83e56:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   83e5a:	4599      	cmp	r9, r3
   83e5c:	fa04 f408 	lsl.w	r4, r4, r8
   83e60:	d907      	bls.n	83e72 <__divdi3+0x1ae>
   83e62:	19db      	adds	r3, r3, r7
   83e64:	f101 30ff 	add.w	r0, r1, #4294967295
   83e68:	d278      	bcs.n	83f5c <__divdi3+0x298>
   83e6a:	4599      	cmp	r9, r3
   83e6c:	d976      	bls.n	83f5c <__divdi3+0x298>
   83e6e:	3902      	subs	r1, #2
   83e70:	443b      	add	r3, r7
   83e72:	ebc9 0303 	rsb	r3, r9, r3
   83e76:	fbb3 f0fc 	udiv	r0, r3, ip
   83e7a:	fb0c 3310 	mls	r3, ip, r0, r3
   83e7e:	fb0e f500 	mul.w	r5, lr, r0
   83e82:	b292      	uxth	r2, r2
   83e84:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83e88:	429d      	cmp	r5, r3
   83e8a:	d907      	bls.n	83e9c <__divdi3+0x1d8>
   83e8c:	19db      	adds	r3, r3, r7
   83e8e:	f100 32ff 	add.w	r2, r0, #4294967295
   83e92:	d25f      	bcs.n	83f54 <__divdi3+0x290>
   83e94:	429d      	cmp	r5, r3
   83e96:	d95d      	bls.n	83f54 <__divdi3+0x290>
   83e98:	3802      	subs	r0, #2
   83e9a:	443b      	add	r3, r7
   83e9c:	1b5d      	subs	r5, r3, r5
   83e9e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   83ea2:	e78c      	b.n	83dbe <__divdi3+0xfa>
   83ea4:	f1c2 0320 	rsb	r3, r2, #32
   83ea8:	fa28 f103 	lsr.w	r1, r8, r3
   83eac:	fa0c fc02 	lsl.w	ip, ip, r2
   83eb0:	ea41 0c0c 	orr.w	ip, r1, ip
   83eb4:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83eb8:	fa2e f103 	lsr.w	r1, lr, r3
   83ebc:	fbb1 f5f0 	udiv	r5, r1, r0
   83ec0:	fa1f f78c 	uxth.w	r7, ip
   83ec4:	fb00 1115 	mls	r1, r0, r5, r1
   83ec8:	fa29 f303 	lsr.w	r3, r9, r3
   83ecc:	fa0e fe02 	lsl.w	lr, lr, r2
   83ed0:	fb07 f905 	mul.w	r9, r7, r5
   83ed4:	ea43 0e0e 	orr.w	lr, r3, lr
   83ed8:	ea4f 431e 	mov.w	r3, lr, lsr #16
   83edc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83ee0:	4589      	cmp	r9, r1
   83ee2:	fa08 f802 	lsl.w	r8, r8, r2
   83ee6:	d908      	bls.n	83efa <__divdi3+0x236>
   83ee8:	eb11 010c 	adds.w	r1, r1, ip
   83eec:	f105 33ff 	add.w	r3, r5, #4294967295
   83ef0:	d232      	bcs.n	83f58 <__divdi3+0x294>
   83ef2:	4589      	cmp	r9, r1
   83ef4:	d930      	bls.n	83f58 <__divdi3+0x294>
   83ef6:	3d02      	subs	r5, #2
   83ef8:	4461      	add	r1, ip
   83efa:	ebc9 0101 	rsb	r1, r9, r1
   83efe:	fbb1 f3f0 	udiv	r3, r1, r0
   83f02:	fb00 1113 	mls	r1, r0, r3, r1
   83f06:	fb07 f703 	mul.w	r7, r7, r3
   83f0a:	fa1f fe8e 	uxth.w	lr, lr
   83f0e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   83f12:	4577      	cmp	r7, lr
   83f14:	d908      	bls.n	83f28 <__divdi3+0x264>
   83f16:	eb1e 0e0c 	adds.w	lr, lr, ip
   83f1a:	f103 31ff 	add.w	r1, r3, #4294967295
   83f1e:	d217      	bcs.n	83f50 <__divdi3+0x28c>
   83f20:	4577      	cmp	r7, lr
   83f22:	d915      	bls.n	83f50 <__divdi3+0x28c>
   83f24:	3b02      	subs	r3, #2
   83f26:	44e6      	add	lr, ip
   83f28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   83f2c:	fba3 8908 	umull	r8, r9, r3, r8
   83f30:	ebc7 0e0e 	rsb	lr, r7, lr
   83f34:	45ce      	cmp	lr, r9
   83f36:	d309      	bcc.n	83f4c <__divdi3+0x288>
   83f38:	d005      	beq.n	83f46 <__divdi3+0x282>
   83f3a:	2200      	movs	r2, #0
   83f3c:	e716      	b.n	83d6c <__divdi3+0xa8>
   83f3e:	4610      	mov	r0, r2
   83f40:	e6f7      	b.n	83d32 <__divdi3+0x6e>
   83f42:	4613      	mov	r3, r2
   83f44:	e70a      	b.n	83d5c <__divdi3+0x98>
   83f46:	4094      	lsls	r4, r2
   83f48:	4544      	cmp	r4, r8
   83f4a:	d2f6      	bcs.n	83f3a <__divdi3+0x276>
   83f4c:	3b01      	subs	r3, #1
   83f4e:	e7f4      	b.n	83f3a <__divdi3+0x276>
   83f50:	460b      	mov	r3, r1
   83f52:	e7e9      	b.n	83f28 <__divdi3+0x264>
   83f54:	4610      	mov	r0, r2
   83f56:	e7a1      	b.n	83e9c <__divdi3+0x1d8>
   83f58:	461d      	mov	r5, r3
   83f5a:	e7ce      	b.n	83efa <__divdi3+0x236>
   83f5c:	4601      	mov	r1, r0
   83f5e:	e788      	b.n	83e72 <__divdi3+0x1ae>
   83f60:	4613      	mov	r3, r2
   83f62:	e703      	b.n	83d6c <__divdi3+0xa8>
   83f64:	3b02      	subs	r3, #2
   83f66:	e751      	b.n	83e0c <__divdi3+0x148>
   83f68:	3802      	subs	r0, #2
   83f6a:	443d      	add	r5, r7
   83f6c:	e73a      	b.n	83de4 <__divdi3+0x120>
   83f6e:	bf00      	nop

00083f70 <__udivdi3>:
   83f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83f74:	2b00      	cmp	r3, #0
   83f76:	d144      	bne.n	84002 <__udivdi3+0x92>
   83f78:	428a      	cmp	r2, r1
   83f7a:	4615      	mov	r5, r2
   83f7c:	4604      	mov	r4, r0
   83f7e:	d94f      	bls.n	84020 <__udivdi3+0xb0>
   83f80:	fab2 f782 	clz	r7, r2
   83f84:	460e      	mov	r6, r1
   83f86:	b14f      	cbz	r7, 83f9c <__udivdi3+0x2c>
   83f88:	f1c7 0320 	rsb	r3, r7, #32
   83f8c:	40b9      	lsls	r1, r7
   83f8e:	fa20 f603 	lsr.w	r6, r0, r3
   83f92:	fa02 f507 	lsl.w	r5, r2, r7
   83f96:	430e      	orrs	r6, r1
   83f98:	fa00 f407 	lsl.w	r4, r0, r7
   83f9c:	0c2f      	lsrs	r7, r5, #16
   83f9e:	fbb6 f0f7 	udiv	r0, r6, r7
   83fa2:	fa1f fe85 	uxth.w	lr, r5
   83fa6:	fb07 6210 	mls	r2, r7, r0, r6
   83faa:	fb0e f100 	mul.w	r1, lr, r0
   83fae:	0c26      	lsrs	r6, r4, #16
   83fb0:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   83fb4:	4299      	cmp	r1, r3
   83fb6:	d909      	bls.n	83fcc <__udivdi3+0x5c>
   83fb8:	195b      	adds	r3, r3, r5
   83fba:	f100 32ff 	add.w	r2, r0, #4294967295
   83fbe:	f080 80ee 	bcs.w	8419e <__udivdi3+0x22e>
   83fc2:	4299      	cmp	r1, r3
   83fc4:	f240 80eb 	bls.w	8419e <__udivdi3+0x22e>
   83fc8:	3802      	subs	r0, #2
   83fca:	442b      	add	r3, r5
   83fcc:	1a59      	subs	r1, r3, r1
   83fce:	fbb1 f3f7 	udiv	r3, r1, r7
   83fd2:	fb07 1113 	mls	r1, r7, r3, r1
   83fd6:	fb0e fe03 	mul.w	lr, lr, r3
   83fda:	b2a4      	uxth	r4, r4
   83fdc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   83fe0:	458e      	cmp	lr, r1
   83fe2:	d908      	bls.n	83ff6 <__udivdi3+0x86>
   83fe4:	1949      	adds	r1, r1, r5
   83fe6:	f103 32ff 	add.w	r2, r3, #4294967295
   83fea:	f080 80da 	bcs.w	841a2 <__udivdi3+0x232>
   83fee:	458e      	cmp	lr, r1
   83ff0:	f240 80d7 	bls.w	841a2 <__udivdi3+0x232>
   83ff4:	3b02      	subs	r3, #2
   83ff6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83ffa:	2600      	movs	r6, #0
   83ffc:	4631      	mov	r1, r6
   83ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84002:	428b      	cmp	r3, r1
   84004:	d847      	bhi.n	84096 <__udivdi3+0x126>
   84006:	fab3 f683 	clz	r6, r3
   8400a:	2e00      	cmp	r6, #0
   8400c:	d148      	bne.n	840a0 <__udivdi3+0x130>
   8400e:	428b      	cmp	r3, r1
   84010:	d302      	bcc.n	84018 <__udivdi3+0xa8>
   84012:	4282      	cmp	r2, r0
   84014:	f200 80cf 	bhi.w	841b6 <__udivdi3+0x246>
   84018:	2001      	movs	r0, #1
   8401a:	4631      	mov	r1, r6
   8401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84020:	b912      	cbnz	r2, 84028 <__udivdi3+0xb8>
   84022:	2501      	movs	r5, #1
   84024:	fbb5 f5f2 	udiv	r5, r5, r2
   84028:	fab5 fc85 	clz	ip, r5
   8402c:	f1bc 0f00 	cmp.w	ip, #0
   84030:	d178      	bne.n	84124 <__udivdi3+0x1b4>
   84032:	1b49      	subs	r1, r1, r5
   84034:	0c2f      	lsrs	r7, r5, #16
   84036:	fa1f fe85 	uxth.w	lr, r5
   8403a:	2601      	movs	r6, #1
   8403c:	fbb1 f0f7 	udiv	r0, r1, r7
   84040:	fb07 1110 	mls	r1, r7, r0, r1
   84044:	fb0e f200 	mul.w	r2, lr, r0
   84048:	0c23      	lsrs	r3, r4, #16
   8404a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8404e:	428a      	cmp	r2, r1
   84050:	d907      	bls.n	84062 <__udivdi3+0xf2>
   84052:	1949      	adds	r1, r1, r5
   84054:	f100 33ff 	add.w	r3, r0, #4294967295
   84058:	d202      	bcs.n	84060 <__udivdi3+0xf0>
   8405a:	428a      	cmp	r2, r1
   8405c:	f200 80bc 	bhi.w	841d8 <__udivdi3+0x268>
   84060:	4618      	mov	r0, r3
   84062:	1a89      	subs	r1, r1, r2
   84064:	fbb1 f3f7 	udiv	r3, r1, r7
   84068:	fb07 1113 	mls	r1, r7, r3, r1
   8406c:	fb0e fe03 	mul.w	lr, lr, r3
   84070:	b2a4      	uxth	r4, r4
   84072:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   84076:	4596      	cmp	lr, r2
   84078:	d908      	bls.n	8408c <__udivdi3+0x11c>
   8407a:	1952      	adds	r2, r2, r5
   8407c:	f103 31ff 	add.w	r1, r3, #4294967295
   84080:	f080 8091 	bcs.w	841a6 <__udivdi3+0x236>
   84084:	4596      	cmp	lr, r2
   84086:	f240 808e 	bls.w	841a6 <__udivdi3+0x236>
   8408a:	3b02      	subs	r3, #2
   8408c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   84090:	4631      	mov	r1, r6
   84092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84096:	2600      	movs	r6, #0
   84098:	4630      	mov	r0, r6
   8409a:	4631      	mov	r1, r6
   8409c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   840a0:	f1c6 0420 	rsb	r4, r6, #32
   840a4:	fa22 f504 	lsr.w	r5, r2, r4
   840a8:	40b3      	lsls	r3, r6
   840aa:	432b      	orrs	r3, r5
   840ac:	fa21 f704 	lsr.w	r7, r1, r4
   840b0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   840b4:	fbb7 fcf8 	udiv	ip, r7, r8
   840b8:	fa1f f983 	uxth.w	r9, r3
   840bc:	fb08 771c 	mls	r7, r8, ip, r7
   840c0:	fa20 fe04 	lsr.w	lr, r0, r4
   840c4:	fa01 f506 	lsl.w	r5, r1, r6
   840c8:	fb09 f40c 	mul.w	r4, r9, ip
   840cc:	ea4e 0505 	orr.w	r5, lr, r5
   840d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   840d4:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   840d8:	42bc      	cmp	r4, r7
   840da:	fa02 f206 	lsl.w	r2, r2, r6
   840de:	d904      	bls.n	840ea <__udivdi3+0x17a>
   840e0:	18ff      	adds	r7, r7, r3
   840e2:	f10c 31ff 	add.w	r1, ip, #4294967295
   840e6:	d368      	bcc.n	841ba <__udivdi3+0x24a>
   840e8:	468c      	mov	ip, r1
   840ea:	1b3f      	subs	r7, r7, r4
   840ec:	fbb7 f4f8 	udiv	r4, r7, r8
   840f0:	fb08 7714 	mls	r7, r8, r4, r7
   840f4:	fb09 f904 	mul.w	r9, r9, r4
   840f8:	b2ad      	uxth	r5, r5
   840fa:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   840fe:	4589      	cmp	r9, r1
   84100:	d904      	bls.n	8410c <__udivdi3+0x19c>
   84102:	18c9      	adds	r1, r1, r3
   84104:	f104 35ff 	add.w	r5, r4, #4294967295
   84108:	d35d      	bcc.n	841c6 <__udivdi3+0x256>
   8410a:	462c      	mov	r4, r5
   8410c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   84110:	fba4 2302 	umull	r2, r3, r4, r2
   84114:	ebc9 0101 	rsb	r1, r9, r1
   84118:	4299      	cmp	r1, r3
   8411a:	d349      	bcc.n	841b0 <__udivdi3+0x240>
   8411c:	d045      	beq.n	841aa <__udivdi3+0x23a>
   8411e:	4620      	mov	r0, r4
   84120:	2600      	movs	r6, #0
   84122:	e76b      	b.n	83ffc <__udivdi3+0x8c>
   84124:	f1cc 0420 	rsb	r4, ip, #32
   84128:	fa05 f50c 	lsl.w	r5, r5, ip
   8412c:	fa21 f304 	lsr.w	r3, r1, r4
   84130:	0c2a      	lsrs	r2, r5, #16
   84132:	fbb3 f6f2 	udiv	r6, r3, r2
   84136:	fa1f fe85 	uxth.w	lr, r5
   8413a:	fb02 3816 	mls	r8, r2, r6, r3
   8413e:	fa20 f704 	lsr.w	r7, r0, r4
   84142:	fa01 f10c 	lsl.w	r1, r1, ip
   84146:	fb0e f906 	mul.w	r9, lr, r6
   8414a:	430f      	orrs	r7, r1
   8414c:	0c3c      	lsrs	r4, r7, #16
   8414e:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   84152:	4599      	cmp	r9, r3
   84154:	fa00 f40c 	lsl.w	r4, r0, ip
   84158:	d907      	bls.n	8416a <__udivdi3+0x1fa>
   8415a:	195b      	adds	r3, r3, r5
   8415c:	f106 31ff 	add.w	r1, r6, #4294967295
   84160:	d238      	bcs.n	841d4 <__udivdi3+0x264>
   84162:	4599      	cmp	r9, r3
   84164:	d936      	bls.n	841d4 <__udivdi3+0x264>
   84166:	3e02      	subs	r6, #2
   84168:	442b      	add	r3, r5
   8416a:	ebc9 0303 	rsb	r3, r9, r3
   8416e:	fbb3 f0f2 	udiv	r0, r3, r2
   84172:	fb02 3310 	mls	r3, r2, r0, r3
   84176:	fb0e f100 	mul.w	r1, lr, r0
   8417a:	b2bf      	uxth	r7, r7
   8417c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   84180:	4299      	cmp	r1, r3
   84182:	d907      	bls.n	84194 <__udivdi3+0x224>
   84184:	195b      	adds	r3, r3, r5
   84186:	f100 37ff 	add.w	r7, r0, #4294967295
   8418a:	d221      	bcs.n	841d0 <__udivdi3+0x260>
   8418c:	4299      	cmp	r1, r3
   8418e:	d91f      	bls.n	841d0 <__udivdi3+0x260>
   84190:	3802      	subs	r0, #2
   84192:	442b      	add	r3, r5
   84194:	4617      	mov	r7, r2
   84196:	1a59      	subs	r1, r3, r1
   84198:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   8419c:	e74e      	b.n	8403c <__udivdi3+0xcc>
   8419e:	4610      	mov	r0, r2
   841a0:	e714      	b.n	83fcc <__udivdi3+0x5c>
   841a2:	4613      	mov	r3, r2
   841a4:	e727      	b.n	83ff6 <__udivdi3+0x86>
   841a6:	460b      	mov	r3, r1
   841a8:	e770      	b.n	8408c <__udivdi3+0x11c>
   841aa:	40b0      	lsls	r0, r6
   841ac:	4290      	cmp	r0, r2
   841ae:	d2b6      	bcs.n	8411e <__udivdi3+0x1ae>
   841b0:	1e60      	subs	r0, r4, #1
   841b2:	2600      	movs	r6, #0
   841b4:	e722      	b.n	83ffc <__udivdi3+0x8c>
   841b6:	4630      	mov	r0, r6
   841b8:	e720      	b.n	83ffc <__udivdi3+0x8c>
   841ba:	42bc      	cmp	r4, r7
   841bc:	d994      	bls.n	840e8 <__udivdi3+0x178>
   841be:	f1ac 0c02 	sub.w	ip, ip, #2
   841c2:	441f      	add	r7, r3
   841c4:	e791      	b.n	840ea <__udivdi3+0x17a>
   841c6:	4589      	cmp	r9, r1
   841c8:	d99f      	bls.n	8410a <__udivdi3+0x19a>
   841ca:	3c02      	subs	r4, #2
   841cc:	4419      	add	r1, r3
   841ce:	e79d      	b.n	8410c <__udivdi3+0x19c>
   841d0:	4638      	mov	r0, r7
   841d2:	e7df      	b.n	84194 <__udivdi3+0x224>
   841d4:	460e      	mov	r6, r1
   841d6:	e7c8      	b.n	8416a <__udivdi3+0x1fa>
   841d8:	3802      	subs	r0, #2
   841da:	4429      	add	r1, r5
   841dc:	e741      	b.n	84062 <__udivdi3+0xf2>
   841de:	bf00      	nop
   841e0:	00000043 	.word	0x00000043

000841e4 <_global_impure_ptr>:
   841e4:	20070140 33323130 37363534 62613938     @.. 0123456789ab
   841f4:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   84204:	76757473 7a797877 00000000              stuvwxyz....

00084210 <zeroes.6869>:
   84210:	30303030 30303030 30303030 30303030     0000000000000000
   84220:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   84230:	00000000 33323130 37363534 62613938     ....0123456789ab
   84240:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00084250 <blanks.6868>:
   84250:	20202020 20202020 20202020 20202020                     

00084260 <_init>:
   84260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84262:	bf00      	nop
   84264:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84266:	bc08      	pop	{r3}
   84268:	469e      	mov	lr, r3
   8426a:	4770      	bx	lr

0008426c <__init_array_start>:
   8426c:	000820d5 	.word	0x000820d5

00084270 <__frame_dummy_init_array_entry>:
   84270:	00080119                                ....

00084274 <_fini>:
   84274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84276:	bf00      	nop
   84278:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8427a:	bc08      	pop	{r3}
   8427c:	469e      	mov	lr, r3
   8427e:	4770      	bx	lr

00084280 <__fini_array_start>:
   84280:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000841e0 00000000 00000000 00000000     .A..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083a05                                .:..
